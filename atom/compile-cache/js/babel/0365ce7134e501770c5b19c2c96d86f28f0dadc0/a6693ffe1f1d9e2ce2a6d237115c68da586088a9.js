'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

// This url style is the one Atom uses for the welcome and settings pages.
var NUCLIDE_DIFF_VIEW_URI = 'atom://nuclide/diff-view';

var subscriptions = null;

var logger = null;

function getLogger() {
  return logger || (logger = require('nuclide-logging').getLogger());
}

// To add a view as a tab, we can either extend {View} from space-pen-views
// and carry over the jQuery overhead or extend HTMLElement, like Atom's text-editor-element.
function createView(model) {
  var React = require('react-for-atom');
  var DiffViewElement = require('./DiffViewElement');
  var DiffViewComponent = require('./DiffViewComponent');

  var hostElement = new DiffViewElement().initialize(model);
  var component = React.render(React.createElement(DiffViewComponent, { model: model }), hostElement);
  // TODO(most): unmount component on tab close.
  return hostElement;
}

module.exports = {

  activate: function activate(state) {
    subscriptions = new CompositeDisposable();

    var DiffViewModel = require('./DiffViewModel');

    subscriptions.add(atom.commands.add('atom-text-editor', 'nuclide-diff-view:open', function () {
      var editor = atom.workspace.getActiveTextEditor();
      if (!editor) {
        return logger.warn('No active text editor for diff view!');
      }
      atom.workspace.open(NUCLIDE_DIFF_VIEW_URI + editor.getPath());
    }));

    // The Diff View will open its main UI in a tab, like Atom's preferences and welcome pages.
    subscriptions.add(atom.workspace.addOpener(function (uri) {
      if (uri.startsWith(NUCLIDE_DIFF_VIEW_URI)) {
        var filePath = uri.slice(NUCLIDE_DIFF_VIEW_URI.length);
        var model = new DiffViewModel(uri, filePath);
        return model.fetchDiffState().then(function () {
          return createView(model);
        }, function (err) {
          var errorMessge = 'Cannot open diff view for file: ' + filePath + '<br/>Error: ' + err.message;
          getLogger().error(errorMessge);
          atom.notifications.addError(errorMessge);
        });
      }
    }));
  },

  serialize: function serialize() {},

  deactivate: function deactivate() {
    if (subscriptions) {
      subscriptions.dispose();
      subscriptions = null;
    }
  }
};

// TODO(most): Return the state of the diff view here, so, we can restore it on reload or restart.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLWRpZmYtdmlldy9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7O2VBV2dCLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0lBQXRDLG1CQUFtQixZQUFuQixtQkFBbUI7OztBQUd4QixJQUFNLHFCQUFxQixHQUFHLDBCQUEwQixDQUFDOztBQUV6RCxJQUFJLGFBQW1DLEdBQUcsSUFBSSxDQUFDOztBQUUvQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7O0FBRWxCLFNBQVMsU0FBUyxHQUFHO0FBQ25CLFNBQU8sTUFBTSxLQUFLLE1BQU0sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQSxDQUFFO0NBQ3BFOzs7O0FBSUQsU0FBUyxVQUFVLENBQUUsS0FBSyxFQUFlO0FBQ3ZDLE1BQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RDLE1BQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25ELE1BQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7O0FBRXZELE1BQUksV0FBVyxHQUFHLElBQUksZUFBZSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFELE1BQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsb0JBQUMsaUJBQWlCLElBQUMsS0FBSyxFQUFFLEtBQUssR0FBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDOztBQUUvRSxTQUFPLFdBQVcsQ0FBQztDQUNwQjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHOztBQUVmLFVBQVEsRUFBQSxrQkFBQyxLQUFXLEVBQVE7QUFDMUIsaUJBQWEsR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7O0FBRTFDLFFBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUUvQyxpQkFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDakMsa0JBQWtCLEVBQ2xCLHdCQUF3QixFQUN4QixZQUFNO0FBQ0osVUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQ2xELFVBQUksQ0FBQyxNQUFNLEVBQUU7QUFDWCxlQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQztPQUM1RDtBQUNELFVBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0tBQy9ELENBQ0YsQ0FBQyxDQUFDOzs7QUFHSCxpQkFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFBLEdBQUcsRUFBSTtBQUNoRCxVQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsRUFBRTtBQUN6QyxZQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELFlBQUksS0FBSyxHQUFHLElBQUksYUFBYSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3QyxlQUFPLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBTTtBQUN2QyxpQkFBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUIsRUFBRSxVQUFDLEdBQUcsRUFBSztBQUNWLGNBQUksV0FBVyxHQUFHLGtDQUFrQyxHQUFHLFFBQVEsR0FBRyxjQUFjLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUMvRixtQkFBUyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQy9CLGNBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzFDLENBQUMsQ0FBQztPQUNKO0tBQ0YsQ0FBQyxDQUFDLENBQUM7R0FDTDs7QUFFRCxXQUFTLEVBQUEscUJBQVMsRUFFakI7O0FBRUQsWUFBVSxFQUFBLHNCQUFTO0FBQ2pCLFFBQUksYUFBYSxFQUFFO0FBQ2pCLG1CQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDeEIsbUJBQWEsR0FBRyxJQUFJLENBQUM7S0FDdEI7R0FDRjtDQUNGLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL251Y2xpZGUtZGlmZi12aWV3L2xpYi9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHtDb21wb3NpdGVEaXNwb3NhYmxlfSA9IHJlcXVpcmUoJ2F0b20nKTtcblxuLy8gVGhpcyB1cmwgc3R5bGUgaXMgdGhlIG9uZSBBdG9tIHVzZXMgZm9yIHRoZSB3ZWxjb21lIGFuZCBzZXR0aW5ncyBwYWdlcy5cbmNvbnN0IE5VQ0xJREVfRElGRl9WSUVXX1VSSSA9ICdhdG9tOi8vbnVjbGlkZS9kaWZmLXZpZXcnO1xuXG52YXIgc3Vic2NyaXB0aW9uczogP0NvbXBvc2l0ZURpc3Bvc2FibGUgPSBudWxsO1xuXG52YXIgbG9nZ2VyID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICByZXR1cm4gbG9nZ2VyIHx8IChsb2dnZXIgPSByZXF1aXJlKCdudWNsaWRlLWxvZ2dpbmcnKS5nZXRMb2dnZXIoKSk7XG59XG5cbi8vIFRvIGFkZCBhIHZpZXcgYXMgYSB0YWIsIHdlIGNhbiBlaXRoZXIgZXh0ZW5kIHtWaWV3fSBmcm9tIHNwYWNlLXBlbi12aWV3c1xuLy8gYW5kIGNhcnJ5IG92ZXIgdGhlIGpRdWVyeSBvdmVyaGVhZCBvciBleHRlbmQgSFRNTEVsZW1lbnQsIGxpa2UgQXRvbSdzIHRleHQtZWRpdG9yLWVsZW1lbnQuXG5mdW5jdGlvbiBjcmVhdGVWaWV3IChtb2RlbCk6IEhUTUxFbGVtZW50IHtcbiAgdmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QtZm9yLWF0b20nKTtcbiAgdmFyIERpZmZWaWV3RWxlbWVudCA9IHJlcXVpcmUoJy4vRGlmZlZpZXdFbGVtZW50Jyk7XG4gIHZhciBEaWZmVmlld0NvbXBvbmVudCA9IHJlcXVpcmUoJy4vRGlmZlZpZXdDb21wb25lbnQnKTtcblxuICB2YXIgaG9zdEVsZW1lbnQgPSBuZXcgRGlmZlZpZXdFbGVtZW50KCkuaW5pdGlhbGl6ZShtb2RlbCk7XG4gIHZhciBjb21wb25lbnQgPSBSZWFjdC5yZW5kZXIoPERpZmZWaWV3Q29tcG9uZW50IG1vZGVsPXttb2RlbH0gLz4sIGhvc3RFbGVtZW50KTtcbiAgLy8gVE9ETyhtb3N0KTogdW5tb3VudCBjb21wb25lbnQgb24gdGFiIGNsb3NlLlxuICByZXR1cm4gaG9zdEVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIGFjdGl2YXRlKHN0YXRlOiA/YW55KTogdm9pZCB7XG4gICAgc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG5cbiAgICB2YXIgRGlmZlZpZXdNb2RlbCA9IHJlcXVpcmUoJy4vRGlmZlZpZXdNb2RlbCcpO1xuXG4gICAgc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgICAnYXRvbS10ZXh0LWVkaXRvcicsXG4gICAgICAnbnVjbGlkZS1kaWZmLXZpZXc6b3BlbicsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHZhciBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKCk7XG4gICAgICAgIGlmICghZWRpdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCdObyBhY3RpdmUgdGV4dCBlZGl0b3IgZm9yIGRpZmYgdmlldyEnKTtcbiAgICAgICAgfVxuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKE5VQ0xJREVfRElGRl9WSUVXX1VSSSArIGVkaXRvci5nZXRQYXRoKCkpO1xuICAgICAgfVxuICAgICkpO1xuXG4gICAgLy8gVGhlIERpZmYgVmlldyB3aWxsIG9wZW4gaXRzIG1haW4gVUkgaW4gYSB0YWIsIGxpa2UgQXRvbSdzIHByZWZlcmVuY2VzIGFuZCB3ZWxjb21lIHBhZ2VzLlxuICAgIHN1YnNjcmlwdGlvbnMuYWRkKGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcih1cmkgPT4ge1xuICAgICAgaWYgKHVyaS5zdGFydHNXaXRoKE5VQ0xJREVfRElGRl9WSUVXX1VSSSkpIHtcbiAgICAgICAgdmFyIGZpbGVQYXRoID0gdXJpLnNsaWNlKE5VQ0xJREVfRElGRl9WSUVXX1VSSS5sZW5ndGgpO1xuICAgICAgICB2YXIgbW9kZWwgPSBuZXcgRGlmZlZpZXdNb2RlbCh1cmksIGZpbGVQYXRoKTtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmZldGNoRGlmZlN0YXRlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVZpZXcobW9kZWwpO1xuICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgdmFyIGVycm9yTWVzc2dlID0gJ0Nhbm5vdCBvcGVuIGRpZmYgdmlldyBmb3IgZmlsZTogJyArIGZpbGVQYXRoICsgJzxici8+RXJyb3I6ICcgKyBlcnIubWVzc2FnZTtcbiAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihlcnJvck1lc3NnZSk7XG4gICAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKGVycm9yTWVzc2dlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9LFxuXG4gIHNlcmlhbGl6ZSgpOiA/YW55IHtcbiAgICAvLyBUT0RPKG1vc3QpOiBSZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSBkaWZmIHZpZXcgaGVyZSwgc28sIHdlIGNhbiByZXN0b3JlIGl0IG9uIHJlbG9hZCBvciByZXN0YXJ0LlxuICB9LFxuXG4gIGRlYWN0aXZhdGUoKTogdm9pZCB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpO1xuICAgICAgc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgfVxuICB9LFxufTtcbiJdfQ==