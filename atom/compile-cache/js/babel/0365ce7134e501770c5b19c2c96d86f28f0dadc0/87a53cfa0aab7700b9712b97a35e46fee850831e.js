'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
/**
  * Currently we have two different ways to config a service in service-config.json:
  *   1. `{"useServiceFramework": false, "path": "path/to/service/file"}`, a old fashioned way
  *      to config a service and it is deprecated.
  *   2. `{"useServiceFramework": true,
  *        "definition": "path/to/service/defintion",
  *        "implementation": "path/to/local/implementation"}, use service framework to config
  *      a service definition and a local implementation.
  */

var path = require('path');

var SERVICE_FRAMEWORK_EVENT_CHANNEL = 'service_framework_event';
var SERVICE_FRAMEWORK_RPC_CHANNEL = 'service_framework_rpc';
var SERVICE_FRAMEWORK_RPC_TIMEOUT_MS = 60 * 1000;
var SERVICES_CONFIG_PATH = path.resolve(__dirname, '../services-config.json');

function loadConfigsOfServiceWithServiceFramework() {
  return require(SERVICES_CONFIG_PATH).filter(function (config) {
    return config.useServiceFramework;
  }).map(function (config) {
    return {
      name: config.name,
      definition: _resolveServiceConfigPath(config.definition),
      implementation: _resolveServiceConfigPath(config.implementation)
    };
  });
}

function loadConfigsOfServiceWithoutServiceFramework() {
  return require(SERVICES_CONFIG_PATH).filter(function (config) {
    return !config.useServiceFramework;
  }).map(function (config) {
    return _resolveServiceConfigPath(config.path);
  });
}

/**
  * Resolve service path defined in service-config.json to absolute path. The service path could
  * be in one of following forms:
  *   1. A path relative to the folder contains `service-config.json`.
  *   2. An absolute path.
  *   3. A path in form of `$dependency_package/path/to/service`. For example,
  *      'nuclide-commons/lib/array.js'.
  */
function _resolveServiceConfigPath(serviceConfigPath) {
  try {
    return require.resolve(serviceConfigPath);
  } catch (e) {
    return path.resolve(path.dirname(SERVICES_CONFIG_PATH), serviceConfigPath);
  }
}

module.exports = {
  loadConfigsOfServiceWithoutServiceFramework: loadConfigsOfServiceWithoutServiceFramework,
  loadConfigsOfServiceWithServiceFramework: loadConfigsOfServiceWithServiceFramework,
  SERVICE_FRAMEWORK_EVENT_CHANNEL: SERVICE_FRAMEWORK_EVENT_CHANNEL,
  SERVICE_FRAMEWORK_RPC_CHANNEL: SERVICE_FRAMEWORK_RPC_CHANNEL,
  SERVICE_FRAMEWORK_RPC_TIMEOUT_MS: SERVICE_FRAMEWORK_RPC_TIMEOUT_MS
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLXJlbW90ZS1wcm9qZWN0cy9ub2RlX21vZHVsZXMvbnVjbGlkZS1jbGllbnQvbm9kZV9tb2R1bGVzL251Y2xpZGUtc2VydmVyL2xpYi9jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CWixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTNCLElBQU0sK0JBQStCLEdBQUcseUJBQXlCLENBQUM7QUFDbEUsSUFBTSw2QkFBNkIsR0FBRyx1QkFBdUIsQ0FBQztBQUM5RCxJQUFNLGdDQUFnQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDbkQsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDOztBQUVoRixTQUFTLHdDQUF3QyxHQUFlO0FBQzlELFNBQU8sT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQ2pDLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxNQUFNLENBQUMsbUJBQW1CO0dBQUEsQ0FBQyxDQUM1QyxHQUFHLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDYixXQUFPO0FBQ0wsVUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pCLGdCQUFVLEVBQUUseUJBQXlCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN4RCxvQkFBYyxFQUFFLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7S0FDakUsQ0FBQztHQUNILENBQUMsQ0FBQztDQUNOOztBQUVELFNBQVMsMkNBQTJDLEdBQWtCO0FBQ3BFLFNBQU8sT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQ2pDLE1BQU0sQ0FBQyxVQUFBLE1BQU07V0FBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUI7R0FBQSxDQUFDLENBQzdDLEdBQUcsQ0FBQyxVQUFBLE1BQU07V0FBSSx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0dBQUEsQ0FBQyxDQUFBO0NBQ3pEOzs7Ozs7Ozs7O0FBVUQsU0FBUyx5QkFBeUIsQ0FBQyxpQkFBeUIsRUFBVTtBQUNwRSxNQUFJO0FBQ0YsV0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7R0FDM0MsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNWLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztHQUM1RTtDQUNGOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZiw2Q0FBMkMsRUFBM0MsMkNBQTJDO0FBQzNDLDBDQUF3QyxFQUF4Qyx3Q0FBd0M7QUFDeEMsaUNBQStCLEVBQS9CLCtCQUErQjtBQUMvQiwrQkFBNkIsRUFBN0IsNkJBQTZCO0FBQzdCLGtDQUFnQyxFQUFoQyxnQ0FBZ0M7Q0FDakMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvbnVjbGlkZS1yZW1vdGUtcHJvamVjdHMvbm9kZV9tb2R1bGVzL251Y2xpZGUtY2xpZW50L25vZGVfbW9kdWxlcy9udWNsaWRlLXNlcnZlci9saWIvY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qKlxuICAqIEN1cnJlbnRseSB3ZSBoYXZlIHR3byBkaWZmZXJlbnQgd2F5cyB0byBjb25maWcgYSBzZXJ2aWNlIGluIHNlcnZpY2UtY29uZmlnLmpzb246XG4gICogICAxLiBge1widXNlU2VydmljZUZyYW1ld29ya1wiOiBmYWxzZSwgXCJwYXRoXCI6IFwicGF0aC90by9zZXJ2aWNlL2ZpbGVcIn1gLCBhIG9sZCBmYXNoaW9uZWQgd2F5XG4gICogICAgICB0byBjb25maWcgYSBzZXJ2aWNlIGFuZCBpdCBpcyBkZXByZWNhdGVkLlxuICAqICAgMi4gYHtcInVzZVNlcnZpY2VGcmFtZXdvcmtcIjogdHJ1ZSxcbiAgKiAgICAgICAgXCJkZWZpbml0aW9uXCI6IFwicGF0aC90by9zZXJ2aWNlL2RlZmludGlvblwiLFxuICAqICAgICAgICBcImltcGxlbWVudGF0aW9uXCI6IFwicGF0aC90by9sb2NhbC9pbXBsZW1lbnRhdGlvblwifSwgdXNlIHNlcnZpY2UgZnJhbWV3b3JrIHRvIGNvbmZpZ1xuICAqICAgICAgYSBzZXJ2aWNlIGRlZmluaXRpb24gYW5kIGEgbG9jYWwgaW1wbGVtZW50YXRpb24uXG4gICovXG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBTRVJWSUNFX0ZSQU1FV09SS19FVkVOVF9DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX2V2ZW50JztcbmNvbnN0IFNFUlZJQ0VfRlJBTUVXT1JLX1JQQ19DSEFOTkVMID0gJ3NlcnZpY2VfZnJhbWV3b3JrX3JwYyc7XG5jb25zdCBTRVJWSUNFX0ZSQU1FV09SS19SUENfVElNRU9VVF9NUyA9IDYwICogMTAwMDtcbmNvbnN0IFNFUlZJQ0VTX0NPTkZJR19QQVRIID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uL3NlcnZpY2VzLWNvbmZpZy5qc29uJyk7XG5cbmZ1bmN0aW9uIGxvYWRDb25maWdzT2ZTZXJ2aWNlV2l0aFNlcnZpY2VGcmFtZXdvcmsoKTogQXJyYXk8YW55PiB7XG4gIHJldHVybiByZXF1aXJlKFNFUlZJQ0VTX0NPTkZJR19QQVRIKVxuICAgIC5maWx0ZXIoY29uZmlnID0+IGNvbmZpZy51c2VTZXJ2aWNlRnJhbWV3b3JrKVxuICAgIC5tYXAoY29uZmlnID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGNvbmZpZy5uYW1lLFxuICAgICAgICBkZWZpbml0aW9uOiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5kZWZpbml0aW9uKSxcbiAgICAgICAgaW1wbGVtZW50YXRpb246IF9yZXNvbHZlU2VydmljZUNvbmZpZ1BhdGgoY29uZmlnLmltcGxlbWVudGF0aW9uKSxcbiAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRDb25maWdzT2ZTZXJ2aWNlV2l0aG91dFNlcnZpY2VGcmFtZXdvcmsoKTogQXJyYXk8c3RyaW5nPiB7XG4gIHJldHVybiByZXF1aXJlKFNFUlZJQ0VTX0NPTkZJR19QQVRIKVxuICAgIC5maWx0ZXIoY29uZmlnID0+ICFjb25maWcudXNlU2VydmljZUZyYW1ld29yaylcbiAgICAubWFwKGNvbmZpZyA9PiBfcmVzb2x2ZVNlcnZpY2VDb25maWdQYXRoKGNvbmZpZy5wYXRoKSlcbn1cblxuLyoqXG4gICogUmVzb2x2ZSBzZXJ2aWNlIHBhdGggZGVmaW5lZCBpbiBzZXJ2aWNlLWNvbmZpZy5qc29uIHRvIGFic29sdXRlIHBhdGguIFRoZSBzZXJ2aWNlIHBhdGggY291bGRcbiAgKiBiZSBpbiBvbmUgb2YgZm9sbG93aW5nIGZvcm1zOlxuICAqICAgMS4gQSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBmb2xkZXIgY29udGFpbnMgYHNlcnZpY2UtY29uZmlnLmpzb25gLlxuICAqICAgMi4gQW4gYWJzb2x1dGUgcGF0aC5cbiAgKiAgIDMuIEEgcGF0aCBpbiBmb3JtIG9mIGAkZGVwZW5kZW5jeV9wYWNrYWdlL3BhdGgvdG8vc2VydmljZWAuIEZvciBleGFtcGxlLFxuICAqICAgICAgJ251Y2xpZGUtY29tbW9ucy9saWIvYXJyYXkuanMnLlxuICAqL1xuZnVuY3Rpb24gX3Jlc29sdmVTZXJ2aWNlQ29uZmlnUGF0aChzZXJ2aWNlQ29uZmlnUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcmVxdWlyZS5yZXNvbHZlKHNlcnZpY2VDb25maWdQYXRoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKFNFUlZJQ0VTX0NPTkZJR19QQVRIKSwgc2VydmljZUNvbmZpZ1BhdGgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBsb2FkQ29uZmlnc09mU2VydmljZVdpdGhvdXRTZXJ2aWNlRnJhbWV3b3JrLFxuICBsb2FkQ29uZmlnc09mU2VydmljZVdpdGhTZXJ2aWNlRnJhbWV3b3JrLFxuICBTRVJWSUNFX0ZSQU1FV09SS19FVkVOVF9DSEFOTkVMLFxuICBTRVJWSUNFX0ZSQU1FV09SS19SUENfQ0hBTk5FTCxcbiAgU0VSVklDRV9GUkFNRVdPUktfUlBDX1RJTUVPVVRfTVMsXG59O1xuIl19