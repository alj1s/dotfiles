var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

'use babel';

var trackFunction;
function track() {
  var trackFunc = trackFunction || (trackFunction = require('nuclide-analytics').track);

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  trackFunc.apply(null, args);
}

var debounceFunction = null;
function debounce() {
  var debounceFunc = debounceFunction || (debounceFunction = require('nuclide-commons').debounce);

  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return debounceFunc.apply(null, args);
};

var searchResultManager = null;
function getSearchResultManager() {
  return searchResultManager || (searchResultManager = require('./SearchResultManager'));
};

var DEFAULT_PROVIDER = 'FileListProvider';
var MAX_MODAL_WIDTH = 800;

/**
 * A "session" for the purpose of analytics. It exists from the moment the quick-open UI becomes
 * visible until it gets closed, either via file selection or cancellation.
 */
var analyticsSessionId = null;
var AnalyticsEvents = {
  CHANGE_SELECTION: 'quickopen-change-selection',
  CHANGE_TAB: 'quickopen-change-tab',
  CLOSE_PANEL: 'quickopen-close-panel',
  OPEN_PANEL: 'quickopen-open-panel',
  SELECT_FILE: 'quickopen-select-file'
};
var AnalyticsDebounceDelays = {
  CHANGE_TAB: 100,
  CHANGE_SELECTION: 100
};

var _quickSelectionComponent = null;
function getQuickSelectionComponentLazily() {
  if (!_quickSelectionComponent) {
    _quickSelectionComponent = require('./QuickSelectionComponent');
  }
  return _quickSelectionComponent;
}

var _react = null;
function getReactLazily() {
  if (_react === null) {
    _react = require('react-for-atom');
  }
  return _react;
}

var Activation = (function () {
  function Activation() {
    var _this = this;

    _classCallCheck(this, Activation);

    this._previousFocus = null;

    var _require = require('atom');

    var CompositeDisposable = _require.CompositeDisposable;

    this._currentProvider = getSearchResultManager().getProvider(DEFAULT_PROVIDER);
    this._reactDiv = document.createElement('div');
    this._searchPanel = atom.workspace.addModalPanel({ item: this._reactDiv, visible: false });
    this._debouncedUpdateModalPosition = debounce(this._updateModalPosition.bind(this), 200);
    window.addEventListener('resize', this._debouncedUpdateModalPosition);
    this._updateModalPosition();

    this._searchComponent = this._render();
    this._searchComponent.onSelection(function (selection) {
      var options = {};
      if (selection.line) {
        options.initialLine = selection.line;
      }
      if (selection.column) {
        options.initialColumn = selection.column;
      }
      atom.workspace.open(selection.path, options);
      var query = _this._searchComponent.getInputTextEditor().textContent;
      var providerName = _this._currentProvider.constructor.name;
      track(AnalyticsEvents.SELECT_FILE, {
        'quickopen-filepath': selection.path,
        'quickopen-query': query,
        'quickopen-provider': providerName,
        'quickopen-session': analyticsSessionId
      });
      _this.closeSearchPanel();
    });

    this._searchComponent.onCancellation(function () {
      return _this.closeSearchPanel();
    });
    this._searchComponent.onTabChange(debounce(function (providerName) {
      analyticsSessionId = analyticsSessionId || Date.now().toString();
      track(AnalyticsEvents.CHANGE_TAB, {
        'quickopen-provider': providerName,
        'quickopen-session': analyticsSessionId
      });
      _this.toggleProvider(providerName);
    }, AnalyticsDebounceDelays.CHANGE_TAB));
    this._searchComponent.onSelectionChanged(debounce(function (selection) {
      track(AnalyticsEvents.CHANGE_SELECTION, {

        'quickopen-selected-index': selection.selectedItemIndex.toString(),
        'quickopen-selected-service': Number.prototype.toString.call(selection.selectedItemIndex),
        'quickopen-selected-directory': selection.selectedDirectory,
        'quickopen-session': analyticsSessionId
      });
    }, AnalyticsDebounceDelays.CHANGE_SELECTION));
  }

  _createClass(Activation, [{
    key: '_updateModalPosition',
    value: function _updateModalPosition() {
      // Customize modal element
      var modalElement = this._searchPanel.getItem().parentNode;

      var _document$documentElement$getBoundingClientRect = document.documentElement.getBoundingClientRect();

      var width = _document$documentElement$getBoundingClientRect.width;
      var height = _document$documentElement$getBoundingClientRect.height;

      var modalWidth = Math.min(MAX_MODAL_WIDTH, width);
      modalElement.style.setProperty('width', modalWidth + 'px');
      modalElement.style.setProperty('margin-left', -modalWidth / 2 + 'px');
    }
  }, {
    key: '_render',
    value: function _render() {
      var QuickSelectionComponent = getQuickSelectionComponentLazily();
      var React = getReactLazily();
      return React.render(React.createElement(QuickSelectionComponent, {
        provider: this._currentProvider
      }), this._reactDiv);
    }
  }, {
    key: 'toggleProvider',
    value: function toggleProvider(providerName) {
      analyticsSessionId = analyticsSessionId || Date.now().toString();
      track(AnalyticsEvents.CHANGE_TAB, {
        'quickopen-provider': providerName,
        'quickopen-session': analyticsSessionId
      });
      var provider = getSearchResultManager().getProvider(providerName);
      // "toggle" behavior
      if (this._searchPanel !== null && this._searchPanel.isVisible() && provider === this._currentProvider) {
        this.closeSearchPanel();
        return;
      }

      this._currentProvider = provider;
      if (this._searchComponent) {
        this._searchComponent = this._render();
      }
      this.showSearchPanel();
    }
  }, {
    key: 'showSearchPanel',
    value: function showSearchPanel() {
      this._previousFocus = document.activeElement;
      if (this._searchComponent && this._searchPanel) {
        // Start a new search "session" for analytics purposes.
        track(AnalyticsEvents.OPEN_PANEL, {
          'quickopen-session': analyticsSessionId
        });
        this._searchPanel.show();
        this._searchComponent.focus();
        this._searchComponent.selectInput();
      }
    }
  }, {
    key: 'closeSearchPanel',
    value: function closeSearchPanel() {
      if (this._searchComponent && this._searchPanel) {
        track(AnalyticsEvents.CLOSE_PANEL, {
          'quickopen-session': analyticsSessionId
        });
        this._searchPanel.hide();
        this._searchComponent.blur();
        analyticsSessionId = null;
      }

      if (this._previousFocus !== null) {
        this._previousFocus.focus();
        this._previousFocus = null;
      }
    }
  }]);

  return Activation;
})();

var _require2 = require('atom');

var CompositeDisposable = _require2.CompositeDisposable;

var activation = null;
var listeners = null;
var projectRoots = null;

function activateSearchUI() {
  if (!activation) {
    activation = new Activation();
  }
}

/**
 * @param projectPaths All the root directories in the Atom workspace.
 */
function initSearch(projectPaths) {
  var _require3 = require('nuclide-client');

  var getClient = _require3.getClient;

  var newProjectRoots = new Set();
  projectRoots.forEach(function (projectPath) {
    newProjectRoots.add(projectPath);
    if (projectRoots.has(projectPath)) {
      return;
    }
    var client = getClient(projectPath);
    if (client) {
      // It doesn't matter what the search term is. Empirically, doing an initial
      // search speeds up the next search much more than simply doing the setup
      // kicked off by 'fileSearchForDirectory'.
      client.searchDirectory(projectPath, 'a');
    }
  });
  projectRoots = newProjectRoots;
}

module.exports = {

  activate: function activate() {
    listeners = new CompositeDisposable();
    listeners.add(atom.commands.add('atom-workspace', {
      'nuclide-quick-open:toggle-omni-search': function nuclideQuickOpenToggleOmniSearch() {
        activateSearchUI();
        activation.toggleProvider('OmniSearchResultProvider');
      },
      'nuclide-quick-open:toggle-quick-open': function nuclideQuickOpenToggleQuickOpen() {
        activateSearchUI();
        activation.toggleProvider('FileListProvider');
      },
      'nuclide-quick-open:toggle-symbol-search': function nuclideQuickOpenToggleSymbolSearch() {
        activateSearchUI();
        activation.toggleProvider('SymbolListProvider');
      },
      'nuclide-quick-open:toggle-biggrep-search': function nuclideQuickOpenToggleBiggrepSearch() {
        activateSearchUI();
        activation.toggleProvider('BigGrepListProvider');
      },
      'nuclide-quick-open:toggle-openfilename-search': function nuclideQuickOpenToggleOpenfilenameSearch() {
        activateSearchUI();
        activation.toggleProvider('OpenFileListProvider');
      }
    }));

    // Do search preprocessing for all existing and future root directories.
    projectRoots = new Set();
    atom.project.getPaths(initSearch);
    listeners.add(atom.project.onDidChangePaths(initSearch));
  },

  deactivate: function deactivate() {
    if (activation) {
      activation = null;
    }
    if (listeners) {
      listeners.dispose();
      listeners = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,