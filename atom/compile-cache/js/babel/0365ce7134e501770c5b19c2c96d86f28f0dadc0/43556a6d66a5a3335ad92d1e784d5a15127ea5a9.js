Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _cssbeautify = require('cssbeautify');

var _cssbeautify2 = _interopRequireDefault(_cssbeautify);

var _csscomb = require('csscomb');

var _csscomb2 = _interopRequireDefault(_csscomb);

'use babel';

var directory = atom.project.getDirectories().shift();
var userConfigPath = directory ? directory.resolve('.csscomb.json') : '';
var atomConfigPath = _path2['default'].join(__dirname, './csscomb.json');

var config = {
  configureWithPreset: {
    title: 'Configure with preset',
    description: 'Configure with preset config.',
    type: 'string',
    'default': 'csscomb',
    'enum': ['csscomb', 'zen', 'yandex']
  },
  configureWithJSON: {
    title: 'Configure with JSON',
    description: 'Configure with JSON file in the current directory.',
    type: 'boolean',
    'default': false
  },
  executeOnSave: {
    title: 'Execute on save',
    description: 'Execute sorting CSS property on save.',
    type: 'boolean',
    'default': false
  },
  indentType: {
    title: 'Indent Type',
    type: 'string',
    'default': 'space',
    'enum': ['space', 'tab']
  },
  indentSize: {
    title: 'Indent Size',
    type: 'number',
    'default': 2
  }
};

exports.config = config;
var configureWithPreset = function configureWithPreset() {
  return atom.config.get('atom-csscomb.configureWithPreset');
};
var configureWithJSON = function configureWithJSON() {
  return atom.config.get('atom-csscomb.configureWithJSON');
};
var executeOnSave = function executeOnSave() {
  return atom.config.get('atom-csscomb.executeOnSave');
};
var indentType = function indentType() {
  return atom.config.get('atom-csscomb.indentType');
};
var indentSize = function indentSize() {
  return atom.config.get('atom-csscomb.indentSize');
};

var execute = function execute() {

  var editor = atom.workspace.getActiveTextEditor();

  if (!editor) {
    return;
  }

  var text = editor.getText();
  var selectedText = editor.getSelectedText();

  var configJSON = null;
  var presetType = configureWithPreset();

  if (configureWithJSON()) {
    if (_fs2['default'].existsSync(userConfigPath)) {
      configJSON = require(userConfigPath);
    } else if (_fs2['default'].existsSync(atomConfigPath)) {
      configJSON = require(atomConfigPath);
    }
  }

  if (!configJSON) {
    configJSON = _csscomb2['default'].getConfig(presetType);
  }

  var csscomb = new _csscomb2['default']();
  csscomb.configure(configJSON);

  var grammer = editor.getGrammar().name.toLowerCase();
  var syntax = grammer || 'css';

  var indent = '';
  switch (indentType()) {
    case 'space':
      indent = Array(indentSize() + 1).join(' ');
      break;
    case 'tab':
      indent = '\t';
      break;
  }

  if (selectedText.length !== 0) {
    try {
      selectedText = csscomb.processString(selectedText, {
        syntax: syntax
      });
      editor.setTextInBufferRange(editor.getSelectedBufferRange(), (0, _cssbeautify2['default'])(selectedText, {
        indent: indent
      }));
    } catch (e) {}
  } else {
    try {
      text = csscomb.processString(text, {
        syntax: syntax
      });
      editor.setText((0, _cssbeautify2['default'])(text, {
        indent: indent
      }));
    } catch (e) {}
  }
};

var editorObserver = null;

var activate = function activate(state) {
  atom.commands.add('atom-workspace', 'atom-csscomb:execute', function () {
    execute();
  });
  editorObserver = atom.workspace.observeTextEditors(function (editor) {
    editor.getBuffer().onWillSave(function () {
      if (executeOnSave()) {
        execute();
      }
    });
  });
};

exports.activate = activate;
var deactivate = function deactivate() {
  editorObserver.dispose();
};
exports.deactivate = deactivate;
//# sourceMappingURL=data:application/json;base64,