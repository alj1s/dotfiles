'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var React = require('react-for-atom');

var addons = React.addons;
var PropTypes = React.PropTypes;

/**
 * An input field rendered as an <atom-text-editor mini />.
 */
var AtomInput = React.createClass({
  displayName: 'AtomInput',

  propTypes: {
    disabled: React.PropTypes.bool,
    initialValue: React.PropTypes.string,
    placeholderText: React.PropTypes.string,
    onFocus: React.PropTypes.func,
    onClick: React.PropTypes.func,
    onBlur: React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      placeholderText: null,
      onClick: function onClick() {},
      onFocus: function onFocus() {},
      onBlur: function onBlur() {}
    };
  },

  getInitialState: function getInitialState() {
    return {
      value: this.props.initialValue || ''
    };
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._disposables = new CompositeDisposable();

    // There does not appear to be any sort of infinite loop where calling
    // setState({value}) in response to onDidChange() causes another change
    // event.
    var textEditor = this.getTextEditor();
    this._disposables.add(textEditor.onDidChange(function () {
      _this.setState({ value: textEditor.getText() });
    }));
    var placeholderText = this.props.placeholderText;
    if (placeholderText !== null) {
      textEditor.setPlaceholderText(placeholderText);
    }
    if (this.props.disabled) {
      this._updateDisabledState(true);
    }
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.disabled !== this.props.disabled) {
      this._updateDisabledState(nextProps.disabled);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    // Note that destroy() is not part of TextEditor's public API.
    this.getTextEditor().destroy();

    if (this._disposables) {
      this._disposables.dispose();
      this._disposables = null;
    }
  },

  _updateDisabledState: function _updateDisabledState(isDisabled) {
    // Hack to set TextEditor to read-only mode, per https://github.com/atom/atom/issues/6880
    if (isDisabled) {
      this._getTextEditorElement().removeAttribute('tabindex');
    } else {
      this._getTextEditorElement().setAttribute('tabindex', -1);
    }
  },

  render: function render() {
    return React.createElement(
      'atom-text-editor',
      {
        mini: true,
        ref: 'input',
        onClick: this.props.onClick,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur },
      this.state.value
    );
  },

  getText: function getText() {
    return this.state.value;
  },

  setText: function setText(text) {
    this.getTextEditor().setText(text);
  },

  getTextEditor: function getTextEditor() {
    return this._getTextEditorElement().getModel();
  },

  onDidChange: function onDidChange(callback) {
    return this.getTextEditor().onDidChange(callback);
  },

  _getTextEditorElement: function _getTextEditorElement() {
    return this.refs['input'].getDOMNode();
  },

  focus: function focus() {
    this.getTextEditor().moveToEndOfLine();
    this._getTextEditorElement().focus();
  }
});

module.exports = AtomInput;
//# sourceMappingURL=data:application/json;base64,