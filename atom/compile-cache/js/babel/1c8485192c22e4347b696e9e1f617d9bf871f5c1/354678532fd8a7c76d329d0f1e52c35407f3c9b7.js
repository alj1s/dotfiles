var atomUtils = require("../atomUtils");
var parent = require("../../../worker/parent");
var child_process_1 = require("child_process");
var path = require("path");
function register() {
    atom.commands.add("atom-workspace", "typescript:output-toggle", function (e) {
        if (!atomUtils.commandForTypeScript(e)) return;
        var query = atomUtils.getFilePath();
        var previousActivePane = atom.workspace.getActivePane();
        parent.getOutputJs(query).then(function (res) {
            if (!res.jsFilePath) {
                atom.notifications.addInfo("AtomTS: No emit for this file");
                return;
            } else {
                var uri = res.jsFilePath.split("/").join(path.sep);
                var previewPane = atom.workspace.paneForURI(uri);
                if (previewPane) {
                    previewPane.destroyItem(previewPane.itemForURI(uri));
                } else {
                    atom.workspace.open(res.jsFilePath, { split: "right" }).then(function () {
                        previousActivePane.activate();
                    });
                }
            }
        });
    });
    atom.commands.add("atom-workspace", "typescript:output-file-execute-in-node", function (e) {
        if (!atomUtils.commandForTypeScript(e)) return;
        var query = atomUtils.getFilePath();
        parent.getOutputJs(query).then(function (res) {
            if (!res.jsFilePath) {
                atom.notifications.addInfo("AtomTS: No emit for this file");
                return;
            } else {
                var command = "node " + res.jsFilePath;
                console.log(command);
                child_process_1.exec(command, function (err, stdout, stderr) {
                    console.log(stdout);
                    if (stderr.toString().trim().length) {
                        console.error(stderr);
                    }
                });
            }
        });
    });
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vY29tbWFuZHMvb3V0cHV0RmlsZUNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUMvQyxJQUFJLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDL0MsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLFNBQVMsUUFBUSxHQUFHO0FBQ2hCLFFBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLDBCQUEwQixFQUFFLFVBQVUsQ0FBQyxFQUFFO0FBQ3pFLFlBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEVBQ2xDLE9BQU87QUFDWCxZQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDcEMsWUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3hELGNBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQzFDLGdCQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtBQUNqQixvQkFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUM1RCx1QkFBTzthQUNWLE1BQ0k7QUFDRCxvQkFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuRCxvQkFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsb0JBQUksV0FBVyxFQUFFO0FBQ2IsK0JBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN4RCxNQUNJO0FBQ0Qsd0JBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNyRSwwQ0FBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztxQkFDakMsQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7U0FDSixDQUFDLENBQUM7S0FDTixDQUFDLENBQUM7QUFDSCxRQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSx3Q0FBd0MsRUFBRSxVQUFVLENBQUMsRUFBRTtBQUN2RixZQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUNsQyxPQUFPO0FBQ1gsWUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3BDLGNBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQzFDLGdCQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtBQUNqQixvQkFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUM1RCx1QkFBTzthQUNWLE1BQ0k7QUFDRCxvQkFBSSxPQUFPLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDdkMsdUJBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckIsK0JBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7QUFDekQsMkJBQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEIsd0JBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTtBQUNqQywrQkFBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDekI7aUJBQ0osQ0FBQyxDQUFDO2FBQ047U0FDSixDQUFDLENBQUM7S0FDTixDQUFDLENBQUM7Q0FDTjtBQUNELE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vY29tbWFuZHMvb3V0cHV0RmlsZUNvbW1hbmRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGF0b21VdGlscyA9IHJlcXVpcmUoXCIuLi9hdG9tVXRpbHNcIik7XG52YXIgcGFyZW50ID0gcmVxdWlyZShcIi4uLy4uLy4uL3dvcmtlci9wYXJlbnRcIik7XG52YXIgY2hpbGRfcHJvY2Vzc18xID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywgJ3R5cGVzY3JpcHQ6b3V0cHV0LXRvZ2dsZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghYXRvbVV0aWxzLmNvbW1hbmRGb3JUeXBlU2NyaXB0KGUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgcXVlcnkgPSBhdG9tVXRpbHMuZ2V0RmlsZVBhdGgoKTtcbiAgICAgICAgdmFyIHByZXZpb3VzQWN0aXZlUGFuZSA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKTtcbiAgICAgICAgcGFyZW50LmdldE91dHB1dEpzKHF1ZXJ5KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGlmICghcmVzLmpzRmlsZVBhdGgpIHtcbiAgICAgICAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbygnQXRvbVRTOiBObyBlbWl0IGZvciB0aGlzIGZpbGUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdXJpID0gcmVzLmpzRmlsZVBhdGguc3BsaXQoXCIvXCIpLmpvaW4ocGF0aC5zZXApO1xuICAgICAgICAgICAgICAgIHZhciBwcmV2aWV3UGFuZSA9IGF0b20ud29ya3NwYWNlLnBhbmVGb3JVUkkodXJpKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlld1BhbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld1BhbmUuZGVzdHJveUl0ZW0ocHJldmlld1BhbmUuaXRlbUZvclVSSSh1cmkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4ocmVzLmpzRmlsZVBhdGgsIHsgc3BsaXQ6IFwicmlnaHRcIiB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQWN0aXZlUGFuZS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsICd0eXBlc2NyaXB0Om91dHB1dC1maWxlLWV4ZWN1dGUtaW4tbm9kZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghYXRvbVV0aWxzLmNvbW1hbmRGb3JUeXBlU2NyaXB0KGUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgcXVlcnkgPSBhdG9tVXRpbHMuZ2V0RmlsZVBhdGgoKTtcbiAgICAgICAgcGFyZW50LmdldE91dHB1dEpzKHF1ZXJ5KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIGlmICghcmVzLmpzRmlsZVBhdGgpIHtcbiAgICAgICAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbygnQXRvbVRTOiBObyBlbWl0IGZvciB0aGlzIGZpbGUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY29tbWFuZCA9IFwibm9kZSBcIiArIHJlcy5qc0ZpbGVQYXRoO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIGNoaWxkX3Byb2Nlc3NfMS5leGVjKGNvbW1hbmQsIGZ1bmN0aW9uIChlcnIsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0ZG91dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGRlcnIudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHN0ZGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG4iXX0=