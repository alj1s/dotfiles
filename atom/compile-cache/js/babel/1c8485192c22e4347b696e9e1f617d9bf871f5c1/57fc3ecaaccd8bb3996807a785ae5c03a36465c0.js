/**
 * A functional form of the SelectListView
 * Only one of these bad boys is allowed on the screen at one time
 */
var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var singleton;
function simpleSelectionView(options) {
    if (!singleton) singleton = new SimpleSelectListView(options);else {
        singleton.options = options;
    }
    singleton.setItems();
    singleton.show();
    return singleton;
}
exports.simpleSelectionView = simpleSelectionView;
var sp = require("atom-space-pen-views");
var $ = sp.$;
var SimpleSelectListView = (function (_super) {
    __extends(SimpleSelectListView, _super);
    function SimpleSelectListView(options) {
        _super.call(this);
        this.options = options;
        this.panel = null;
    }
    Object.defineProperty(SimpleSelectListView.prototype, "$", {
        get: function get() {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    SimpleSelectListView.prototype.setItems = function () {
        _super.prototype.setItems.call(this, this.options.items);
    };
    SimpleSelectListView.prototype.viewForItem = function (item) {
        var view = this.options.viewForItem(item);
        if (typeof view === "string") {
            return "<li>\n                " + view + "\n            </li>";
        } else {
            return $("<li></li>").append(view);
        }
        ;
    };
    SimpleSelectListView.prototype.confirmed = function (item) {
        this.options.confirmed(item);
        this.hide();
    };
    SimpleSelectListView.prototype.getFilterKey = function () {
        return this.options.filterKey;
    };
    SimpleSelectListView.prototype.show = function () {
        this.storeFocusedElement();
        if (!this.panel) this.panel = atom.workspace.addModalPanel({ item: this });
        this.panel.show();
        this.focusFilterEditor();
    };
    SimpleSelectListView.prototype.hide = function () {
        this.panel.hide();
        this.restoreFocus();
    };
    SimpleSelectListView.prototype.cancelled = function () {
        this.hide();
    };
    return SimpleSelectListView;
})(sp.SelectListView);
exports.SimpleSelectListView = SimpleSelectListView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3Mvc2ltcGxlU2VsZWN0aW9uVmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsSUFBSSxTQUFTLEdBQUcsQUFBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDeEQsU0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsYUFBUyxFQUFFLEdBQUc7QUFBRSxZQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUFFO0FBQ3ZDLEtBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFBLEFBQUMsQ0FBQztDQUN4RixDQUFDO0FBQ0YsSUFBSSxTQUFTLENBQUM7QUFDZCxTQUFTLG1CQUFtQixDQUFDLE9BQU8sRUFBRTtBQUNsQyxRQUFJLENBQUMsU0FBUyxFQUNWLFNBQVMsR0FBRyxJQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQzdDO0FBQ0QsaUJBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0tBQy9CO0FBQ0QsYUFBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3JCLGFBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNqQixXQUFPLFNBQVMsQ0FBQztDQUNwQjtBQUNELE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztBQUNsRCxJQUFJLEVBQUUsR0FBRyxPQUFPLENB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bi9hdG9tL3ZpZXdzL3NpbXBsZVNlbGVjdGlvblZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgZnVuY3Rpb25hbCBmb3JtIG9mIHRoZSBTZWxlY3RMaXN0Vmlld1xuICogT25seSBvbmUgb2YgdGhlc2UgYmFkIGJveXMgaXMgYWxsb3dlZCBvbiB0aGUgc2NyZWVuIGF0IG9uZSB0aW1lXG4gKi9cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHNpbmdsZXRvbjtcbmZ1bmN0aW9uIHNpbXBsZVNlbGVjdGlvblZpZXcob3B0aW9ucykge1xuICAgIGlmICghc2luZ2xldG9uKVxuICAgICAgICBzaW5nbGV0b24gPSBuZXcgU2ltcGxlU2VsZWN0TGlzdFZpZXcob3B0aW9ucyk7XG4gICAgZWxzZSB7XG4gICAgICAgIHNpbmdsZXRvbi5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgc2luZ2xldG9uLnNldEl0ZW1zKCk7XG4gICAgc2luZ2xldG9uLnNob3coKTtcbiAgICByZXR1cm4gc2luZ2xldG9uO1xufVxuZXhwb3J0cy5zaW1wbGVTZWxlY3Rpb25WaWV3ID0gc2ltcGxlU2VsZWN0aW9uVmlldztcbnZhciBzcCA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG52YXIgJCA9IHNwLiQ7XG52YXIgU2ltcGxlU2VsZWN0TGlzdFZpZXcgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaW1wbGVTZWxlY3RMaXN0VmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTaW1wbGVTZWxlY3RMaXN0VmlldyhvcHRpb25zKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnBhbmVsID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNpbXBsZVNlbGVjdExpc3RWaWV3LnByb3RvdHlwZSwgXCIkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2ltcGxlU2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLnNldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnNldEl0ZW1zLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLml0ZW1zKTtcbiAgICB9O1xuICAgIFNpbXBsZVNlbGVjdExpc3RWaWV3LnByb3RvdHlwZS52aWV3Rm9ySXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy5vcHRpb25zLnZpZXdGb3JJdGVtKGl0ZW0pO1xuICAgICAgICBpZiAodHlwZW9mIHZpZXcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjxsaT5cXG4gICAgICAgICAgICAgICAgXCIgKyB2aWV3ICsgXCJcXG4gICAgICAgICAgICA8L2xpPlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICQoJzxsaT48L2xpPicpLmFwcGVuZCh2aWV3KTtcbiAgICAgICAgfVxuICAgICAgICA7XG4gICAgfTtcbiAgICBTaW1wbGVTZWxlY3RMaXN0Vmlldy5wcm90b3R5cGUuY29uZmlybWVkID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbmZpcm1lZChpdGVtKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICBTaW1wbGVTZWxlY3RMaXN0Vmlldy5wcm90b3R5cGUuZ2V0RmlsdGVyS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZpbHRlcktleTtcbiAgICB9O1xuICAgIFNpbXBsZVNlbGVjdExpc3RWaWV3LnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3JlRm9jdXNlZEVsZW1lbnQoKTtcbiAgICAgICAgaWYgKCF0aGlzLnBhbmVsKVxuICAgICAgICAgICAgdGhpcy5wYW5lbCA9IGF0b20ud29ya3NwYWNlLmFkZE1vZGFsUGFuZWwoeyBpdGVtOiB0aGlzIH0pO1xuICAgICAgICB0aGlzLnBhbmVsLnNob3coKTtcbiAgICAgICAgdGhpcy5mb2N1c0ZpbHRlckVkaXRvcigpO1xuICAgIH07XG4gICAgU2ltcGxlU2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFuZWwuaGlkZSgpO1xuICAgICAgICB0aGlzLnJlc3RvcmVGb2N1cygpO1xuICAgIH07XG4gICAgU2ltcGxlU2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLmNhbmNlbGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlU2VsZWN0TGlzdFZpZXc7XG59KShzcC5TZWxlY3RMaXN0Vmlldyk7XG5leHBvcnRzLlNpbXBsZVNlbGVjdExpc3RWaWV3ID0gU2ltcGxlU2VsZWN0TGlzdFZpZXc7XG4iXX0=