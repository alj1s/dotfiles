var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var atomUtils = require("../atomUtils");
function showForCurrentEditor() {
    var ed = atomUtils.getActiveEditor();
    showForEditor(ed);
}
exports.showForCurrentEditor = showForCurrentEditor;
function showForEditor(ed) {}
exports.showForEditor = showForEditor;
var view_1 = require("./view");
var FileSemanticView = (function (_super) {
    __extends(FileSemanticView, _super);
    function FileSemanticView(options) {
        _super.call(this, options);
    }
    FileSemanticView.prototype.init = function () {
        var _this = this;
        this.stopChangingListener = this.options.editor.onDidStopChanging(function () {});
        this.destroyListener = this.options.editor.onDidDestroy(function () {
            _this.destroyListener.dispose();
            _this.stopChangingListener.dispose();
        });
    };
    return FileSemanticView;
})(view_1.ScrollView);

// atom.notifications.addInfo('Semantic view coming soon');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvZmlsZVNlbWFudGljVmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBRyxBQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN4RCxTQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxhQUFTLEVBQUUsR0FBRztBQUFFLFlBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0tBQUU7QUFDdkMsS0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUEsQUFBQyxDQUFDO0NBQ3hGLENBQUM7QUFDRixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEMsU0FBUyxvQkFBb0IsR0FBRztBQUM1QixRQUFJLEVBQUUsR0FBRyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDckMsaUJBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNyQjtBQUNELE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztBQUNwRCxTQUFTLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFFMUI7QUFDRCxPQUFPLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztBQUN0QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQ3RDLGFBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNwQyxhQUFTLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtBQUMvQixjQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM5QjtBQUNELG9CQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUMxQyxZQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDakIsWUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFDN0UsQ0FBQyxDQUFDO0FBQ0gsWUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsWUFBWTtBQUNoRSxpQkFBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNoQyxpQkFBSyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3hDLENBQUMsQ0FBQztLQUNOLENBQUM7QUFDRixXQUFPLGdCQUFnQixDQUFDO0NBQzNCLENBQUEsQ0FBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vYXRvbS92aWV3cy9maWxlU2VtYW50aWNWaWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgYXRvbVV0aWxzID0gcmVxdWlyZShcIi4uL2F0b21VdGlsc1wiKTtcbmZ1bmN0aW9uIHNob3dGb3JDdXJyZW50RWRpdG9yKCkge1xuICAgIHZhciBlZCA9IGF0b21VdGlscy5nZXRBY3RpdmVFZGl0b3IoKTtcbiAgICBzaG93Rm9yRWRpdG9yKGVkKTtcbn1cbmV4cG9ydHMuc2hvd0ZvckN1cnJlbnRFZGl0b3IgPSBzaG93Rm9yQ3VycmVudEVkaXRvcjtcbmZ1bmN0aW9uIHNob3dGb3JFZGl0b3IoZWQpIHtcbiAgICAvLyBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbygnU2VtYW50aWMgdmlldyBjb21pbmcgc29vbicpO1xufVxuZXhwb3J0cy5zaG93Rm9yRWRpdG9yID0gc2hvd0ZvckVkaXRvcjtcbnZhciB2aWV3XzEgPSByZXF1aXJlKFwiLi92aWV3XCIpO1xudmFyIEZpbGVTZW1hbnRpY1ZpZXcgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaWxlU2VtYW50aWNWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbGVTZW1hbnRpY1ZpZXcob3B0aW9ucykge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgRmlsZVNlbWFudGljVmlldy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdG9wQ2hhbmdpbmdMaXN0ZW5lciA9IHRoaXMub3B0aW9ucy5lZGl0b3Iub25EaWRTdG9wQ2hhbmdpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZXN0cm95TGlzdGVuZXIgPSB0aGlzLm9wdGlvbnMuZWRpdG9yLm9uRGlkRGVzdHJveShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0cm95TGlzdGVuZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgX3RoaXMuc3RvcENoYW5naW5nTGlzdGVuZXIuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBGaWxlU2VtYW50aWNWaWV3O1xufSkodmlld18xLlNjcm9sbFZpZXcpO1xuIl19