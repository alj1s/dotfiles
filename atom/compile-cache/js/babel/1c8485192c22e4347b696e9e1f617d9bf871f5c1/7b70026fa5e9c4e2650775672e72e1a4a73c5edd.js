var ast = require("../astUtils");
var os_1 = require("os");
function getClassAndInterfaceName(error) {
    var errorText = ts.flattenDiagnosticMessageText(error.messageText, os_1.EOL);
    var match = errorText.match(/Class \'(\w+)\' incorrectly implements interface \'(\w+)\'./);
    if (!match || match.length !== 3) return;
    var className = match[1],
        interfaceName = match[2];
    return { className: className, interfaceName: interfaceName };
}
var ImplementInterface = (function () {
    function ImplementInterface() {
        this.key = ImplementInterface.name;
    }
    ImplementInterface.prototype.canProvideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == ts.Diagnostics.Class_0_incorrectly_implements_interface_1.code;
        })[0];
        if (!relevantError) return;
        if (info.positionNode.kind !== 66) return;
        var match = getClassAndInterfaceName(relevantError);
        if (!match) return;
        var className = match.className,
            interfaceName = match.interfaceName;
        return { display: "Implement members of " + interfaceName + " in " + className };
    };
    ImplementInterface.prototype.provideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == ts.Diagnostics.Class_0_incorrectly_implements_interface_1.code;
        })[0];
        if (!relevantError) return;
        if (info.positionNode.kind !== 66) return;
        var match = getClassAndInterfaceName(relevantError);
        var className = match.className,
            interfaceName = match.interfaceName;
        var interfaceTarget = ast.getNodeByKindAndName(info.program, 212, className);
        var classTarget = ast.getNodeByKindAndName(info.program, 211, className);
        var braces = classTarget.getChildren().filter(function (x) {
            return x.kind == 15;
        });
        var lastBrace = braces[braces.length - 1];
        var indentLength = info.service.getIndentationAtPosition(classTarget.getSourceFile().fileName, lastBrace.getStart(), info.project.projectFile.project.formatCodeOptions);
        var indent = Array(indentLength + info.project.projectFile.project.formatCodeOptions.IndentSize + 1).join(" ");
        var refactorings = [];
        return refactorings;
    };
    return ImplementInterface;
})();
exports.ImplementInterface = ImplementInterface;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL2ltcGxlbWVudEludGVyZmFjZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDakMsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLFNBQVMsd0JBQXdCLENBQUMsS0FBSyxFQUFFO0FBQ3JDLFFBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3RSxRQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7QUFDM0YsUUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDNUIsT0FBTztBQUNYLFFBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFBRSxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25ELFdBQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsQ0FBQztDQUNqRTtBQUNELElBQUksa0JBQWtCLEdBQUcsQ0FBQyxZQUFZO0FBQ2xDLGFBQVMsa0JBQWtCLEdBQUc7QUFDMUIsWUFBSSxDQUFDLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7S0FDdEM7QUFDRCxzQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQ3pELFlBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQUUsbUJBQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLDBDQUEwQyxDQUFDLElBQUksQ0FBQztTQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNySixZQUFJLENBQUMsYUFBYSxFQUNkLE9BQU87QUFDWCxZQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFDN0IsT0FBTztBQUNYLFlBQUksS0FBSyxHQUFHLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3BELFlBQUksQ0FBQyxLQUFLLEVBQ04sT0FBTztBQUNYLFlBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTO1lBQUUsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDckUsZUFBTyxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsR0FBRyxhQUFhLEdBQUcsTUFBTSxHQUFHLFNBQVMsRUFBRSxDQUFDO0tBQ3BGLENBQUM7QUFDRixzQkFBa0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQ3RELFlBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQUUsbUJBQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLDBDQUEwQyxDQUFDLElBQUksQ0FBQztTQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNySixZQUFJLENBQUMsYUFBYSxFQUNkLE9BQU87QUFDWCxZQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFDN0IsT0FBTztBQUNYLFlBQUksS0FBSyxHQUFHLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3BELFlBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTO1lBQUUsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDckUsWUFBSSxlQUFlLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzdFLFlBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN6RSxZQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQUUsbUJBQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7U0FBRSxDQUFDLENBQUM7QUFDckYsWUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUMsWUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN6SyxZQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9HLFlBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUN0QixlQUFPLFlBQVksQ0FBQztLQUN2QixDQUFDO0FBQ0YsV0FBTyxrQkFBa0IsQ0FBQztDQUM3QixDQUFBLEVBQUcsQ0FBQztBQUNMLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9sYW5nL2ZpeG15dHMvcXVpY2tGaXhlcy9pbXBsZW1lbnRJbnRlcmZhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXN0ID0gcmVxdWlyZShcIi4uL2FzdFV0aWxzXCIpO1xudmFyIG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG5mdW5jdGlvbiBnZXRDbGFzc0FuZEludGVyZmFjZU5hbWUoZXJyb3IpIHtcbiAgICB2YXIgZXJyb3JUZXh0ID0gdHMuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dChlcnJvci5tZXNzYWdlVGV4dCwgb3NfMS5FT0wpO1xuICAgIHZhciBtYXRjaCA9IGVycm9yVGV4dC5tYXRjaCgvQ2xhc3MgXFwnKFxcdyspXFwnIGluY29ycmVjdGx5IGltcGxlbWVudHMgaW50ZXJmYWNlIFxcJyhcXHcrKVxcJy4vKTtcbiAgICBpZiAoIW1hdGNoIHx8IG1hdGNoLmxlbmd0aCAhPT0gMylcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBjbGFzc05hbWUgPSBtYXRjaFsxXSwgaW50ZXJmYWNlTmFtZSA9IG1hdGNoWzJdO1xuICAgIHJldHVybiB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCBpbnRlcmZhY2VOYW1lOiBpbnRlcmZhY2VOYW1lIH07XG59XG52YXIgSW1wbGVtZW50SW50ZXJmYWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbXBsZW1lbnRJbnRlcmZhY2UoKSB7XG4gICAgICAgIHRoaXMua2V5ID0gSW1wbGVtZW50SW50ZXJmYWNlLm5hbWU7XG4gICAgfVxuICAgIEltcGxlbWVudEludGVyZmFjZS5wcm90b3R5cGUuY2FuUHJvdmlkZUZpeCA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIHZhciByZWxldmFudEVycm9yID0gaW5mby5wb3NpdGlvbkVycm9ycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguY29kZSA9PSB0cy5EaWFnbm9zdGljcy5DbGFzc18wX2luY29ycmVjdGx5X2ltcGxlbWVudHNfaW50ZXJmYWNlXzEuY29kZTsgfSlbMF07XG4gICAgICAgIGlmICghcmVsZXZhbnRFcnJvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGluZm8ucG9zaXRpb25Ob2RlLmtpbmQgIT09IDY2KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbWF0Y2ggPSBnZXRDbGFzc0FuZEludGVyZmFjZU5hbWUocmVsZXZhbnRFcnJvcik7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBtYXRjaC5jbGFzc05hbWUsIGludGVyZmFjZU5hbWUgPSBtYXRjaC5pbnRlcmZhY2VOYW1lO1xuICAgICAgICByZXR1cm4geyBkaXNwbGF5OiBcIkltcGxlbWVudCBtZW1iZXJzIG9mIFwiICsgaW50ZXJmYWNlTmFtZSArIFwiIGluIFwiICsgY2xhc3NOYW1lIH07XG4gICAgfTtcbiAgICBJbXBsZW1lbnRJbnRlcmZhY2UucHJvdG90eXBlLnByb3ZpZGVGaXggPSBmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICB2YXIgcmVsZXZhbnRFcnJvciA9IGluZm8ucG9zaXRpb25FcnJvcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmNvZGUgPT0gdHMuRGlhZ25vc3RpY3MuQ2xhc3NfMF9pbmNvcnJlY3RseV9pbXBsZW1lbnRzX2ludGVyZmFjZV8xLmNvZGU7IH0pWzBdO1xuICAgICAgICBpZiAoIXJlbGV2YW50RXJyb3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpbmZvLnBvc2l0aW9uTm9kZS5raW5kICE9PSA2NilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIG1hdGNoID0gZ2V0Q2xhc3NBbmRJbnRlcmZhY2VOYW1lKHJlbGV2YW50RXJyb3IpO1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gbWF0Y2guY2xhc3NOYW1lLCBpbnRlcmZhY2VOYW1lID0gbWF0Y2guaW50ZXJmYWNlTmFtZTtcbiAgICAgICAgdmFyIGludGVyZmFjZVRhcmdldCA9IGFzdC5nZXROb2RlQnlLaW5kQW5kTmFtZShpbmZvLnByb2dyYW0sIDIxMiwgY2xhc3NOYW1lKTtcbiAgICAgICAgdmFyIGNsYXNzVGFyZ2V0ID0gYXN0LmdldE5vZGVCeUtpbmRBbmROYW1lKGluZm8ucHJvZ3JhbSwgMjExLCBjbGFzc05hbWUpO1xuICAgICAgICB2YXIgYnJhY2VzID0gY2xhc3NUYXJnZXQuZ2V0Q2hpbGRyZW4oKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgua2luZCA9PSAxNTsgfSk7XG4gICAgICAgIHZhciBsYXN0QnJhY2UgPSBicmFjZXNbYnJhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgaW5kZW50TGVuZ3RoID0gaW5mby5zZXJ2aWNlLmdldEluZGVudGF0aW9uQXRQb3NpdGlvbihjbGFzc1RhcmdldC5nZXRTb3VyY2VGaWxlKCkuZmlsZU5hbWUsIGxhc3RCcmFjZS5nZXRTdGFydCgpLCBpbmZvLnByb2plY3QucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucyk7XG4gICAgICAgIHZhciBpbmRlbnQgPSBBcnJheShpbmRlbnRMZW5ndGggKyBpbmZvLnByb2plY3QucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucy5JbmRlbnRTaXplICsgMSkuam9pbignICcpO1xuICAgICAgICB2YXIgcmVmYWN0b3JpbmdzID0gW107XG4gICAgICAgIHJldHVybiByZWZhY3RvcmluZ3M7XG4gICAgfTtcbiAgICByZXR1cm4gSW1wbGVtZW50SW50ZXJmYWNlO1xufSkoKTtcbmV4cG9ydHMuSW1wbGVtZW50SW50ZXJmYWNlID0gSW1wbGVtZW50SW50ZXJmYWNlO1xuIl19