var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp = require("atom-space-pen-views");
var atomUtils = require("../atomUtils");
var parent = require("../../../worker/parent");
var d3 = require("d3");
var path_1 = require("path");
var fsUtil_1 = require("../../utils/fsUtil");
var os = require("os");
exports.dependencyURI = "ts-dependency:";
var DependencyView = (function (_super) {
    __extends(DependencyView, _super);
    function DependencyView(filePath) {
        var _this = this;
        _super.call(this);
        this.filePath = filePath;
        this.getURI = function () {
            return atomUtils.uriForPath(exports.dependencyURI, _this.filePath);
        };
        this.getTitle = function () {
            return "TypeScript Dependencies";
        };
        this.getIconName = function () {
            return "git-compare";
        };
        this.init();
    }
    DependencyView.content = function () {
        return this.div({ "class": "dependency-view" }, function () {});
    };
    Object.defineProperty(DependencyView.prototype, "$", {
        get: function get() {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    DependencyView.prototype.init = function () {
        var _this = this;
        parent.getDependencies({ filePath: this.filePath }).then(function (res) {
            renderGraph(res.links, _this.$, function (node) {});
        });
    };
    return DependencyView;
})(sp.ScrollView);
exports.DependencyView = DependencyView;
var prefixes = {
    circle: "circle"
};
function renderGraph(dependencies, mainContent, display) {
    var rootElement = mainContent[0];
    var d3Root = d3.select(rootElement);
    rootElement.innerHTML = "\n    <div class=\"graph\">\n      <div class=\"control-zoom\">\n          <a class=\"control-zoom-in\" href=\"#\" title=\"Zoom in\"></a>\n          <a class=\"control-zoom-out\" href=\"#\" title=\"Zoom out\"></a>\n        </div>\n    <div class=\"filter-section\">\n        <label>Filter: (enter to commit)</label>\n        <input id=\"filter\" class=\"native-key-bindings\"></input>\n    </div>\n    <div class='copy-message'>\n        <button class='btn btn-xs'>Copy Messages</button>\n    </div>\n    <div class=\"general-messages\"></div>\n    </div>";
    var messagesElement = mainContent.find(".general-messages");
    messagesElement.text("No Issues Found!");
    var filterElement = mainContent.find("#filter");
    filterElement.keyup(function (event) {
        if (event.keyCode !== 13) {
            return;
        }
        var val = filterElement.val().trim();
        if (!val) {
            nodes.classed("filtered-out", false);
            links.classed("filtered-out", false);
            text.classed("filtered-out", false);
            return;
        } else {
            nodes.classed("filtered-out", true);
            links.classed("filtered-out", true);
            text.classed("filtered-out", true);
            var filteredNodes = graph.selectAll("circle[data-name*=" + htmlName({ name: val }) + "]");
            filteredNodes.classed("filtered-out", false);
            var filteredLinks = graph.selectAll("[data-source*=" + htmlName({ name: val }) + "][data-target*=" + htmlName({ name: val }) + "]");
            filteredLinks.classed("filtered-out", false);
            var filteredText = graph.selectAll("text[data-name*=" + htmlName({ name: val }) + "]");
            filteredText.classed("filtered-out", false);
        }
    });
    var copyDisplay = mainContent.find(".copy-message>button");
    var d3NodeLookup = {};
    var d3links = dependencies.map(function (link) {
        var source = d3NodeLookup[link.sourcePath] || (d3NodeLookup[link.sourcePath] = { name: link.sourcePath });
        var target = d3NodeLookup[link.targetPath] || (d3NodeLookup[link.targetPath] = { name: link.targetPath });
        return { source: source, target: target };
    });
    var d3Graph = new D3Graph(d3links);
    if (d3Graph.cycles().length) {
        var cycles = d3Graph.cycles();
        var message = "";
        var textContent = "";
        for (var _i = 0; _i < cycles.length; _i++) {
            var cycle = cycles[_i];
            message += "<h3>Cycle Found: </h3>";
            message += cycle.join(" <br/> ") + "<br/>";
            textContent += "---Cycle Found---" + os.EOL;
            textContent += cycle.join(os.EOL) + os.EOL;
        }
        messagesElement.html(message);
        copyDisplay.show().on("click", function () {
            atom.clipboard.write(textContent);
            atom.notifications.addInfo("Copied!");
        });
    } else {
        copyDisplay.hide();
        messagesElement.hide();
    }
    Object.keys(d3NodeLookup).forEach(function (name) {
        var node = d3NodeLookup[name];
        node.weight = d3Graph.avgDeg(node);
    });
    var zoom = d3.behavior.zoom();
    zoom.scale(0.4);
    zoom.on("zoom", onZoomChanged);
    var graph = d3Root.append("svg").attr("width", "100%").attr("height", "99%").call(zoom).append("svg:g");
    var layout = d3.layout.force().nodes(d3.values(d3NodeLookup)).links(d3links).gravity(.05).linkDistance(function (link) {
        return d3Graph.difference(link) * 200;
    }).charge(-900).on("tick", tick).start();
    var drag = layout.drag().on("dragstart", dragstart);
    resize();
    d3.select(window).on("resize", resize);
    centerGraph();
    var graphWidth, graphHeight;
    function resize() {
        graphWidth = mainContent.width();
        graphHeight = mainContent.height();
        graph.attr("width", graphWidth).attr("height", graphHeight);
        layout.size([graphWidth, graphHeight]).resume();
    }
    function centerGraph() {
        var centerTranslate = [graphWidth / 4, graphHeight / 4];
        zoom.translate(centerTranslate);
        graph.transition().duration(500).attr("transform", "translate(" + zoom.translate() + ")" + " scale(" + zoom.scale() + ")");
    }
    function onZoomChanged() {
        graph.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")");
    }
    graph.append("defs").selectAll("marker").data(["regular"]).enter().append("marker").attr("id", function (d) {
        return d;
    }).attr("viewBox", "0 -5 10 10").attr("refX", 15).attr("refY", -1.5).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M0,-5L10,0L0,5");
    var links = graph.append("g").selectAll("path").data(layout.links()).enter().append("path").attr("class", function (d) {
        return "link";
    }).attr("data-target", function (o) {
        return htmlName(o.target);
    }).attr("data-source", function (o) {
        return htmlName(o.source);
    }).attr("marker-end", function (d) {
        return "url(#regular)";
    });
    var nodes = graph.append("g").selectAll("circle").data(layout.nodes()).enter().append("circle").attr("class", function (d) {
        return formatClassName(prefixes.circle, d);
    }).attr("data-name", function (o) {
        return htmlName(o);
    }).attr("r", function (d) {
        return Math.max(d.weight, 3);
    }).classed("inonly", function (d) {
        return d3Graph.inOnly(d);
    }).classed("outonly", function (d) {
        return d3Graph.outOnly(d);
    }).classed("circular", function (d) {
        return d3Graph.isCircular(d);
    }).call(drag).on("dblclick", dblclick).on("mouseover", function (d) {
        onNodeMouseOver(d);
    }).on("mouseout", function (d) {
        onNodeMouseOut(d);
    });
    var text = graph.append("g").selectAll("text").data(layout.nodes()).enter().append("text").attr("x", 8).attr("y", ".31em").attr("data-name", function (o) {
        return htmlName(o);
    }).text(function (d) {
        return d.name;
    });
    function tick() {
        links.attr("d", linkArc);
        nodes.attr("transform", transform);
        text.attr("transform", transform);
    }
    function transform(d) {
        return "translate(" + d.x + "," + d.y + ")";
    }
    function onNodeMouseOver(d) {
        var elm = findElementByNode(prefixes.circle, d);
        elm.classed("hovering", true);
        updateNodeTransparencies(d, true);
    }
    function onNodeMouseOut(d) {
        var elm = findElementByNode(prefixes.circle, d);
        elm.classed("hovering", false);
        updateNodeTransparencies(d, false);
    }
    function findElementByNode(prefix, node) {
        var selector = "." + formatClassName(prefix, node);
        return graph.select(selector);
    }
    function updateNodeTransparencies(d, fade) {
        if (fade === void 0) {
            fade = true;
        }
        nodes.classed("not-hovering", false);
        nodes.classed("dimmed", false);
        if (fade) {
            nodes.each(function (o) {
                if (!d3Graph.isConnected(d, o)) {
                    this.classList.add("not-hovering");
                    this.classList.add("dimmed");
                }
            });
        }
        graph.selectAll("path.link").attr("data-show", "").classed("outgoing", false).attr("marker-end", fade ? "" : "url(#regular)").classed("incomming", false).classed("dimmed", fade);
        links.each(function (o) {
            if (o.source.name === d.name) {
                this.classList.remove("dimmed");
                var elmNodes = graph.selectAll("." + formatClassName(prefixes.circle, o.target));
                elmNodes.attr("fill-opacity", 1);
                elmNodes.attr("stroke-opacity", 1);
                elmNodes.classed("dimmed", false);
                var outgoingLink = graph.selectAll("path.link[data-source=" + htmlName(o.source) + "]");
                outgoingLink.attr("data-show", "true");
                outgoingLink.attr("marker-end", "url(#regular)");
                outgoingLink.classed("outgoing", true);
            } else if (o.target.name === d.name) {
                this.classList.remove("dimmed");
                var incommingLink = graph.selectAll("path.link[data-target=" + htmlName(o.target) + "]");
                incommingLink.attr("data-show", "true");
                incommingLink.attr("marker-end", "url(#regular)");
                incommingLink.classed("incomming", true);
            }
        });
        text.classed("dimmed", function (o) {
            if (!fade) return false;
            if (d3Graph.isConnected(d, o)) return false;
            return true;
        });
    }
    function formatClassName(prefix, object) {
        return prefix + "-" + htmlName(object);
    }
    function htmlName(object) {
        return object.name.replace(/(\.|\/)/gi, "-");
    }
    function dragstart(d) {
        d.fixed = true;
        d3.event.sourceEvent.stopPropagation();
        d3.select(this).classed("fixed", true);
    }
    function dblclick(d) {
        d3.select(this).classed("fixed", d.fixed = false);
    }
}
var D3Graph = (function () {
    function D3Graph(links) {
        var _this = this;
        this.links = links;
        this.inDegLookup = {};
        this.outDegLookup = {};
        this.linkedByName = {};
        this.targetsBySourceName = {};
        this.circularPaths = [];
        links.forEach(function (l) {
            if (!_this.inDegLookup[l.target.name]) _this.inDegLookup[l.target.name] = 2;else _this.inDegLookup[l.target.name]++;
            if (!_this.outDegLookup[l.source.name]) _this.outDegLookup[l.source.name] = 2;else _this.outDegLookup[l.source.name]++;
            _this.linkedByName[l.source.name + "," + l.target.name] = 1;
            if (!_this.targetsBySourceName[l.source.name]) _this.targetsBySourceName[l.source.name] = [];
            _this.targetsBySourceName[l.source.name].push(l.target);
        });
        this.findCircular();
    }
    D3Graph.prototype.inDeg = function (node) {
        return this.inDegLookup[node.name] ? this.inDegLookup[node.name] : 1;
    };
    D3Graph.prototype.outDeg = function (node) {
        return this.outDegLookup[node.name] ? this.outDegLookup[node.name] : 1;
    };
    D3Graph.prototype.avgDeg = function (node) {
        return (this.inDeg(node) + this.outDeg(node)) / 2;
    };
    D3Graph.prototype.isConnected = function (a, b) {
        return this.linkedByName[a.name + "," + b.name] || this.linkedByName[b.name + "," + a.name] || a.name == b.name;
    };
    D3Graph.prototype.difference = function (link) {
        return fsUtil_1.consistentPath(path_1.relative(link.source.name, link.target.name)).split("/").length;
    };
    D3Graph.prototype.inOnly = function (node) {
        return !this.outDegLookup[node.name] && this.inDegLookup[node.name];
    };
    D3Graph.prototype.outOnly = function (node) {
        return !this.inDegLookup[node.name] && this.outDegLookup[node.name];
    };
    D3Graph.prototype.getPath = function (parent, unresolved) {
        var parentVisited = false;
        return Object.keys(unresolved).filter(function (module) {
            if (module === parent.name) {
                parentVisited = true;
            }
            return parentVisited && unresolved[module];
        });
    };
    D3Graph.prototype.resolver = function (sourceName, resolved, unresolved) {
        var _this = this;
        unresolved[sourceName] = true;
        if (this.targetsBySourceName[sourceName]) {
            this.targetsBySourceName[sourceName].forEach(function (dependency) {
                if (!resolved[dependency.name]) {
                    if (unresolved[dependency.name]) {
                        _this.circularPaths.push(_this.getPath(dependency, unresolved));
                        return;
                    }
                    _this.resolver(dependency.name, resolved, unresolved);
                }
            });
        }
        resolved[sourceName] = true;
        unresolved[sourceName] = false;
    };
    D3Graph.prototype.findCircular = function () {
        var _this = this;
        var resolved = {},
            unresolved = {};
        Object.keys(this.targetsBySourceName).forEach(function (sourceName) {
            _this.resolver(sourceName, resolved, unresolved);
        });
    };
    ;
    D3Graph.prototype.isCircular = function (node) {
        var cyclic = false;
        this.circularPaths.some(function (path) {
            if (path.indexOf(node.name) >= 0) {
                cyclic = true;
                return true;
            }
            return false;
        });
        return cyclic;
    };
    D3Graph.prototype.cycles = function () {
        return this.circularPaths;
    };
    return D3Graph;
})();
function linkArc(d) {
    var targetX = d.target.x;
    var targetY = d.target.y;
    var sourceX = d.source.x;
    var sourceY = d.source.y;
    var theta = Math.atan((targetX - sourceX) / (targetY - sourceY));
    var phi = Math.atan((targetY - sourceY) / (targetX - sourceX));
    var sinTheta = d.source.weight / 2 * Math.sin(theta);
    var cosTheta = d.source.weight / 2 * Math.cos(theta);
    var sinPhi = (d.target.weight - 6) * Math.sin(phi);
    var cosPhi = (d.target.weight - 6) * Math.cos(phi);
    if (d.target.y > d.source.y) {
        sourceX = sourceX + sinTheta;
        sourceY = sourceY + cosTheta;
    } else {
        sourceX = sourceX - sinTheta;
        sourceY = sourceY - cosTheta;
    }
    if (d.source.x > d.target.x) {
        targetX = targetX + cosPhi;
        targetY = targetY + sinPhi;
    } else {
        targetX = targetX - cosPhi;
        targetY = targetY - sinPhi;
    }
    var dx = targetX - sourceX,
        dy = targetY - sourceY,
        dr = Math.sqrt(dx * dx + dy * dy);
    return "M" + sourceX + "," + sourceY + "A" + dr + "," + dr + " 0 0,1 " + targetX + "," + targetY;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvZGVwZW5kZW5jeVZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsQUFBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDeEQsU0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsYUFBUyxFQUFFLEdBQUc7QUFBRSxZQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUFFO0FBQ3ZDLEtBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFBLEFBQUMsQ0FBQztDQUN4RixDQUFDO0FBQ0YsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDekMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3hDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQy9DLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDN0MsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZC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LENBQUM7QUFDM0IsZUFBTyxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUM7S0FDOUI7QUFDRCxRQUFJLEVBQUUsR0FBRyxPQUFPLEdBQUcsT0FBTztRQUFFLEVBQUUsR0FBRyxPQUFPLEdBQUcsT0FBTztRQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQ3RGLFdBQU8sR0FBRyxHQUFHLE9BQU8sR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsT0FBTyxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUM7Q0FDcEciLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vYXRvbS92aWV3cy9kZXBlbmRlbmN5Vmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHNwID0gcmVxdWlyZSgnYXRvbS1zcGFjZS1wZW4tdmlld3MnKTtcbnZhciBhdG9tVXRpbHMgPSByZXF1aXJlKFwiLi4vYXRvbVV0aWxzXCIpO1xudmFyIHBhcmVudCA9IHJlcXVpcmUoXCIuLi8uLi8uLi93b3JrZXIvcGFyZW50XCIpO1xudmFyIGQzID0gcmVxdWlyZShcImQzXCIpO1xudmFyIHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xudmFyIGZzVXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2ZzVXRpbFwiKTtcbnZhciBvcyA9IHJlcXVpcmUoXCJvc1wiKTtcbmV4cG9ydHMuZGVwZW5kZW5jeVVSSSA9IFwidHMtZGVwZW5kZW5jeTpcIjtcbnZhciBEZXBlbmRlbmN5VmlldyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERlcGVuZGVuY3lWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERlcGVuZGVuY3lWaWV3KGZpbGVQYXRoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgICAgIHRoaXMuZ2V0VVJJID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gYXRvbVV0aWxzLnVyaUZvclBhdGgoZXhwb3J0cy5kZXBlbmRlbmN5VVJJLCBfdGhpcy5maWxlUGF0aCk7IH07XG4gICAgICAgIHRoaXMuZ2V0VGl0bGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnVHlwZVNjcmlwdCBEZXBlbmRlbmNpZXMnOyB9O1xuICAgICAgICB0aGlzLmdldEljb25OYW1lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2dpdC1jb21wYXJlJzsgfTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIERlcGVuZGVuY3lWaWV3LmNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpdih7IGNsYXNzOiAnZGVwZW5kZW5jeS12aWV3JyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlcGVuZGVuY3lWaWV3LnByb3RvdHlwZSwgXCIkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRGVwZW5kZW5jeVZpZXcucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHBhcmVudC5nZXREZXBlbmRlbmNpZXMoeyBmaWxlUGF0aDogdGhpcy5maWxlUGF0aCB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIHJlbmRlckdyYXBoKHJlcy5saW5rcywgX3RoaXMuJCwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEZXBlbmRlbmN5Vmlldztcbn0pKHNwLlNjcm9sbFZpZXcpO1xuZXhwb3J0cy5EZXBlbmRlbmN5VmlldyA9IERlcGVuZGVuY3lWaWV3O1xudmFyIHByZWZpeGVzID0ge1xuICAgIGNpcmNsZTogJ2NpcmNsZSdcbn07XG5mdW5jdGlvbiByZW5kZXJHcmFwaChkZXBlbmRlbmNpZXMsIG1haW5Db250ZW50LCBkaXNwbGF5KSB7XG4gICAgdmFyIHJvb3RFbGVtZW50ID0gbWFpbkNvbnRlbnRbMF07XG4gICAgdmFyIGQzUm9vdCA9IGQzLnNlbGVjdChyb290RWxlbWVudCk7XG4gICAgcm9vdEVsZW1lbnQuaW5uZXJIVE1MID0gXCJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3JhcGhcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtem9vbVxcXCI+XFxuICAgICAgICAgIDxhIGNsYXNzPVxcXCJjb250cm9sLXpvb20taW5cXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCJab29tIGluXFxcIj48L2E+XFxuICAgICAgICAgIDxhIGNsYXNzPVxcXCJjb250cm9sLXpvb20tb3V0XFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiWm9vbSBvdXRcXFwiPjwvYT5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmaWx0ZXItc2VjdGlvblxcXCI+XFxuICAgICAgICA8bGFiZWw+RmlsdGVyOiAoZW50ZXIgdG8gY29tbWl0KTwvbGFiZWw+XFxuICAgICAgICA8aW5wdXQgaWQ9XFxcImZpbHRlclxcXCIgY2xhc3M9XFxcIm5hdGl2ZS1rZXktYmluZGluZ3NcXFwiPjwvaW5wdXQ+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPSdjb3B5LW1lc3NhZ2UnPlxcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi14cyc+Q29weSBNZXNzYWdlczwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZ2VuZXJhbC1tZXNzYWdlc1xcXCI+PC9kaXY+XFxuICAgIDwvZGl2PlwiO1xuICAgIHZhciBtZXNzYWdlc0VsZW1lbnQgPSBtYWluQ29udGVudC5maW5kKCcuZ2VuZXJhbC1tZXNzYWdlcycpO1xuICAgIG1lc3NhZ2VzRWxlbWVudC50ZXh0KFwiTm8gSXNzdWVzIEZvdW5kIVwiKTtcbiAgICB2YXIgZmlsdGVyRWxlbWVudCA9IG1haW5Db250ZW50LmZpbmQoJyNmaWx0ZXInKTtcbiAgICBmaWx0ZXJFbGVtZW50LmtleXVwKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSAhPT0gMTMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsID0gZmlsdGVyRWxlbWVudC52YWwoKS50cmltKCk7XG4gICAgICAgIGlmICghdmFsKSB7XG4gICAgICAgICAgICBub2Rlcy5jbGFzc2VkKCdmaWx0ZXJlZC1vdXQnLCBmYWxzZSk7XG4gICAgICAgICAgICBsaW5rcy5jbGFzc2VkKCdmaWx0ZXJlZC1vdXQnLCBmYWxzZSk7XG4gICAgICAgICAgICB0ZXh0LmNsYXNzZWQoJ2ZpbHRlcmVkLW91dCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVzLmNsYXNzZWQoJ2ZpbHRlcmVkLW91dCcsIHRydWUpO1xuICAgICAgICAgICAgbGlua3MuY2xhc3NlZCgnZmlsdGVyZWQtb3V0JywgdHJ1ZSk7XG4gICAgICAgICAgICB0ZXh0LmNsYXNzZWQoJ2ZpbHRlcmVkLW91dCcsIHRydWUpO1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkTm9kZXMgPSBncmFwaC5zZWxlY3RBbGwoXCJjaXJjbGVbZGF0YS1uYW1lKj1cIiArIGh0bWxOYW1lKHsgbmFtZTogdmFsIH0pICsgXCJdXCIpO1xuICAgICAgICAgICAgZmlsdGVyZWROb2Rlcy5jbGFzc2VkKCdmaWx0ZXJlZC1vdXQnLCBmYWxzZSk7XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRMaW5rcyA9IGdyYXBoLnNlbGVjdEFsbChcIltkYXRhLXNvdXJjZSo9XCIgKyBodG1sTmFtZSh7IG5hbWU6IHZhbCB9KSArIFwiXVtkYXRhLXRhcmdldCo9XCIgKyBodG1sTmFtZSh7IG5hbWU6IHZhbCB9KSArIFwiXVwiKTtcbiAgICAgICAgICAgIGZpbHRlcmVkTGlua3MuY2xhc3NlZCgnZmlsdGVyZWQtb3V0JywgZmFsc2UpO1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkVGV4dCA9IGdyYXBoLnNlbGVjdEFsbChcInRleHRbZGF0YS1uYW1lKj1cIiArIGh0bWxOYW1lKHsgbmFtZTogdmFsIH0pICsgXCJdXCIpO1xuICAgICAgICAgICAgZmlsdGVyZWRUZXh0LmNsYXNzZWQoJ2ZpbHRlcmVkLW91dCcsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBjb3B5RGlzcGxheSA9IG1haW5Db250ZW50LmZpbmQoJy5jb3B5LW1lc3NhZ2U+YnV0dG9uJyk7XG4gICAgdmFyIGQzTm9kZUxvb2t1cCA9IHt9O1xuICAgIHZhciBkM2xpbmtzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAobGluaykge1xuICAgICAgICB2YXIgc291cmNlID0gZDNOb2RlTG9va3VwW2xpbmsuc291cmNlUGF0aF0gfHwgKGQzTm9kZUxvb2t1cFtsaW5rLnNvdXJjZVBhdGhdID0geyBuYW1lOiBsaW5rLnNvdXJjZVBhdGggfSk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBkM05vZGVMb29rdXBbbGluay50YXJnZXRQYXRoXSB8fCAoZDNOb2RlTG9va3VwW2xpbmsudGFyZ2V0UGF0aF0gPSB7IG5hbWU6IGxpbmsudGFyZ2V0UGF0aCB9KTtcbiAgICAgICAgcmV0dXJuIHsgc291cmNlOiBzb3VyY2UsIHRhcmdldDogdGFyZ2V0IH07XG4gICAgfSk7XG4gICAgdmFyIGQzR3JhcGggPSBuZXcgRDNHcmFwaChkM2xpbmtzKTtcbiAgICBpZiAoZDNHcmFwaC5jeWNsZXMoKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGN5Y2xlcyA9IGQzR3JhcGguY3ljbGVzKCk7XG4gICAgICAgIHZhciBtZXNzYWdlID0gJyc7XG4gICAgICAgIHZhciB0ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgY3ljbGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGN5Y2xlID0gY3ljbGVzW19pXTtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gJzxoMz5DeWNsZSBGb3VuZDogPC9oMz4nO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBjeWNsZS5qb2luKCcgPGJyLz4gJykgKyAnPGJyLz4nO1xuICAgICAgICAgICAgdGV4dENvbnRlbnQgKz0gJy0tLUN5Y2xlIEZvdW5kLS0tJyArIG9zLkVPTDtcbiAgICAgICAgICAgIHRleHRDb250ZW50ICs9IGN5Y2xlLmpvaW4ob3MuRU9MKSArIG9zLkVPTDtcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlc0VsZW1lbnQuaHRtbChtZXNzYWdlKTtcbiAgICAgICAgY29weURpc3BsYXkuc2hvdygpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGF0b20uY2xpcGJvYXJkLndyaXRlKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRJbmZvKCdDb3BpZWQhJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29weURpc3BsYXkuaGlkZSgpO1xuICAgICAgICBtZXNzYWdlc0VsZW1lbnQuaGlkZSgpO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhkM05vZGVMb29rdXApLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBkM05vZGVMb29rdXBbbmFtZV07XG4gICAgICAgIG5vZGUud2VpZ2h0ID0gZDNHcmFwaC5hdmdEZWcobm9kZSk7XG4gICAgfSk7XG4gICAgdmFyIHpvb20gPSBkMy5iZWhhdmlvci56b29tKCk7XG4gICAgem9vbS5zY2FsZSgwLjQpO1xuICAgIHpvb20ub24oXCJ6b29tXCIsIG9uWm9vbUNoYW5nZWQpO1xuICAgIHZhciBncmFwaCA9IGQzUm9vdC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgJzEwMCUnKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgJzk5JScpXG4gICAgICAgIC5jYWxsKHpvb20pXG4gICAgICAgIC5hcHBlbmQoJ3N2ZzpnJyk7XG4gICAgdmFyIGxheW91dCA9IGQzLmxheW91dC5mb3JjZSgpXG4gICAgICAgIC5ub2RlcyhkMy52YWx1ZXMoZDNOb2RlTG9va3VwKSlcbiAgICAgICAgLmxpbmtzKGQzbGlua3MpXG4gICAgICAgIC5ncmF2aXR5KC4wNSlcbiAgICAgICAgLmxpbmtEaXN0YW5jZShmdW5jdGlvbiAobGluaykgeyByZXR1cm4gKGQzR3JhcGguZGlmZmVyZW5jZShsaW5rKSkgKiAyMDA7IH0pXG4gICAgICAgIC5jaGFyZ2UoLTkwMClcbiAgICAgICAgLm9uKFwidGlja1wiLCB0aWNrKVxuICAgICAgICAuc3RhcnQoKTtcbiAgICB2YXIgZHJhZyA9IGxheW91dC5kcmFnKClcbiAgICAgICAgLm9uKFwiZHJhZ3N0YXJ0XCIsIGRyYWdzdGFydCk7XG4gICAgcmVzaXplKCk7XG4gICAgZDMuc2VsZWN0KHdpbmRvdykub24oXCJyZXNpemVcIiwgcmVzaXplKTtcbiAgICBjZW50ZXJHcmFwaCgpO1xuICAgIHZhciBncmFwaFdpZHRoLCBncmFwaEhlaWdodDtcbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgIGdyYXBoV2lkdGggPSBtYWluQ29udGVudC53aWR0aCgpO1xuICAgICAgICBncmFwaEhlaWdodCA9IG1haW5Db250ZW50LmhlaWdodCgpO1xuICAgICAgICBncmFwaC5hdHRyKFwid2lkdGhcIiwgZ3JhcGhXaWR0aClcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGdyYXBoSGVpZ2h0KTtcbiAgICAgICAgbGF5b3V0LnNpemUoW2dyYXBoV2lkdGgsIGdyYXBoSGVpZ2h0XSlcbiAgICAgICAgICAgIC5yZXN1bWUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2VudGVyR3JhcGgoKSB7XG4gICAgICAgIHZhciBjZW50ZXJUcmFuc2xhdGUgPSBbXG4gICAgICAgICAgICAoZ3JhcGhXaWR0aCAvIDQpLFxuICAgICAgICAgICAgKGdyYXBoSGVpZ2h0IC8gNCksXG4gICAgICAgIF07XG4gICAgICAgIHpvb20udHJhbnNsYXRlKGNlbnRlclRyYW5zbGF0ZSk7XG4gICAgICAgIGdyYXBoLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgem9vbS50cmFuc2xhdGUoKSArIFwiKVwiICsgXCIgc2NhbGUoXCIgKyB6b29tLnNjYWxlKCkgKyBcIilcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uWm9vbUNoYW5nZWQoKSB7XG4gICAgICAgIGdyYXBoLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBkMy5ldmVudC50cmFuc2xhdGUgKyBcIilcIiArIFwiIHNjYWxlKFwiICsgZDMuZXZlbnQuc2NhbGUgKyBcIilcIik7XG4gICAgfVxuICAgIGdyYXBoLmFwcGVuZChcImRlZnNcIikuc2VsZWN0QWxsKFwibWFya2VyXCIpXG4gICAgICAgIC5kYXRhKFtcInJlZ3VsYXJcIl0pXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcIm1hcmtlclwiKVxuICAgICAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkOyB9KVxuICAgICAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpXG4gICAgICAgIC5hdHRyKFwicmVmWFwiLCAxNSlcbiAgICAgICAgLmF0dHIoXCJyZWZZXCIsIC0xLjUpXG4gICAgICAgIC5hdHRyKFwibWFya2VyV2lkdGhcIiwgNilcbiAgICAgICAgLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgNilcbiAgICAgICAgLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpXG4gICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpO1xuICAgIHZhciBsaW5rcyA9IGdyYXBoLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgICAgICAuZGF0YShsYXlvdXQubGlua3MoKSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBcImxpbmtcIjsgfSlcbiAgICAgICAgLmF0dHIoXCJkYXRhLXRhcmdldFwiLCBmdW5jdGlvbiAobykgeyByZXR1cm4gaHRtbE5hbWUoby50YXJnZXQpOyB9KVxuICAgICAgICAuYXR0cihcImRhdGEtc291cmNlXCIsIGZ1bmN0aW9uIChvKSB7IHJldHVybiBodG1sTmFtZShvLnNvdXJjZSk7IH0pXG4gICAgICAgIC5hdHRyKFwibWFya2VyLWVuZFwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gXCJ1cmwoI3JlZ3VsYXIpXCI7IH0pO1xuICAgIHZhciBub2RlcyA9IGdyYXBoLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwiY2lyY2xlXCIpXG4gICAgICAgIC5kYXRhKGxheW91dC5ub2RlcygpKVxuICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZm9ybWF0Q2xhc3NOYW1lKHByZWZpeGVzLmNpcmNsZSwgZCk7IH0pXG4gICAgICAgIC5hdHRyKFwiZGF0YS1uYW1lXCIsIGZ1bmN0aW9uIChvKSB7IHJldHVybiBodG1sTmFtZShvKTsgfSlcbiAgICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBNYXRoLm1heChkLndlaWdodCwgMyk7IH0pXG4gICAgICAgIC5jbGFzc2VkKFwiaW5vbmx5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkM0dyYXBoLmluT25seShkKTsgfSlcbiAgICAgICAgLmNsYXNzZWQoXCJvdXRvbmx5XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkM0dyYXBoLm91dE9ubHkoZCk7IH0pXG4gICAgICAgIC5jbGFzc2VkKFwiY2lyY3VsYXJcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQzR3JhcGguaXNDaXJjdWxhcihkKTsgfSlcbiAgICAgICAgLmNhbGwoZHJhZylcbiAgICAgICAgLm9uKFwiZGJsY2xpY2tcIiwgZGJsY2xpY2spXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZCkgeyBvbk5vZGVNb3VzZU92ZXIoZCk7IH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChkKSB7IG9uTm9kZU1vdXNlT3V0KGQpOyB9KTtcbiAgICB2YXIgdGV4dCA9IGdyYXBoLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAuZGF0YShsYXlvdXQubm9kZXMoKSlcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgOClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIFwiLjMxZW1cIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLW5hbWVcIiwgZnVuY3Rpb24gKG8pIHsgcmV0dXJuIGh0bWxOYW1lKG8pOyB9KVxuICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lOyB9KTtcbiAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICBsaW5rcy5hdHRyKFwiZFwiLCBsaW5rQXJjKTtcbiAgICAgICAgbm9kZXMuYXR0cihcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0pO1xuICAgICAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKGQpIHtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Ob2RlTW91c2VPdmVyKGQpIHtcbiAgICAgICAgdmFyIGVsbSA9IGZpbmRFbGVtZW50QnlOb2RlKHByZWZpeGVzLmNpcmNsZSwgZCk7XG4gICAgICAgIGVsbS5jbGFzc2VkKFwiaG92ZXJpbmdcIiwgdHJ1ZSk7XG4gICAgICAgIHVwZGF0ZU5vZGVUcmFuc3BhcmVuY2llcyhkLCB0cnVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Ob2RlTW91c2VPdXQoZCkge1xuICAgICAgICB2YXIgZWxtID0gZmluZEVsZW1lbnRCeU5vZGUocHJlZml4ZXMuY2lyY2xlLCBkKTtcbiAgICAgICAgZWxtLmNsYXNzZWQoXCJob3ZlcmluZ1wiLCBmYWxzZSk7XG4gICAgICAgIHVwZGF0ZU5vZGVUcmFuc3BhcmVuY2llcyhkLCBmYWxzZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRFbGVtZW50QnlOb2RlKHByZWZpeCwgbm9kZSkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnLicgKyBmb3JtYXRDbGFzc05hbWUocHJlZml4LCBub2RlKTtcbiAgICAgICAgcmV0dXJuIGdyYXBoLnNlbGVjdChzZWxlY3Rvcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZU5vZGVUcmFuc3BhcmVuY2llcyhkLCBmYWRlKSB7XG4gICAgICAgIGlmIChmYWRlID09PSB2b2lkIDApIHsgZmFkZSA9IHRydWU7IH1cbiAgICAgICAgbm9kZXMuY2xhc3NlZCgnbm90LWhvdmVyaW5nJywgZmFsc2UpO1xuICAgICAgICBub2Rlcy5jbGFzc2VkKCdkaW1tZWQnLCBmYWxzZSk7XG4gICAgICAgIGlmIChmYWRlKSB7XG4gICAgICAgICAgICBub2Rlcy5lYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkM0dyYXBoLmlzQ29ubmVjdGVkKGQsIG8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbm90LWhvdmVyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZGltbWVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGguc2VsZWN0QWxsKCdwYXRoLmxpbmsnKS5hdHRyKCdkYXRhLXNob3cnLCAnJylcbiAgICAgICAgICAgIC5jbGFzc2VkKCdvdXRnb2luZycsIGZhbHNlKVxuICAgICAgICAgICAgLmF0dHIoJ21hcmtlci1lbmQnLCBmYWRlID8gJycgOiAndXJsKCNyZWd1bGFyKScpXG4gICAgICAgICAgICAuY2xhc3NlZCgnaW5jb21taW5nJywgZmFsc2UpXG4gICAgICAgICAgICAuY2xhc3NlZCgnZGltbWVkJywgZmFkZSk7XG4gICAgICAgIGxpbmtzLmVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIGlmIChvLnNvdXJjZS5uYW1lID09PSBkLm5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2RpbW1lZCcpO1xuICAgICAgICAgICAgICAgIHZhciBlbG1Ob2RlcyA9IGdyYXBoLnNlbGVjdEFsbCgnLicgKyBmb3JtYXRDbGFzc05hbWUocHJlZml4ZXMuY2lyY2xlLCBvLnRhcmdldCkpO1xuICAgICAgICAgICAgICAgIGVsbU5vZGVzLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIDEpO1xuICAgICAgICAgICAgICAgIGVsbU5vZGVzLmF0dHIoJ3N0cm9rZS1vcGFjaXR5JywgMSk7XG4gICAgICAgICAgICAgICAgZWxtTm9kZXMuY2xhc3NlZCgnZGltbWVkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHZhciBvdXRnb2luZ0xpbmsgPSBncmFwaC5zZWxlY3RBbGwoJ3BhdGgubGlua1tkYXRhLXNvdXJjZT0nICsgaHRtbE5hbWUoby5zb3VyY2UpICsgJ10nKTtcbiAgICAgICAgICAgICAgICBvdXRnb2luZ0xpbmsuYXR0cignZGF0YS1zaG93JywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBvdXRnb2luZ0xpbmsuYXR0cignbWFya2VyLWVuZCcsICd1cmwoI3JlZ3VsYXIpJyk7XG4gICAgICAgICAgICAgICAgb3V0Z29pbmdMaW5rLmNsYXNzZWQoJ291dGdvaW5nJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvLnRhcmdldC5uYW1lID09PSBkLm5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2RpbW1lZCcpO1xuICAgICAgICAgICAgICAgIHZhciBpbmNvbW1pbmdMaW5rID0gZ3JhcGguc2VsZWN0QWxsKCdwYXRoLmxpbmtbZGF0YS10YXJnZXQ9JyArIGh0bWxOYW1lKG8udGFyZ2V0KSArICddJyk7XG4gICAgICAgICAgICAgICAgaW5jb21taW5nTGluay5hdHRyKCdkYXRhLXNob3cnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIGluY29tbWluZ0xpbmsuYXR0cignbWFya2VyLWVuZCcsICd1cmwoI3JlZ3VsYXIpJyk7XG4gICAgICAgICAgICAgICAgaW5jb21taW5nTGluay5jbGFzc2VkKCdpbmNvbW1pbmcnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRleHQuY2xhc3NlZChcImRpbW1lZFwiLCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgaWYgKCFmYWRlKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChkM0dyYXBoLmlzQ29ubmVjdGVkKGQsIG8pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0Q2xhc3NOYW1lKHByZWZpeCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnLScgKyBodG1sTmFtZShvYmplY3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBodG1sTmFtZShvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lLnJlcGxhY2UoLyhcXC58XFwvKS9naSwgJy0nKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZHJhZ3N0YXJ0KGQpIHtcbiAgICAgICAgZC5maXhlZCA9IHRydWU7XG4gICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcImZpeGVkXCIsIHRydWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkYmxjbGljayhkKSB7XG4gICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKFwiZml4ZWRcIiwgZC5maXhlZCA9IGZhbHNlKTtcbiAgICB9XG59XG52YXIgRDNHcmFwaCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRDNHcmFwaChsaW5rcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmxpbmtzID0gbGlua3M7XG4gICAgICAgIHRoaXMuaW5EZWdMb29rdXAgPSB7fTtcbiAgICAgICAgdGhpcy5vdXREZWdMb29rdXAgPSB7fTtcbiAgICAgICAgdGhpcy5saW5rZWRCeU5hbWUgPSB7fTtcbiAgICAgICAgdGhpcy50YXJnZXRzQnlTb3VyY2VOYW1lID0ge307XG4gICAgICAgIHRoaXMuY2lyY3VsYXJQYXRocyA9IFtdO1xuICAgICAgICBsaW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmluRGVnTG9va3VwW2wudGFyZ2V0Lm5hbWVdKVxuICAgICAgICAgICAgICAgIF90aGlzLmluRGVnTG9va3VwW2wudGFyZ2V0Lm5hbWVdID0gMjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfdGhpcy5pbkRlZ0xvb2t1cFtsLnRhcmdldC5uYW1lXSsrO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5vdXREZWdMb29rdXBbbC5zb3VyY2UubmFtZV0pXG4gICAgICAgICAgICAgICAgX3RoaXMub3V0RGVnTG9va3VwW2wuc291cmNlLm5hbWVdID0gMjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXREZWdMb29rdXBbbC5zb3VyY2UubmFtZV0rKztcbiAgICAgICAgICAgIF90aGlzLmxpbmtlZEJ5TmFtZVtsLnNvdXJjZS5uYW1lICsgXCIsXCIgKyBsLnRhcmdldC5uYW1lXSA9IDE7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnRhcmdldHNCeVNvdXJjZU5hbWVbbC5zb3VyY2UubmFtZV0pXG4gICAgICAgICAgICAgICAgX3RoaXMudGFyZ2V0c0J5U291cmNlTmFtZVtsLnNvdXJjZS5uYW1lXSA9IFtdO1xuICAgICAgICAgICAgX3RoaXMudGFyZ2V0c0J5U291cmNlTmFtZVtsLnNvdXJjZS5uYW1lXS5wdXNoKGwudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZmluZENpcmN1bGFyKCk7XG4gICAgfVxuICAgIEQzR3JhcGgucHJvdG90eXBlLmluRGVnID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5EZWdMb29rdXBbbm9kZS5uYW1lXSA/IHRoaXMuaW5EZWdMb29rdXBbbm9kZS5uYW1lXSA6IDE7XG4gICAgfTtcbiAgICBEM0dyYXBoLnByb3RvdHlwZS5vdXREZWcgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vdXREZWdMb29rdXBbbm9kZS5uYW1lXSA/IHRoaXMub3V0RGVnTG9va3VwW25vZGUubmFtZV0gOiAxO1xuICAgIH07XG4gICAgRDNHcmFwaC5wcm90b3R5cGUuYXZnRGVnID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmluRGVnKG5vZGUpICsgdGhpcy5vdXREZWcobm9kZSkpIC8gMjtcbiAgICB9O1xuICAgIEQzR3JhcGgucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlua2VkQnlOYW1lW2EubmFtZSArIFwiLFwiICsgYi5uYW1lXSB8fCB0aGlzLmxpbmtlZEJ5TmFtZVtiLm5hbWUgKyBcIixcIiArIGEubmFtZV0gfHwgYS5uYW1lID09IGIubmFtZTtcbiAgICB9O1xuICAgIEQzR3JhcGgucHJvdG90eXBlLmRpZmZlcmVuY2UgPSBmdW5jdGlvbiAobGluaykge1xuICAgICAgICByZXR1cm4gZnNVdGlsXzEuY29uc2lzdGVudFBhdGgocGF0aF8xLnJlbGF0aXZlKGxpbmsuc291cmNlLm5hbWUsIGxpbmsudGFyZ2V0Lm5hbWUpKS5zcGxpdCgnLycpLmxlbmd0aDtcbiAgICB9O1xuICAgIEQzR3JhcGgucHJvdG90eXBlLmluT25seSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5vdXREZWdMb29rdXBbbm9kZS5uYW1lXSAmJiB0aGlzLmluRGVnTG9va3VwW25vZGUubmFtZV07XG4gICAgfTtcbiAgICBEM0dyYXBoLnByb3RvdHlwZS5vdXRPbmx5ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmluRGVnTG9va3VwW25vZGUubmFtZV0gJiYgdGhpcy5vdXREZWdMb29rdXBbbm9kZS5uYW1lXTtcbiAgICB9O1xuICAgIEQzR3JhcGgucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbiAocGFyZW50LCB1bnJlc29sdmVkKSB7XG4gICAgICAgIHZhciBwYXJlbnRWaXNpdGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh1bnJlc29sdmVkKS5maWx0ZXIoZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgICAgICAgaWYgKG1vZHVsZSA9PT0gcGFyZW50Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRWaXNpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRWaXNpdGVkICYmIHVucmVzb2x2ZWRbbW9kdWxlXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEM0dyYXBoLnByb3RvdHlwZS5yZXNvbHZlciA9IGZ1bmN0aW9uIChzb3VyY2VOYW1lLCByZXNvbHZlZCwgdW5yZXNvbHZlZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB1bnJlc29sdmVkW3NvdXJjZU5hbWVdID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0c0J5U291cmNlTmFtZVtzb3VyY2VOYW1lXSkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXRzQnlTb3VyY2VOYW1lW3NvdXJjZU5hbWVdLmZvckVhY2goZnVuY3Rpb24gKGRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc29sdmVkW2RlcGVuZGVuY3kubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVucmVzb2x2ZWRbZGVwZW5kZW5jeS5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2lyY3VsYXJQYXRocy5wdXNoKF90aGlzLmdldFBhdGgoZGVwZW5kZW5jeSwgdW5yZXNvbHZlZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlc29sdmVyKGRlcGVuZGVuY3kubmFtZSwgcmVzb2x2ZWQsIHVucmVzb2x2ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkW3NvdXJjZU5hbWVdID0gdHJ1ZTtcbiAgICAgICAgdW5yZXNvbHZlZFtzb3VyY2VOYW1lXSA9IGZhbHNlO1xuICAgIH07XG4gICAgRDNHcmFwaC5wcm90b3R5cGUuZmluZENpcmN1bGFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzb2x2ZWQgPSB7fSwgdW5yZXNvbHZlZCA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnRhcmdldHNCeVNvdXJjZU5hbWUpLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZU5hbWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJlc29sdmVyKHNvdXJjZU5hbWUsIHJlc29sdmVkLCB1bnJlc29sdmVkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICA7XG4gICAgRDNHcmFwaC5wcm90b3R5cGUuaXNDaXJjdWxhciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBjeWNsaWMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaXJjdWxhclBhdGhzLnNvbWUoZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIGlmIChwYXRoLmluZGV4T2Yobm9kZS5uYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY3ljbGljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjeWNsaWM7XG4gICAgfTtcbiAgICBEM0dyYXBoLnByb3RvdHlwZS5jeWNsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNpcmN1bGFyUGF0aHM7XG4gICAgfTtcbiAgICByZXR1cm4gRDNHcmFwaDtcbn0pKCk7XG5mdW5jdGlvbiBsaW5rQXJjKGQpIHtcbiAgICB2YXIgdGFyZ2V0WCA9IGQudGFyZ2V0Lng7XG4gICAgdmFyIHRhcmdldFkgPSBkLnRhcmdldC55O1xuICAgIHZhciBzb3VyY2VYID0gZC5zb3VyY2UueDtcbiAgICB2YXIgc291cmNlWSA9IGQuc291cmNlLnk7XG4gICAgdmFyIHRoZXRhID0gTWF0aC5hdGFuKCh0YXJnZXRYIC0gc291cmNlWCkgLyAodGFyZ2V0WSAtIHNvdXJjZVkpKTtcbiAgICB2YXIgcGhpID0gTWF0aC5hdGFuKCh0YXJnZXRZIC0gc291cmNlWSkgLyAodGFyZ2V0WCAtIHNvdXJjZVgpKTtcbiAgICB2YXIgc2luVGhldGEgPSBkLnNvdXJjZS53ZWlnaHQgLyAyICogTWF0aC5zaW4odGhldGEpO1xuICAgIHZhciBjb3NUaGV0YSA9IGQuc291cmNlLndlaWdodCAvIDIgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgdmFyIHNpblBoaSA9IChkLnRhcmdldC53ZWlnaHQgLSA2KSAqIE1hdGguc2luKHBoaSk7XG4gICAgdmFyIGNvc1BoaSA9IChkLnRhcmdldC53ZWlnaHQgLSA2KSAqIE1hdGguY29zKHBoaSk7XG4gICAgaWYgKGQudGFyZ2V0LnkgPiBkLnNvdXJjZS55KSB7XG4gICAgICAgIHNvdXJjZVggPSBzb3VyY2VYICsgc2luVGhldGE7XG4gICAgICAgIHNvdXJjZVkgPSBzb3VyY2VZICsgY29zVGhldGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzb3VyY2VYID0gc291cmNlWCAtIHNpblRoZXRhO1xuICAgICAgICBzb3VyY2VZID0gc291cmNlWSAtIGNvc1RoZXRhO1xuICAgIH1cbiAgICBpZiAoZC5zb3VyY2UueCA+IGQudGFyZ2V0LngpIHtcbiAgICAgICAgdGFyZ2V0WCA9IHRhcmdldFggKyBjb3NQaGk7XG4gICAgICAgIHRhcmdldFkgPSB0YXJnZXRZICsgc2luUGhpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFyZ2V0WCA9IHRhcmdldFggLSBjb3NQaGk7XG4gICAgICAgIHRhcmdldFkgPSB0YXJnZXRZIC0gc2luUGhpO1xuICAgIH1cbiAgICB2YXIgZHggPSB0YXJnZXRYIC0gc291cmNlWCwgZHkgPSB0YXJnZXRZIC0gc291cmNlWSwgZHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIHJldHVybiBcIk1cIiArIHNvdXJjZVggKyBcIixcIiArIHNvdXJjZVkgKyBcIkFcIiArIGRyICsgXCIsXCIgKyBkciArIFwiIDAgMCwxIFwiICsgdGFyZ2V0WCArIFwiLFwiICsgdGFyZ2V0WTtcbn1cbiJdfQ==