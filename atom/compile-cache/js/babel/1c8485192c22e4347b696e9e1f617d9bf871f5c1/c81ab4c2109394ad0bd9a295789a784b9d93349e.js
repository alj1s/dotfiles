'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var logger = require('nuclide-logging').getLogger();

// A cache stores services in form of '$serviceName@$cwd' => $serviceObject.
var cachedServices = new Map();

function optionsToString(options) {
  if (!options) {
    return '';
  } else if (options instanceof Array) {
    return '[' + options.map(function (item) {
      return optionsToString(item);
    }).join(', ') + ']';
  } else if (options instanceof Object) {
    var keys = Object.keys(options).sort();
    return '{' + keys.map(function (key) {
      return key + ': ' + optionsToString(options[key]);
    }).join(', ') + '}';
  } else if (typeof options === 'number' || typeof options === 'boolean' || typeof options === 'string') {
    return JSON.stringify(options);
  } else {
    throw Error('Can\'t stringify %o', options);
  }
}

/**
 * Create a new or retrieve a cached service instance by serviceName and service options.
 */
function getService(serviceName, options, localImplementationClassPath) {
  var key = serviceName + '@' + optionsToString(options);
  if (!cachedServices.has(key)) {
    logger.debug('Create service instance: ' + key);
    var serviceInstance = createLocalService(localImplementationClassPath, options);
    cachedServices.set(key, serviceInstance);
  }
  return cachedServices.get(key);
}

function createLocalService(localImplementationClassPath, options) {
  var serviceClass = require(localImplementationClassPath);
  return new serviceClass(options);
}

function getRemoteEventName(serviceName, eventMethodName, serviceOptions) {
  return getLocalEventName(serviceName, eventMethodName) + '@' + optionsToString(serviceOptions);
}

function getLocalEventName(serviceName, eventMethodName) {
  return serviceName + '/' + eventMethodName;
}

module.exports = {
  getService: getService,
  getRemoteEventName: getRemoteEventName,
  optionsToString: optionsToString
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLXJlbW90ZS1wcm9qZWN0cy9ub2RlX21vZHVsZXMvbnVjbGlkZS1jbGllbnQvbm9kZV9tb2R1bGVzL251Y2xpZGUtc2VydmVyL2xpYi9zZXJ2aWNlLW1hbmFnZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7OztBQVdaLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDOzs7QUFHcEQsSUFBSSxjQUFnQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7O0FBRWpELFNBQVMsZUFBZSxDQUFDLE9BQWEsRUFBVTtBQUM5QyxNQUFJLENBQUMsT0FBTyxFQUFFO0FBQ1osV0FBTyxFQUFFLENBQUM7R0FDWCxNQUFNLElBQUksT0FBTyxZQUFZLEtBQUssRUFBRTtBQUNuQyxXQUFPLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTthQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUM7S0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztHQUMxRSxNQUFNLElBQUksT0FBTyxZQUFZLE1BQU0sRUFBRTtBQUNwQyxRQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3ZDLFdBQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHO2FBQUksR0FBRyxHQUFHLElBQUksR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7R0FDM0YsTUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQ3JHLFdBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUNoQyxNQUFNO0FBQ0wsVUFBTSxLQUFLLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDN0M7Q0FDRjs7Ozs7QUFLRCxTQUFTLFVBQVUsQ0FBQyxXQUFtQixFQUFFLE9BQVksRUFBRSw0QkFBb0MsRUFBTztBQUNoRyxNQUFJLEdBQUcsR0FBRyxXQUFXLEdBQUcsR0FBRyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2RCxNQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUM1QixVQUFNLENBQUMsS0FBSywrQkFBNkIsR0FBRyxDQUFHLENBQUM7QUFDaEQsUUFBSSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsNEJBQTRCLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEYsa0JBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0dBQzFDO0FBQ0QsU0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2hDOztBQUVELFNBQVMsa0JBQWtCLENBQUMsNEJBQW9DLEVBQUUsT0FBWSxFQUFPO0FBQ25GLE1BQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQ3pELFNBQU8sSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDbEM7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxXQUFtQixFQUFFLGVBQXVCLEVBQUUsY0FBbUIsRUFBVTtBQUNyRyxTQUFPLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsR0FBRyxHQUFHLEdBQUcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ2hHOztBQUVELFNBQVMsaUJBQWlCLENBQUMsV0FBbUIsRUFBRSxlQUF1QixFQUFVO0FBQy9FLFNBQU8sV0FBVyxHQUFHLEdBQUcsR0FBRyxlQUFlLENBQUM7Q0FDNUM7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLFlBQVUsRUFBVixVQUFVO0FBQ1Ysb0JBQWtCLEVBQWxCLGtCQUFrQjtBQUNsQixpQkFBZSxFQUFmLGVBQWU7Q0FDaEIsQ0FBQSIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvbnVjbGlkZS1yZW1vdGUtcHJvamVjdHMvbm9kZV9tb2R1bGVzL251Y2xpZGUtY2xpZW50L25vZGVfbW9kdWxlcy9udWNsaWRlLXNlcnZlci9saWIvc2VydmljZS1tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIGxvZ2dlciA9IHJlcXVpcmUoJ251Y2xpZGUtbG9nZ2luZycpLmdldExvZ2dlcigpO1xuXG4vLyBBIGNhY2hlIHN0b3JlcyBzZXJ2aWNlcyBpbiBmb3JtIG9mICckc2VydmljZU5hbWVAJGN3ZCcgPT4gJHNlcnZpY2VPYmplY3QuXG52YXIgY2FjaGVkU2VydmljZXM6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIG9wdGlvbnNUb1N0cmluZyhvcHRpb25zOiA/YW55KTogc3RyaW5nIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmV0dXJuICcnO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHJldHVybiAnWycgKyBvcHRpb25zLm1hcChpdGVtID0+IG9wdGlvbnNUb1N0cmluZyhpdGVtKSkuam9pbignLCAnKSArICddJztcbiAgfSBlbHNlIGlmIChvcHRpb25zIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5zb3J0KCk7XG4gICAgcmV0dXJuICd7JyArIGtleXMubWFwKGtleSA9PiBrZXkgKyAnOiAnICsgb3B0aW9uc1RvU3RyaW5nKG9wdGlvbnNba2V5XSkpLmpvaW4oJywgJykgKyAnfSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInIHx8IHR5cGVvZiBvcHRpb25zID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKCdDYW5cXCd0IHN0cmluZ2lmeSAlbycsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9yIHJldHJpZXZlIGEgY2FjaGVkIHNlcnZpY2UgaW5zdGFuY2UgYnkgc2VydmljZU5hbWUgYW5kIHNlcnZpY2Ugb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZ2V0U2VydmljZShzZXJ2aWNlTmFtZTogc3RyaW5nLCBvcHRpb25zOiBhbnksIGxvY2FsSW1wbGVtZW50YXRpb25DbGFzc1BhdGg6IHN0cmluZyk6IGFueSB7XG4gIHZhciBrZXkgPSBzZXJ2aWNlTmFtZSArICdAJyArIG9wdGlvbnNUb1N0cmluZyhvcHRpb25zKTtcbiAgaWYgKCFjYWNoZWRTZXJ2aWNlcy5oYXMoa2V5KSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgQ3JlYXRlIHNlcnZpY2UgaW5zdGFuY2U6ICR7a2V5fWApO1xuICAgIHZhciBzZXJ2aWNlSW5zdGFuY2UgPSBjcmVhdGVMb2NhbFNlcnZpY2UobG9jYWxJbXBsZW1lbnRhdGlvbkNsYXNzUGF0aCwgb3B0aW9ucyk7XG4gICAgY2FjaGVkU2VydmljZXMuc2V0KGtleSwgc2VydmljZUluc3RhbmNlKTtcbiAgfVxuICByZXR1cm4gY2FjaGVkU2VydmljZXMuZ2V0KGtleSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsU2VydmljZShsb2NhbEltcGxlbWVudGF0aW9uQ2xhc3NQYXRoOiBzdHJpbmcsIG9wdGlvbnM6IGFueSk6IGFueSB7XG4gIHZhciBzZXJ2aWNlQ2xhc3MgPSByZXF1aXJlKGxvY2FsSW1wbGVtZW50YXRpb25DbGFzc1BhdGgpO1xuICByZXR1cm4gbmV3IHNlcnZpY2VDbGFzcyhvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVtb3RlRXZlbnROYW1lKHNlcnZpY2VOYW1lOiBzdHJpbmcsIGV2ZW50TWV0aG9kTmFtZTogc3RyaW5nLCBzZXJ2aWNlT3B0aW9uczogYW55KTogc3RyaW5nIHtcbiAgcmV0dXJuIGdldExvY2FsRXZlbnROYW1lKHNlcnZpY2VOYW1lLCBldmVudE1ldGhvZE5hbWUpICsgJ0AnICsgb3B0aW9uc1RvU3RyaW5nKHNlcnZpY2VPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0TG9jYWxFdmVudE5hbWUoc2VydmljZU5hbWU6IHN0cmluZywgZXZlbnRNZXRob2ROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc2VydmljZU5hbWUgKyAnLycgKyBldmVudE1ldGhvZE5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRTZXJ2aWNlLFxuICBnZXRSZW1vdGVFdmVudE5hbWUsXG4gIG9wdGlvbnNUb1N0cmluZyxcbn1cbiJdfQ==