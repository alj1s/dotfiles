var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp = require('atom-space-pen-views');
var mainPanelView = require('./mainPanelView');
var fileSemanticView = require('./fileSemanticView');
var titles = {
    togglePanel: 'Toggle TypeScript Panel',
    tabErrors: 'Tab: Errors in Open Files',
    tabLastBuild: 'Tab: Last Build Output',
    tabReferences: 'Tab: Find References',
    fileSemantics: 'Toggle: File Semantics'
};
var items = Object.keys(titles).map(function (item) {
    return { title: titles[item] };
});
var ContextView = (function (_super) {
    __extends(ContextView, _super);
    function ContextView() {
        _super.apply(this, arguments);
        this.panel = null;
    }
    Object.defineProperty(ContextView.prototype, '$', {
        get: function get() {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    ContextView.prototype.setItems = function (items) {
        _super.prototype.setItems.call(this, items);
    };
    ContextView.prototype.viewForItem = function (item) {
        return '<li>' + item.title + '</li>';
    };
    ContextView.prototype.confirmed = function (item) {
        if (item.title == titles.togglePanel) {
            mainPanelView.panelView.toggle();
        }
        if (item.title == titles.tabErrors) {
            mainPanelView.panelView.errorPanelSelected();
        }
        if (item.title == titles.tabLastBuild) {
            mainPanelView.panelView.buildPanelSelected();
        }
        if (item.title == titles.tabReferences) {
            mainPanelView.panelView.referencesPanelSelected();
        }
        if (item.title == titles.fileSemantics) {
            fileSemanticView.showForCurrentEditor();
        }
        this.hide();
    };
    ContextView.prototype.getFilterKey = function () {
        return 'title';
    };
    ContextView.prototype.show = function () {
        this.storeFocusedElement();
        if (!this.panel) this.panel = atom.workspace.addModalPanel({ item: this });
        this.panel.show();
        this.setItems(items);
        this.focusFilterEditor();
    };
    ContextView.prototype.hide = function () {
        this.panel.hide();
        this.restoreFocus();
    };
    ContextView.prototype.cancelled = function () {
        this.hide();
    };
    return ContextView;
})(sp.SelectListView);
exports.ContextView = ContextView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvY29udGV4dFZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsQUFBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDeEQsU0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsYUFBUyxFQUFFLEdBQUc7QUFBRSxZQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUFFO0FBQ3ZDLEtBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFBLEFBQUMsQ0FBQztDQUN4RixDQUFDO0FBQ0YsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDekMsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDL0MsSUFBSSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNyRCxJQUFJLE1BQU0sR0FBRztBQUNULGVBQVcsRUFBRSx5QkFBeUI7QUFDdEMsYUFBUyxFQUFFLDJCQUEyQjtBQUN0QyxnQkFBWSxFQUFFLHdCQUF3QjtBQUN0QyxpQkFBYSxFQUFFLHNCQUFzQjtBQUNyQyxpQkFBYSxFQUFFLHdCQUF3QjtDQUMxQyxDQUFDO0FBQ0YsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxN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QUM7QUFDRixlQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0FBQzFDLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmLENBQUM7QUFDRixXQUFPLFdBQVcsQ0FBQztDQUN0QixDQUFBLENBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RCLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvY29udGV4dFZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBzcCA9IHJlcXVpcmUoJ2F0b20tc3BhY2UtcGVuLXZpZXdzJyk7XG52YXIgbWFpblBhbmVsVmlldyA9IHJlcXVpcmUoJy4vbWFpblBhbmVsVmlldycpO1xudmFyIGZpbGVTZW1hbnRpY1ZpZXcgPSByZXF1aXJlKFwiLi9maWxlU2VtYW50aWNWaWV3XCIpO1xudmFyIHRpdGxlcyA9IHtcbiAgICB0b2dnbGVQYW5lbDogJ1RvZ2dsZSBUeXBlU2NyaXB0IFBhbmVsJyxcbiAgICB0YWJFcnJvcnM6ICdUYWI6IEVycm9ycyBpbiBPcGVuIEZpbGVzJyxcbiAgICB0YWJMYXN0QnVpbGQ6ICdUYWI6IExhc3QgQnVpbGQgT3V0cHV0JyxcbiAgICB0YWJSZWZlcmVuY2VzOiAnVGFiOiBGaW5kIFJlZmVyZW5jZXMnLFxuICAgIGZpbGVTZW1hbnRpY3M6ICdUb2dnbGU6IEZpbGUgU2VtYW50aWNzJyxcbn07XG52YXIgaXRlbXMgPSBPYmplY3Qua2V5cyh0aXRsZXMpLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4geyB0aXRsZTogdGl0bGVzW2l0ZW1dIH07IH0pO1xudmFyIENvbnRleHRWaWV3ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29udGV4dFZpZXcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29udGV4dFZpZXcoKSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnBhbmVsID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnRleHRWaWV3LnByb3RvdHlwZSwgXCIkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29udGV4dFZpZXcucHJvdG90eXBlLnNldEl0ZW1zID0gZnVuY3Rpb24gKGl0ZW1zKSB7IF9zdXBlci5wcm90b3R5cGUuc2V0SXRlbXMuY2FsbCh0aGlzLCBpdGVtcyk7IH07XG4gICAgQ29udGV4dFZpZXcucHJvdG90eXBlLnZpZXdGb3JJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIFwiPGxpPlwiICsgaXRlbS50aXRsZSArIFwiPC9saT5cIjtcbiAgICB9O1xuICAgIENvbnRleHRWaWV3LnByb3RvdHlwZS5jb25maXJtZWQgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoaXRlbS50aXRsZSA9PSB0aXRsZXMudG9nZ2xlUGFuZWwpIHtcbiAgICAgICAgICAgIG1haW5QYW5lbFZpZXcucGFuZWxWaWV3LnRvZ2dsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnRpdGxlID09IHRpdGxlcy50YWJFcnJvcnMpIHtcbiAgICAgICAgICAgIG1haW5QYW5lbFZpZXcucGFuZWxWaWV3LmVycm9yUGFuZWxTZWxlY3RlZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnRpdGxlID09IHRpdGxlcy50YWJMYXN0QnVpbGQpIHtcbiAgICAgICAgICAgIG1haW5QYW5lbFZpZXcucGFuZWxWaWV3LmJ1aWxkUGFuZWxTZWxlY3RlZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnRpdGxlID09IHRpdGxlcy50YWJSZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICBtYWluUGFuZWxWaWV3LnBhbmVsVmlldy5yZWZlcmVuY2VzUGFuZWxTZWxlY3RlZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnRpdGxlID09IHRpdGxlcy5maWxlU2VtYW50aWNzKSB7XG4gICAgICAgICAgICBmaWxlU2VtYW50aWNWaWV3LnNob3dGb3JDdXJyZW50RWRpdG9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICBDb250ZXh0Vmlldy5wcm90b3R5cGUuZ2V0RmlsdGVyS2V5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ3RpdGxlJzsgfTtcbiAgICBDb250ZXh0Vmlldy5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9yZUZvY3VzZWRFbGVtZW50KCk7XG4gICAgICAgIGlmICghdGhpcy5wYW5lbClcbiAgICAgICAgICAgIHRoaXMucGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHsgaXRlbTogdGhpcyB9KTtcbiAgICAgICAgdGhpcy5wYW5lbC5zaG93KCk7XG4gICAgICAgIHRoaXMuc2V0SXRlbXMoaXRlbXMpO1xuICAgICAgICB0aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7XG4gICAgfTtcbiAgICBDb250ZXh0Vmlldy5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYW5lbC5oaWRlKCk7XG4gICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgfTtcbiAgICBDb250ZXh0Vmlldy5wcm90b3R5cGUuY2FuY2VsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBDb250ZXh0Vmlldztcbn0pKHNwLlNlbGVjdExpc3RWaWV3KTtcbmV4cG9ydHMuQ29udGV4dFZpZXcgPSBDb250ZXh0VmlldztcbiJdfQ==