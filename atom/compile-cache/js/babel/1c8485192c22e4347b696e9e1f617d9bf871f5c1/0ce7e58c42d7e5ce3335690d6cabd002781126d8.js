var mainPanelView = require('./views/mainPanelView');
var lineMessageView = require('./views/lineMessageView');
var gotoHistory = require('./gotoHistory');
function getTitle(errorCount) {
    var title = '<span class="icon-circuit-board"></span> TypeScript Build';
    if (errorCount > 0) {
        title = title + (' (\n            <span class="text-highlight" style="font-weight: bold"> ' + errorCount + ' </span>\n            <span class="text-error" style="font-weight: bold;"> error' + (errorCount === 1 ? '' : 's') + ' </span>\n        )');
    }
    return title;
}
function setBuildOutput(buildOutput) {
    mainPanelView.panelView.clearBuild();
    if (buildOutput.counts.errors) {
        mainPanelView.panelView.setBuildPanelCount(buildOutput.counts.errors);
    } else {
        mainPanelView.panelView.setBuildPanelCount(0);
    }
    gotoHistory.buildOutput.members = [];
    buildOutput.outputs.forEach(function (output) {
        if (output.success) {
            return;
        }
        output.errors.forEach(function (error) {
            mainPanelView.panelView.addBuild(new lineMessageView.LineMessageView({
                goToLine: function goToLine(filePath, line, col) {
                    return gotoHistory.gotoLine(filePath, line, col, gotoHistory.buildOutput);
                },
                message: error.message,
                line: error.startPos.line + 1,
                col: error.startPos.col,
                file: error.filePath,
                preview: error.preview
            }));
            gotoHistory.buildOutput.members.push({ filePath: error.filePath, line: error.startPos.line + 1, col: error.startPos.col });
        });
    });
    if (!buildOutput.counts.errors) {
        atom.notifications.addSuccess('Build success');
    } else if (buildOutput.counts.emitErrors) {
        atom.notifications.addError('Emits errors: ' + buildOutput.counts.emitErrors + ' files.');
    } else {
        atom.notifications.addWarning('Compile failed but emit succeeded');
    }
}
exports.setBuildOutput = setBuildOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vYnVpbGRWaWV3LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3JELElBQUksZUFBZSxHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3pELElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQyxTQUFTLFFBQVEsQ0FBQyxVQUFVLEVBQUU7QUFDMUIsUUFBSSxLQUFLLEdBQUcsMkRBQTJELENBQUM7QUFDeEUsUUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFO0FBQ2hCLGFBQUssR0FBRyxLQUFLLElBQUksMEVBQThFLEdBQUcsVUFBVSxHQUFHLGtGQUFzRixJQUFJLFVBQVUsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQSxBQUFDLEdBQUcscUJBQXFCLENBQUEsQUFBQyxDQUFDO0tBQ2xRO0FBQ0QsV0FBTyxLQUFLLENBQUM7Q0FDaEI7QUFDRCxTQUFTLGNBQWMsQ0FBQyxXQUFXLEVBQUU7QUFDakMsaUJBQWEsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDckMsUUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUMzQixxQkFBYSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3pFLE1BQ0k7QUFDRCxxQkFBYSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqRDtBQUNELGVBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNyQyxlQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUMxQyxZQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7QUFDaEIsbUJBQU87U0FDVjtBQUNELGNBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxFQUFFO0FBQ25DLHlCQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxlQUFlLENBQUM7QUFDakUsd0JBQVEsRUFBRSxrQkFBVSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtBQUFFLDJCQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUFFO0FBQ3ZILHVCQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87QUFDdEIsb0JBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDO0FBQzdCLG1CQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHO0FBQ3ZCLG9CQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVE7QUFDcEIsdUJBQU8sRUFBRSxLQUFLLENBQUMsT0FBTzthQUN6QixDQUFDLENBQUMsQ0FBQztBQUNKLHVCQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDOUgsQ0FBQyxDQUFDO0tBQ04sQ0FBQyxDQUFDO0FBQ0gsUUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzVCLFlBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ2xELE1BQ0ksSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtBQUNwQyxZQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztLQUM3RixNQUNJO0FBQ0QsWUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsbUNBQW1DLENBQUMsQ0FBQztLQUN0RTtDQUNKO0FBQ0QsT0FBTyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vYXRvbS9idWlsZFZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFpblBhbmVsVmlldyA9IHJlcXVpcmUoJy4vdmlld3MvbWFpblBhbmVsVmlldycpO1xudmFyIGxpbmVNZXNzYWdlVmlldyA9IHJlcXVpcmUoJy4vdmlld3MvbGluZU1lc3NhZ2VWaWV3Jyk7XG52YXIgZ290b0hpc3RvcnkgPSByZXF1aXJlKCcuL2dvdG9IaXN0b3J5Jyk7XG5mdW5jdGlvbiBnZXRUaXRsZShlcnJvckNvdW50KSB7XG4gICAgdmFyIHRpdGxlID0gJzxzcGFuIGNsYXNzPVwiaWNvbi1jaXJjdWl0LWJvYXJkXCI+PC9zcGFuPiBUeXBlU2NyaXB0IEJ1aWxkJztcbiAgICBpZiAoZXJyb3JDb3VudCA+IDApIHtcbiAgICAgICAgdGl0bGUgPSB0aXRsZSArIChcIiAoXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRleHQtaGlnaGxpZ2h0XFxcIiBzdHlsZT1cXFwiZm9udC13ZWlnaHQ6IGJvbGRcXFwiPiBcIiArIGVycm9yQ291bnQgKyBcIiA8L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRleHQtZXJyb3JcXFwiIHN0eWxlPVxcXCJmb250LXdlaWdodDogYm9sZDtcXFwiPiBlcnJvclwiICsgKGVycm9yQ291bnQgPT09IDEgPyBcIlwiIDogXCJzXCIpICsgXCIgPC9zcGFuPlxcbiAgICAgICAgKVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRpdGxlO1xufVxuZnVuY3Rpb24gc2V0QnVpbGRPdXRwdXQoYnVpbGRPdXRwdXQpIHtcbiAgICBtYWluUGFuZWxWaWV3LnBhbmVsVmlldy5jbGVhckJ1aWxkKCk7XG4gICAgaWYgKGJ1aWxkT3V0cHV0LmNvdW50cy5lcnJvcnMpIHtcbiAgICAgICAgbWFpblBhbmVsVmlldy5wYW5lbFZpZXcuc2V0QnVpbGRQYW5lbENvdW50KGJ1aWxkT3V0cHV0LmNvdW50cy5lcnJvcnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbWFpblBhbmVsVmlldy5wYW5lbFZpZXcuc2V0QnVpbGRQYW5lbENvdW50KDApO1xuICAgIH1cbiAgICBnb3RvSGlzdG9yeS5idWlsZE91dHB1dC5tZW1iZXJzID0gW107XG4gICAgYnVpbGRPdXRwdXQub3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgaWYgKG91dHB1dC5zdWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0LmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgbWFpblBhbmVsVmlldy5wYW5lbFZpZXcuYWRkQnVpbGQobmV3IGxpbmVNZXNzYWdlVmlldy5MaW5lTWVzc2FnZVZpZXcoe1xuICAgICAgICAgICAgICAgIGdvVG9MaW5lOiBmdW5jdGlvbiAoZmlsZVBhdGgsIGxpbmUsIGNvbCkgeyByZXR1cm4gZ290b0hpc3RvcnkuZ290b0xpbmUoZmlsZVBhdGgsIGxpbmUsIGNvbCwgZ290b0hpc3RvcnkuYnVpbGRPdXRwdXQpOyB9LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgbGluZTogZXJyb3Iuc3RhcnRQb3MubGluZSArIDEsXG4gICAgICAgICAgICAgICAgY29sOiBlcnJvci5zdGFydFBvcy5jb2wsXG4gICAgICAgICAgICAgICAgZmlsZTogZXJyb3IuZmlsZVBhdGgsXG4gICAgICAgICAgICAgICAgcHJldmlldzogZXJyb3IucHJldmlld1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgZ290b0hpc3RvcnkuYnVpbGRPdXRwdXQubWVtYmVycy5wdXNoKHsgZmlsZVBhdGg6IGVycm9yLmZpbGVQYXRoLCBsaW5lOiBlcnJvci5zdGFydFBvcy5saW5lICsgMSwgY29sOiBlcnJvci5zdGFydFBvcy5jb2wgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmICghYnVpbGRPdXRwdXQuY291bnRzLmVycm9ycykge1xuICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkU3VjY2VzcyhcIkJ1aWxkIHN1Y2Nlc3NcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJ1aWxkT3V0cHV0LmNvdW50cy5lbWl0RXJyb3JzKSB7XG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcIkVtaXRzIGVycm9yczogXCIgKyBidWlsZE91dHB1dC5jb3VudHMuZW1pdEVycm9ycyArIFwiIGZpbGVzLlwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKCdDb21waWxlIGZhaWxlZCBidXQgZW1pdCBzdWNjZWVkZWQnKTtcbiAgICB9XG59XG5leHBvcnRzLnNldEJ1aWxkT3V0cHV0ID0gc2V0QnVpbGRPdXRwdXQ7XG4iXX0=