var os = require("os");
function defaultFormatCodeOptions() {
    return {
        IndentSize: 4,
        TabSize: 4,
        NewLineCharacter: os.EOL,
        ConvertTabsToSpaces: true,
        InsertSpaceAfterCommaDelimiter: true,
        InsertSpaceAfterSemicolonInForStatements: true,
        InsertSpaceBeforeAndAfterBinaryOperators: true,
        InsertSpaceAfterKeywordsInControlFlowStatements: true,
        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: false,
        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,
        PlaceOpenBraceOnNewLineForFunctions: false,
        PlaceOpenBraceOnNewLineForControlBlocks: false
    };
}
exports.defaultFormatCodeOptions = defaultFormatCodeOptions;
function makeFormatCodeOptions(config) {
    var options = defaultFormatCodeOptions();
    if (!config) {
        return options;
    }
    if (typeof config.insertSpaceAfterCommaDelimiter === "boolean") {
        options.InsertSpaceAfterCommaDelimiter = config.insertSpaceAfterCommaDelimiter;
    }
    if (typeof config.insertSpaceAfterSemicolonInForStatements === "boolean") {
        options.InsertSpaceAfterSemicolonInForStatements = config.insertSpaceAfterSemicolonInForStatements;
    }
    if (typeof config.insertSpaceBeforeAndAfterBinaryOperators === "boolean") {
        options.InsertSpaceBeforeAndAfterBinaryOperators = config.insertSpaceBeforeAndAfterBinaryOperators;
    }
    if (typeof config.insertSpaceAfterKeywordsInControlFlowStatements === "boolean") {
        options.InsertSpaceAfterKeywordsInControlFlowStatements = config.insertSpaceAfterKeywordsInControlFlowStatements;
    }
    if (typeof config.insertSpaceAfterFunctionKeywordForAnonymousFunctions === "boolean") {
        options.InsertSpaceAfterFunctionKeywordForAnonymousFunctions = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions;
    }
    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis === "boolean") {
        options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis;
    }
    if (typeof config.placeOpenBraceOnNewLineForFunctions === "boolean") {
        options.PlaceOpenBraceOnNewLineForFunctions = config.placeOpenBraceOnNewLineForFunctions;
    }
    if (typeof config.placeOpenBraceOnNewLineForControlBlocks === "boolean") {
        options.PlaceOpenBraceOnNewLineForControlBlocks = config.placeOpenBraceOnNewLineForControlBlocks;
    }
    if (typeof config.indentSize === "number") {
        options.IndentSize = config.indentSize;
    }
    if (typeof config.tabSize === "number") {
        options.TabSize = config.tabSize;
    }
    if (typeof config.newLineCharacter === "string") {
        options.NewLineCharacter = config.newLineCharacter;
    }
    if (typeof config.convertTabsToSpaces === "boolean") {
        options.ConvertTabsToSpaces = config.convertTabsToSpaces;
    }
    return options;
}
exports.makeFormatCodeOptions = makeFormatCodeOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL3RzY29uZmlnL2Zvcm1hdHRpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLFNBQVMsd0JBQXdCLEdBQUc7QUFDaEMsV0FBTztBQUNILGtCQUFVLEVBQUUsQ0FBQztBQUNiLGVBQU8sRUFBRSxDQUFDO0FBQ1Ysd0JBQWdCLEVBQUUsRUFBRSxDQUFDLEdBQUc7QUFDeEIsMkJBQW1CLEVBQUUsSUFBSTtBQUN6QixzQ0FBOEIsRUFBRSxJQUFJO0FBQ3BDLGdEQUF3QyxFQUFFLElBQUk7QUFDOUMsZ0RBQXdDLEVBQUUsSUFBSTtBQUM5Qyx1REFBK0MsRUFBRSxJQUFJO0FBQ3JELDREQUFvRCxFQUFFLEtBQUs7QUFDM0Qsa0VBQTBELEVBQUUsS0FBSztBQUNqRSwyQ0FBbUMsRUFBRSxLQUFLO0FBQzFDLCtDQUF1QyxFQUFFLEtBQUs7S0FDakQsQ0FBQztDQUNMO0FBQ0QsT0FBTyxDQUFDLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDO0FBQzVELFNBQVMscUJBQXFCLENBQUMsTUFBTSxFQUFFO0FBQ25DLFFBQUksT0FBTyxHQUFHLHdCQUF3QixFQUFFLENBQUM7QUFDekMsUUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNULGVBQU8sT0FBTyxDQUFDO0tBQ2xCO0FBQ0QsUUFBSSxPQUFPLE1BQU0sQ0FBQyw4QkFBOEIsS0FBSyxTQUFTLEVBQUU7QUFDNUQsZUFBTyxDQUFDLDhCQUE4QixHQUFHLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztLQUNsRjtBQUNELFFBQUksT0FBTyxNQUFNLENBQUMsd0NBQXdDLEtBQUssU0FBUyxFQUFFO0FBQ3RFLGVBQU8sQ0FBQyx3Q0FBd0MsR0FBRyxNQUFNLENBQUMsd0NBQXdDLENBQUM7S0FDdEc7QUFDRCxRQUFJLE9BQU8sTUFBTSxDQUFDLHdDQUF3QyxLQUFLLFNBQVMsRUFBRTtBQUN0RSxlQUFPLENBQUMsd0NBQXdDLEdBQUcsTUFBTSxDQUFDLHdDQUF3QyxDQUFDO0tBQ3RHO0FBQ0QsUUFBSSxPQUFPLE1BQU0sQ0FBQywrQ0FBK0MsS0FBSyxTQUFTLEVBQUU7QUFDN0UsZUFBTyxDQUFDLCtDQUErQyxHQUFHLE1BQU0sQ0FBQywrQ0FBK0MsQ0FBQztLQUNwSDtBQUNELFFBQUksT0FBTyxNQUFNLENBQUMsb0RBQW9ELEtBQUssU0FBUyxFQUFFO0FBQ2xGLGVBQU8sQ0FBQyxvREFBb0QsR0FBRyxNQUFNLENBQUMsb0RBQW9ELENBQUM7S0FDOUg7QUFDRCxRQUFJLE9BQU8sTUFBTSxDQUFDLDBEQUEwRCxLQUFLLFNBQVMsRUFBRTtBQUN4RixlQUFPLENBQUMsMERBQTBELEdBQUcsTUFBTSxDQUFDLDBEQUEwRCxDQUFDO0tBQzFJO0FBQ0QsUUFBSSxPQUFPLE1BQU0sQ0FBQyxtQ0FBbUMsS0FBSyxTQUFTLEVBQUU7QUFDakUsZUFBTyxDQUFDLG1DQUFtQyxHQUFHLE1BQU0sQ0FBQyxtQ0FBbUMsQ0FBQztLQUM1RjtBQUNELFFBQUksT0FBTyxNQUFNLENBQUMsdUNBQXVDLEtBQUssU0FBUyxFQUFFO0FBQ3JFLGVBQU8sQ0FBQyx1Q0FBdUMsR0FBRyxNQUFNLENBQUMsdUNBQXVDLENBQUM7S0FDcEc7QUFDRCxRQUFJLE9BQU8sTUFBTSxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDdkMsZUFBTyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0tBQzFDO0FBQ0QsUUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFO0FBQ3BDLGVBQU8sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztLQUNwQztBQUNELFFBQUksT0FBTyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssUUFBUSxFQUFFO0FBQzdDLGVBQU8sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7S0FDdEQ7QUFDRCxRQUFJLE9BQU8sTUFBTSxDQUFDLG1CQUFtQixLQUFLLFNBQVMsRUFBRTtBQUNqRCxlQUFPLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0tBQzVEO0FBQ0QsV0FBTyxPQUFPLENBQUM7Q0FDbEI7QUFDRCxPQUFPLENBQUMscUJBQXFCLEdBQUcscUJBQXFCLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vdHNjb25maWcvZm9ybWF0dGluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG5mdW5jdGlvbiBkZWZhdWx0Rm9ybWF0Q29kZU9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgSW5kZW50U2l6ZTogNCxcbiAgICAgICAgVGFiU2l6ZTogNCxcbiAgICAgICAgTmV3TGluZUNoYXJhY3Rlcjogb3MuRU9MLFxuICAgICAgICBDb252ZXJ0VGFic1RvU3BhY2VzOiB0cnVlLFxuICAgICAgICBJbnNlcnRTcGFjZUFmdGVyQ29tbWFEZWxpbWl0ZXI6IHRydWUsXG4gICAgICAgIEluc2VydFNwYWNlQWZ0ZXJTZW1pY29sb25JbkZvclN0YXRlbWVudHM6IHRydWUsXG4gICAgICAgIEluc2VydFNwYWNlQmVmb3JlQW5kQWZ0ZXJCaW5hcnlPcGVyYXRvcnM6IHRydWUsXG4gICAgICAgIEluc2VydFNwYWNlQWZ0ZXJLZXl3b3Jkc0luQ29udHJvbEZsb3dTdGF0ZW1lbnRzOiB0cnVlLFxuICAgICAgICBJbnNlcnRTcGFjZUFmdGVyRnVuY3Rpb25LZXl3b3JkRm9yQW5vbnltb3VzRnVuY3Rpb25zOiBmYWxzZSxcbiAgICAgICAgSW5zZXJ0U3BhY2VBZnRlck9wZW5pbmdBbmRCZWZvcmVDbG9zaW5nTm9uZW1wdHlQYXJlbnRoZXNpczogZmFsc2UsXG4gICAgICAgIFBsYWNlT3BlbkJyYWNlT25OZXdMaW5lRm9yRnVuY3Rpb25zOiBmYWxzZSxcbiAgICAgICAgUGxhY2VPcGVuQnJhY2VPbk5ld0xpbmVGb3JDb250cm9sQmxvY2tzOiBmYWxzZSxcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0Rm9ybWF0Q29kZU9wdGlvbnMgPSBkZWZhdWx0Rm9ybWF0Q29kZU9wdGlvbnM7XG5mdW5jdGlvbiBtYWtlRm9ybWF0Q29kZU9wdGlvbnMoY29uZmlnKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkZWZhdWx0Rm9ybWF0Q29kZU9wdGlvbnMoKTtcbiAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25maWcuaW5zZXJ0U3BhY2VBZnRlckNvbW1hRGVsaW1pdGVyID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBvcHRpb25zLkluc2VydFNwYWNlQWZ0ZXJDb21tYURlbGltaXRlciA9IGNvbmZpZy5pbnNlcnRTcGFjZUFmdGVyQ29tbWFEZWxpbWl0ZXI7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uZmlnLmluc2VydFNwYWNlQWZ0ZXJTZW1pY29sb25JbkZvclN0YXRlbWVudHMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIG9wdGlvbnMuSW5zZXJ0U3BhY2VBZnRlclNlbWljb2xvbkluRm9yU3RhdGVtZW50cyA9IGNvbmZpZy5pbnNlcnRTcGFjZUFmdGVyU2VtaWNvbG9uSW5Gb3JTdGF0ZW1lbnRzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5pbnNlcnRTcGFjZUJlZm9yZUFuZEFmdGVyQmluYXJ5T3BlcmF0b3JzID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBvcHRpb25zLkluc2VydFNwYWNlQmVmb3JlQW5kQWZ0ZXJCaW5hcnlPcGVyYXRvcnMgPSBjb25maWcuaW5zZXJ0U3BhY2VCZWZvcmVBbmRBZnRlckJpbmFyeU9wZXJhdG9ycztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25maWcuaW5zZXJ0U3BhY2VBZnRlcktleXdvcmRzSW5Db250cm9sRmxvd1N0YXRlbWVudHMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIG9wdGlvbnMuSW5zZXJ0U3BhY2VBZnRlcktleXdvcmRzSW5Db250cm9sRmxvd1N0YXRlbWVudHMgPSBjb25maWcuaW5zZXJ0U3BhY2VBZnRlcktleXdvcmRzSW5Db250cm9sRmxvd1N0YXRlbWVudHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uZmlnLmluc2VydFNwYWNlQWZ0ZXJGdW5jdGlvbktleXdvcmRGb3JBbm9ueW1vdXNGdW5jdGlvbnMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIG9wdGlvbnMuSW5zZXJ0U3BhY2VBZnRlckZ1bmN0aW9uS2V5d29yZEZvckFub255bW91c0Z1bmN0aW9ucyA9IGNvbmZpZy5pbnNlcnRTcGFjZUFmdGVyRnVuY3Rpb25LZXl3b3JkRm9yQW5vbnltb3VzRnVuY3Rpb25zO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5pbnNlcnRTcGFjZUFmdGVyT3BlbmluZ0FuZEJlZm9yZUNsb3NpbmdOb25lbXB0eVBhcmVudGhlc2lzID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBvcHRpb25zLkluc2VydFNwYWNlQWZ0ZXJPcGVuaW5nQW5kQmVmb3JlQ2xvc2luZ05vbmVtcHR5UGFyZW50aGVzaXMgPSBjb25maWcuaW5zZXJ0U3BhY2VBZnRlck9wZW5pbmdBbmRCZWZvcmVDbG9zaW5nTm9uZW1wdHlQYXJlbnRoZXNpcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25maWcucGxhY2VPcGVuQnJhY2VPbk5ld0xpbmVGb3JGdW5jdGlvbnMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIG9wdGlvbnMuUGxhY2VPcGVuQnJhY2VPbk5ld0xpbmVGb3JGdW5jdGlvbnMgPSBjb25maWcucGxhY2VPcGVuQnJhY2VPbk5ld0xpbmVGb3JGdW5jdGlvbnM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uZmlnLnBsYWNlT3BlbkJyYWNlT25OZXdMaW5lRm9yQ29udHJvbEJsb2NrcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgb3B0aW9ucy5QbGFjZU9wZW5CcmFjZU9uTmV3TGluZUZvckNvbnRyb2xCbG9ja3MgPSBjb25maWcucGxhY2VPcGVuQnJhY2VPbk5ld0xpbmVGb3JDb250cm9sQmxvY2tzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5pbmRlbnRTaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIG9wdGlvbnMuSW5kZW50U2l6ZSA9IGNvbmZpZy5pbmRlbnRTaXplO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZy50YWJTaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIG9wdGlvbnMuVGFiU2l6ZSA9IGNvbmZpZy50YWJTaXplO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5uZXdMaW5lQ2hhcmFjdGVyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG9wdGlvbnMuTmV3TGluZUNoYXJhY3RlciA9IGNvbmZpZy5uZXdMaW5lQ2hhcmFjdGVyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5jb252ZXJ0VGFic1RvU3BhY2VzID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBvcHRpb25zLkNvbnZlcnRUYWJzVG9TcGFjZXMgPSBjb25maWcuY29udmVydFRhYnNUb1NwYWNlcztcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5leHBvcnRzLm1ha2VGb3JtYXRDb2RlT3B0aW9ucyA9IG1ha2VGb3JtYXRDb2RlT3B0aW9ucztcbiJdfQ==