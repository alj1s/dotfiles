// Help:
// https://github.com/atom/first-mate/
// https://github.com/fdecampredon/brackets-typescript/blob/master/src/main/mode.ts
// https://github.com/p-e-w/language-javascript-semantic/blob/master/lib/javascript-semantic-grammar.coffee
// TODO: update to latest : https://github.com/atom/atom/pull/6757
var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var utils = require("../lang/utils");
var TokenClass = ts.TokenClass;
global.AtomTSBaseGrammar = require(atom.config.resourcePath + "/node_modules/first-mate/lib/grammar.js");
var TypeScriptSemanticGrammar = (function (_super) {
    __extends(TypeScriptSemanticGrammar, _super);
    function TypeScriptSemanticGrammar(registry) {
        _super.call(this, registry, {
            name: "TypeScript",
            scopeName: "source.ts",
            patterns: {},
            fileTypes: ["ts", "tst"]
        });
        this.registry = registry;
        this.trailingWhiteSpaceLength = 0;
        this.classifier = ts.createClassifier();
        this.fullTripleSlashReferencePathRegEx = /^(\/\/\/\s*<reference\s+path\s*=\s*)('|")(.+?)\2.*?\/>/;
        this.fullTripleSlashAMDNameRegEx = /^(\/\/\/\s*<amd-module\s+name\s*=\s*)('|")(.+?)\2.*?\/>/;
        this.fullTripleSlashAMDDependencyPathRegEx = /^(\/\/\/\s*<amd-dependency\s+path\s*=\s*)('|")(.+?)\2.*?\/>/;
        this.importRequireRegex = /^import\s*(\w*)\s*=\s*require\((?:'|")(\S*)(?:'|")\.*\)/;
        this.es6importRegex = /^import.*from.*/;
        this.todoRegex = new RegExp("(BUG|TODO|FIXME|CHANGED|XXX|IDEA|HACK|NOTE)");
    }
    TypeScriptSemanticGrammar.prototype.tokenizeLine = function (line, ruleStack, firstLine) {
        if (firstLine === void 0) {
            firstLine = false;
        }
        if (firstLine && line.length > 1 && (line.charCodeAt(0) == 0xFFFE || line.charCodeAt(0) == 0xFEFF)) {
            this.trailingWhiteSpaceLength = 1;
        } else {
            this.trailingWhiteSpaceLength = 0;
        }
        var finalLexState = firstLine ? 0 : ruleStack && ruleStack.length ? ruleStack[0] : 0;
        if (finalLexState !== 0) {
            return this.getAtomTokensForLine(line, finalLexState);
        }
        if (line.match(this.fullTripleSlashReferencePathRegEx)) {
            return this.getFullTripleSlashReferencePathTokensForLine(line);
        } else if (line.match(this.fullTripleSlashAMDNameRegEx)) {
            return this.getFullTripleSlashAMDModuleNameTokensForLine(line);
        } else if (line.match(this.fullTripleSlashAMDDependencyPathRegEx)) {
            return this.getFullTripleSlashAMDDependencyPathTokensForLine(line);
        } else if (line.match(this.importRequireRegex)) {
            return this.getImportRequireTokensForLine(line);
        } else if (line.match(this.es6importRegex)) {
            return this.getEs6importTokensForLine(line);
        } else {
            return this.getAtomTokensForLine(line, finalLexState);
        }
    };
    TypeScriptSemanticGrammar.prototype.getFullTripleSlashTokensForLine = function (line, matches, argumentType) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line);
        if (matches[3]) {
            var path = matches[3];
            if (line.indexOf("\"" + path + "\"") != -1) {
                path = "\"" + path + "\"";
            } else {
                path = "'" + path + "'";
            }
            var startPosition = line.indexOf(path);
            var endPosition = startPosition + path.length;
            var atomTokens = [];
            atomTokens.push(this.registry.createToken(line.substr(0, startPosition), ["source.ts", "keyword"]));
            atomTokens.push(this.registry.createToken(line.substr(startPosition, path.length), ["source.ts", argumentType]));
            atomTokens.push(this.registry.createToken(line.substr(endPosition, line.length - endPosition), ["source.ts", "keyword"]));
            return { tokens: atomTokens, ruleStack: [] };
        } else {
            return this.convertTsTokensToAtomTokens(tsTokensWithRuleStack);
        }
    };
    TypeScriptSemanticGrammar.prototype.getFullTripleSlashReferencePathTokensForLine = function (line) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line);
        var matches = line.match(this.fullTripleSlashReferencePathRegEx);
        return this.getFullTripleSlashTokensForLine(line, matches, "reference.path.string");
    };
    TypeScriptSemanticGrammar.prototype.getFullTripleSlashAMDModuleNameTokensForLine = function (line) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line);
        var matches = line.match(this.fullTripleSlashAMDNameRegEx);
        return this.getFullTripleSlashTokensForLine(line, matches, "module.name.string");
    };
    TypeScriptSemanticGrammar.prototype.getFullTripleSlashAMDDependencyPathTokensForLine = function (line) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line);
        var matches = line.match(this.fullTripleSlashAMDDependencyPathRegEx);
        return this.getFullTripleSlashTokensForLine(line, matches, "dependency.path.string");
    };
    TypeScriptSemanticGrammar.prototype.getImportRequireTokensForLine = function (line) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line);
        tsTokensWithRuleStack.tokens.forEach(function (t) {
            if (t.style[0] == "identifier") {
                t.style = ["require.identifier"];
            }
            if (t.style[0] == "string") {
                t.style = ["require.path.string"];
            }
        });
        return this.convertTsTokensToAtomTokens(tsTokensWithRuleStack);
    };
    TypeScriptSemanticGrammar.prototype.getEs6importTokensForLine = function (line) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line);
        tsTokensWithRuleStack.tokens.forEach(function (t) {
            if (t.style[0] == "identifier") {
                t.style = ["es6import.identifier"];
            }
            if (t.style[0] == "string") {
                t.style = ["es6import.path.string"];
            }
        });
        return this.convertTsTokensToAtomTokens(tsTokensWithRuleStack);
    };
    TypeScriptSemanticGrammar.prototype.getTsTokensForLine = function (line, finalLexState) {
        var _this = this;
        if (finalLexState === void 0) {
            finalLexState = 0;
        }
        var output = this.classifier.getClassificationsForLine(line, finalLexState, true);
        var ruleStack = [output.finalLexState];
        var classificationResults = output.entries;
        if (!classificationResults.length) return { tokens: [{ style: ["whitespace"], str: "" }], ruleStack: ruleStack };
        var totalLength = this.trailingWhiteSpaceLength;
        var tokens = utils.selectMany(classificationResults.map(function (info) {
            var tokenStartPosition = totalLength;
            var str = line.substr(tokenStartPosition, info.length);
            totalLength = totalLength + info.length;
            var style = getAtomStyleForToken(info, str);
            if (style == "comment.block") {
                var toret = [];
                var match;
                while (match = _this.todoRegex.exec(str)) {
                    var start = match.index;
                    var length = match[1].length;
                    var before = str.substr(0, start);
                    var actual = match[1];
                    toret.push({ style: ["comment.block"], str: before });
                    toret.push({ style: ["comment.block", "storage.type.class"], str: actual });
                    str = str.substr(start + length);
                }
                toret.push({ style: ["comment.block"], str: str });
                return toret;
            }
            return [{ style: [style], str: str }];
        }));
        return { tokens: tokens, ruleStack: ruleStack };
    };
    TypeScriptSemanticGrammar.prototype.getAtomTokensForLine = function (line, finalLexState) {
        var tsTokensWithRuleStack = this.getTsTokensForLine(line, finalLexState);
        return this.convertTsTokensToAtomTokens(tsTokensWithRuleStack);
    };
    TypeScriptSemanticGrammar.prototype.convertTsTokensToAtomTokens = function (tsTokensWithRuleStack) {
        var _this = this;
        var tokens = tsTokensWithRuleStack.tokens.map(function (info) {
            var atomToken = _this.registry.createToken(info.str, ["source.ts"].concat(info.style));
            return atomToken;
        });
        return { tokens: tokens, ruleStack: tsTokensWithRuleStack.ruleStack };
    };
    return TypeScriptSemanticGrammar;
})(AtomTSBaseGrammar);
exports.TypeScriptSemanticGrammar = TypeScriptSemanticGrammar;
function getAtomStyleForToken(token, str) {
    switch (token.classification) {
        case TokenClass.Punctuation:
            switch (str) {
                case "{":
                    return "punctuation.section.scope.begin.ts";
                case "}":
                    return "punctuation.section.scope.end.ts";
                case ")":
                    return "meta.brace.round.ts";
                case "(":
                    return "meta.brace.round.ts";
                case ";":
                    return "punctuation.terminator.statement.ts";
                default:
                    return "punctuation";
            }
        case TokenClass.Keyword:
            switch (str) {
                case "static":
                case "public":
                case "private":
                case "protected":
                case "export":
                case "get":
                case "set":
                    return "support.function";
                case "class":
                case "module":
                case "var":
                    return "storage.modifier";
                case "function":
                    return "storage.type.function";
                case "string":
                case "number":
                case "void":
                case "boolean":
                    return "keyword";
                default:
                    return "keyword";
            }
        case TokenClass.Operator:
            return "keyword.operator.js";
        case TokenClass.Comment:
            return "comment.block";
        case TokenClass.Whitespace:
            return "whitespace";
        case TokenClass.Identifier:
            return "identifier";
        case TokenClass.NumberLiteral:
            return "constant.numeric";
        case TokenClass.StringLiteral:
            return "string";
        case TokenClass.RegExpLiteral:
            return "constant.character";
        default:
            return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdHlwZXNjcmlwdEdyYW1tYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxJQUFJLFNBQVMsR0FBRyxBQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN4RCxTQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxhQUFTLEVBQUUsR0FBRztBQUFFLFlBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0tBQUU7QUFDdkMsS0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUEsQUFBQyxDQUFDO0NBQ3hGLENBQUM7QUFDRixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDckMsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztBQUMvQixNQUFNLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLHlDQUF5QyxDQUFDLENBQUM7QUFDekcsSUFBSSx5QkFBeUIsR0FBRyxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQy9DLGFBQVMsQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3QyxhQUFTLHlCQUF5QixDQUFDLFFBQVEsRUFBRTtBQUN6QyxjQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFR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QUssVUFBVSxDQUFDLFVBQVU7QUFDdEIsbUJBQU8sWUFBWSxDQUFDO0FBQUEsQUFDeEIsYUFBSyxVQUFVLENBQUMsYUFBYTtBQUN6QixtQkFBTyxrQkFBa0IsQ0FBQztBQUFBLEFBQzlCLGFBQUssVUFBVSxDQUFDLGFBQWE7QUFDekIsbUJBQU8sUUFBUSxDQUFDO0FBQUEsQUFDcEIsYUFBSyxVQUFVLENBQUMsYUFBYTtBQUN6QixtQkFBTyxvQkFBb0IsQ0FBQztBQUFBLEFBQ2hDO0FBQ0ksbUJBQU8sSUFBSSxDQUFDO0FBQUEsS0FDbkI7Q0FDSiIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9hdG9tL3R5cGVzY3JpcHRHcmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSGVscDpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hdG9tL2ZpcnN0LW1hdGUvXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmRlY2FtcHJlZG9uL2JyYWNrZXRzLXR5cGVzY3JpcHQvYmxvYi9tYXN0ZXIvc3JjL21haW4vbW9kZS50c1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3AtZS13L2xhbmd1YWdlLWphdmFzY3JpcHQtc2VtYW50aWMvYmxvYi9tYXN0ZXIvbGliL2phdmFzY3JpcHQtc2VtYW50aWMtZ3JhbW1hci5jb2ZmZWVcbi8vIFRPRE86IHVwZGF0ZSB0byBsYXRlc3QgOiBodHRwczovL2dpdGh1Yi5jb20vYXRvbS9hdG9tL3B1bGwvNjc1N1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9sYW5nL3V0aWxzJyk7XG52YXIgVG9rZW5DbGFzcyA9IHRzLlRva2VuQ2xhc3M7XG5nbG9iYWwuQXRvbVRTQmFzZUdyYW1tYXIgPSByZXF1aXJlKGF0b20uY29uZmlnLnJlc291cmNlUGF0aCArIFwiL25vZGVfbW9kdWxlcy9maXJzdC1tYXRlL2xpYi9ncmFtbWFyLmpzXCIpO1xudmFyIFR5cGVTY3JpcHRTZW1hbnRpY0dyYW1tYXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFR5cGVTY3JpcHRTZW1hbnRpY0dyYW1tYXIocmVnaXN0cnkpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgcmVnaXN0cnksIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVHlwZVNjcmlwdFwiLFxuICAgICAgICAgICAgc2NvcGVOYW1lOiBcInNvdXJjZS50c1wiLFxuICAgICAgICAgICAgcGF0dGVybnM6IHt9LFxuICAgICAgICAgICAgZmlsZVR5cGVzOiBbJ3RzJywgJ3RzdCddXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgICAgIHRoaXMudHJhaWxpbmdXaGl0ZVNwYWNlTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5jbGFzc2lmaWVyID0gdHMuY3JlYXRlQ2xhc3NpZmllcigpO1xuICAgICAgICB0aGlzLmZ1bGxUcmlwbGVTbGFzaFJlZmVyZW5jZVBhdGhSZWdFeCA9IC9eKFxcL1xcL1xcL1xccyo8cmVmZXJlbmNlXFxzK3BhdGhcXHMqPVxccyopKCd8XCIpKC4rPylcXDIuKj9cXC8+LztcbiAgICAgICAgdGhpcy5mdWxsVHJpcGxlU2xhc2hBTUROYW1lUmVnRXggPSAvXihcXC9cXC9cXC9cXHMqPGFtZC1tb2R1bGVcXHMrbmFtZVxccyo9XFxzKikoJ3xcIikoLis/KVxcMi4qP1xcLz4vO1xuICAgICAgICB0aGlzLmZ1bGxUcmlwbGVTbGFzaEFNRERlcGVuZGVuY3lQYXRoUmVnRXggPSAvXihcXC9cXC9cXC9cXHMqPGFtZC1kZXBlbmRlbmN5XFxzK3BhdGhcXHMqPVxccyopKCd8XCIpKC4rPylcXDIuKj9cXC8+LztcbiAgICAgICAgdGhpcy5pbXBvcnRSZXF1aXJlUmVnZXggPSAvXmltcG9ydFxccyooXFx3KilcXHMqPVxccypyZXF1aXJlXFwoKD86J3xcIikoXFxTKikoPzonfFwiKVxcLipcXCkvO1xuICAgICAgICB0aGlzLmVzNmltcG9ydFJlZ2V4ID0gL15pbXBvcnQuKmZyb20uKi87XG4gICAgICAgIHRoaXMudG9kb1JlZ2V4ID0gbmV3IFJlZ0V4cCgnKEJVR3xUT0RPfEZJWE1FfENIQU5HRUR8WFhYfElERUF8SEFDS3xOT1RFKScpO1xuICAgIH1cbiAgICBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLnByb3RvdHlwZS50b2tlbml6ZUxpbmUgPSBmdW5jdGlvbiAobGluZSwgcnVsZVN0YWNrLCBmaXJzdExpbmUpIHtcbiAgICAgICAgaWYgKGZpcnN0TGluZSA9PT0gdm9pZCAwKSB7IGZpcnN0TGluZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChmaXJzdExpbmVcbiAgICAgICAgICAgICYmIGxpbmUubGVuZ3RoID4gMVxuICAgICAgICAgICAgJiYgKGxpbmUuY2hhckNvZGVBdCgwKSA9PSAweEZGRkUgfHwgbGluZS5jaGFyQ29kZUF0KDApID09IDB4RkVGRikpIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdXaGl0ZVNwYWNlTGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdXaGl0ZVNwYWNlTGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmluYWxMZXhTdGF0ZSA9IGZpcnN0TGluZSA/IDBcbiAgICAgICAgICAgIDogcnVsZVN0YWNrICYmIHJ1bGVTdGFjay5sZW5ndGggPyBydWxlU3RhY2tbMF1cbiAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgIGlmIChmaW5hbExleFN0YXRlICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBdG9tVG9rZW5zRm9yTGluZShsaW5lLCBmaW5hbExleFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZS5tYXRjaCh0aGlzLmZ1bGxUcmlwbGVTbGFzaFJlZmVyZW5jZVBhdGhSZWdFeCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZ1bGxUcmlwbGVTbGFzaFJlZmVyZW5jZVBhdGhUb2tlbnNGb3JMaW5lKGxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxpbmUubWF0Y2godGhpcy5mdWxsVHJpcGxlU2xhc2hBTUROYW1lUmVnRXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGdWxsVHJpcGxlU2xhc2hBTURNb2R1bGVOYW1lVG9rZW5zRm9yTGluZShsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsaW5lLm1hdGNoKHRoaXMuZnVsbFRyaXBsZVNsYXNoQU1ERGVwZW5kZW5jeVBhdGhSZWdFeCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZ1bGxUcmlwbGVTbGFzaEFNRERlcGVuZGVuY3lQYXRoVG9rZW5zRm9yTGluZShsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsaW5lLm1hdGNoKHRoaXMuaW1wb3J0UmVxdWlyZVJlZ2V4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SW1wb3J0UmVxdWlyZVRva2Vuc0ZvckxpbmUobGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGluZS5tYXRjaCh0aGlzLmVzNmltcG9ydFJlZ2V4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RXM2aW1wb3J0VG9rZW5zRm9yTGluZShsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEF0b21Ub2tlbnNGb3JMaW5lKGxpbmUsIGZpbmFsTGV4U3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLnByb3RvdHlwZS5nZXRGdWxsVHJpcGxlU2xhc2hUb2tlbnNGb3JMaW5lID0gZnVuY3Rpb24gKGxpbmUsIG1hdGNoZXMsIGFyZ3VtZW50VHlwZSkge1xuICAgICAgICB2YXIgdHNUb2tlbnNXaXRoUnVsZVN0YWNrID0gdGhpcy5nZXRUc1Rva2Vuc0ZvckxpbmUobGluZSk7XG4gICAgICAgIGlmIChtYXRjaGVzWzNdKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IG1hdGNoZXNbM107XG4gICAgICAgICAgICBpZiAobGluZS5pbmRleE9mKCdcIicgKyBwYXRoICsgJ1wiJykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gJ1wiJyArIHBhdGggKyAnXCInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IFwiJ1wiICsgcGF0aCArIFwiJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSBsaW5lLmluZGV4T2YocGF0aCk7XG4gICAgICAgICAgICB2YXIgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgcGF0aC5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgYXRvbVRva2VucyA9IFtdO1xuICAgICAgICAgICAgYXRvbVRva2Vucy5wdXNoKHRoaXMucmVnaXN0cnkuY3JlYXRlVG9rZW4obGluZS5zdWJzdHIoMCwgc3RhcnRQb3NpdGlvbiksIFsnc291cmNlLnRzJywgJ2tleXdvcmQnXSkpO1xuICAgICAgICAgICAgYXRvbVRva2Vucy5wdXNoKHRoaXMucmVnaXN0cnkuY3JlYXRlVG9rZW4obGluZS5zdWJzdHIoc3RhcnRQb3NpdGlvbiwgcGF0aC5sZW5ndGgpLCBbJ3NvdXJjZS50cycsIGFyZ3VtZW50VHlwZV0pKTtcbiAgICAgICAgICAgIGF0b21Ub2tlbnMucHVzaCh0aGlzLnJlZ2lzdHJ5LmNyZWF0ZVRva2VuKGxpbmUuc3Vic3RyKGVuZFBvc2l0aW9uLCBsaW5lLmxlbmd0aCAtIGVuZFBvc2l0aW9uKSwgWydzb3VyY2UudHMnLCAna2V5d29yZCddKSk7XG4gICAgICAgICAgICByZXR1cm4geyB0b2tlbnM6IGF0b21Ub2tlbnMsIHJ1bGVTdGFjazogW10gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUc1Rva2Vuc1RvQXRvbVRva2Vucyh0c1Rva2Vuc1dpdGhSdWxlU3RhY2spO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLnByb3RvdHlwZS5nZXRGdWxsVHJpcGxlU2xhc2hSZWZlcmVuY2VQYXRoVG9rZW5zRm9yTGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHZhciB0c1Rva2Vuc1dpdGhSdWxlU3RhY2sgPSB0aGlzLmdldFRzVG9rZW5zRm9yTGluZShsaW5lKTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBsaW5lLm1hdGNoKHRoaXMuZnVsbFRyaXBsZVNsYXNoUmVmZXJlbmNlUGF0aFJlZ0V4KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnVsbFRyaXBsZVNsYXNoVG9rZW5zRm9yTGluZShsaW5lLCBtYXRjaGVzLCAncmVmZXJlbmNlLnBhdGguc3RyaW5nJyk7XG4gICAgfTtcbiAgICBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLnByb3RvdHlwZS5nZXRGdWxsVHJpcGxlU2xhc2hBTURNb2R1bGVOYW1lVG9rZW5zRm9yTGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHZhciB0c1Rva2Vuc1dpdGhSdWxlU3RhY2sgPSB0aGlzLmdldFRzVG9rZW5zRm9yTGluZShsaW5lKTtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBsaW5lLm1hdGNoKHRoaXMuZnVsbFRyaXBsZVNsYXNoQU1ETmFtZVJlZ0V4KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnVsbFRyaXBsZVNsYXNoVG9rZW5zRm9yTGluZShsaW5lLCBtYXRjaGVzLCAnbW9kdWxlLm5hbWUuc3RyaW5nJyk7XG4gICAgfTtcbiAgICBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLnByb3RvdHlwZS5nZXRGdWxsVHJpcGxlU2xhc2hBTUREZXBlbmRlbmN5UGF0aFRva2Vuc0ZvckxpbmUgPSBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICB2YXIgdHNUb2tlbnNXaXRoUnVsZVN0YWNrID0gdGhpcy5nZXRUc1Rva2Vuc0ZvckxpbmUobGluZSk7XG4gICAgICAgIHZhciBtYXRjaGVzID0gbGluZS5tYXRjaCh0aGlzLmZ1bGxUcmlwbGVTbGFzaEFNRERlcGVuZGVuY3lQYXRoUmVnRXgpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRGdWxsVHJpcGxlU2xhc2hUb2tlbnNGb3JMaW5lKGxpbmUsIG1hdGNoZXMsICdkZXBlbmRlbmN5LnBhdGguc3RyaW5nJyk7XG4gICAgfTtcbiAgICBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyLnByb3RvdHlwZS5nZXRJbXBvcnRSZXF1aXJlVG9rZW5zRm9yTGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHZhciB0c1Rva2Vuc1dpdGhSdWxlU3RhY2sgPSB0aGlzLmdldFRzVG9rZW5zRm9yTGluZShsaW5lKTtcbiAgICAgICAgdHNUb2tlbnNXaXRoUnVsZVN0YWNrLnRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpZiAodC5zdHlsZVswXSA9PSBcImlkZW50aWZpZXJcIikge1xuICAgICAgICAgICAgICAgIHQuc3R5bGUgPSBbXCJyZXF1aXJlLmlkZW50aWZpZXJcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodC5zdHlsZVswXSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdC5zdHlsZSA9IFtcInJlcXVpcmUucGF0aC5zdHJpbmdcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VHNUb2tlbnNUb0F0b21Ub2tlbnModHNUb2tlbnNXaXRoUnVsZVN0YWNrKTtcbiAgICB9O1xuICAgIFR5cGVTY3JpcHRTZW1hbnRpY0dyYW1tYXIucHJvdG90eXBlLmdldEVzNmltcG9ydFRva2Vuc0ZvckxpbmUgPSBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICB2YXIgdHNUb2tlbnNXaXRoUnVsZVN0YWNrID0gdGhpcy5nZXRUc1Rva2Vuc0ZvckxpbmUobGluZSk7XG4gICAgICAgIHRzVG9rZW5zV2l0aFJ1bGVTdGFjay50b2tlbnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgaWYgKHQuc3R5bGVbMF0gPT0gXCJpZGVudGlmaWVyXCIpIHtcbiAgICAgICAgICAgICAgICB0LnN0eWxlID0gW1wiZXM2aW1wb3J0LmlkZW50aWZpZXJcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodC5zdHlsZVswXSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdC5zdHlsZSA9IFtcImVzNmltcG9ydC5wYXRoLnN0cmluZ1wiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUc1Rva2Vuc1RvQXRvbVRva2Vucyh0c1Rva2Vuc1dpdGhSdWxlU3RhY2spO1xuICAgIH07XG4gICAgVHlwZVNjcmlwdFNlbWFudGljR3JhbW1hci5wcm90b3R5cGUuZ2V0VHNUb2tlbnNGb3JMaW5lID0gZnVuY3Rpb24gKGxpbmUsIGZpbmFsTGV4U3RhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGZpbmFsTGV4U3RhdGUgPT09IHZvaWQgMCkgeyBmaW5hbExleFN0YXRlID0gMDsgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5jbGFzc2lmaWVyLmdldENsYXNzaWZpY2F0aW9uc0ZvckxpbmUobGluZSwgZmluYWxMZXhTdGF0ZSwgdHJ1ZSk7XG4gICAgICAgIHZhciBydWxlU3RhY2sgPSBbb3V0cHV0LmZpbmFsTGV4U3RhdGVdO1xuICAgICAgICB2YXIgY2xhc3NpZmljYXRpb25SZXN1bHRzID0gb3V0cHV0LmVudHJpZXM7XG4gICAgICAgIGlmICghY2xhc3NpZmljYXRpb25SZXN1bHRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB7IHRva2VuczogW3sgc3R5bGU6IFsnd2hpdGVzcGFjZSddLCBzdHI6ICcnIH1dLCBydWxlU3RhY2s6IHJ1bGVTdGFjayB9O1xuICAgICAgICB2YXIgdG90YWxMZW5ndGggPSB0aGlzLnRyYWlsaW5nV2hpdGVTcGFjZUxlbmd0aDtcbiAgICAgICAgdmFyIHRva2VucyA9IHV0aWxzLnNlbGVjdE1hbnkoY2xhc3NpZmljYXRpb25SZXN1bHRzLm1hcChmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgdmFyIHRva2VuU3RhcnRQb3NpdGlvbiA9IHRvdGFsTGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHN0ciA9IGxpbmUuc3Vic3RyKHRva2VuU3RhcnRQb3NpdGlvbiwgaW5mby5sZW5ndGgpO1xuICAgICAgICAgICAgdG90YWxMZW5ndGggPSB0b3RhbExlbmd0aCArIGluZm8ubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0QXRvbVN0eWxlRm9yVG9rZW4oaW5mbywgc3RyKTtcbiAgICAgICAgICAgIGlmIChzdHlsZSA9PSAnY29tbWVudC5ibG9jaycpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9yZXQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gX3RoaXMudG9kb1JlZ2V4LmV4ZWMoc3RyKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG1hdGNoWzFdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlZm9yZSA9IHN0ci5zdWJzdHIoMCwgc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0dWFsID0gbWF0Y2hbMV07XG4gICAgICAgICAgICAgICAgICAgIHRvcmV0LnB1c2goeyBzdHlsZTogWydjb21tZW50LmJsb2NrJ10sIHN0cjogYmVmb3JlIH0pO1xuICAgICAgICAgICAgICAgICAgICB0b3JldC5wdXNoKHsgc3R5bGU6IFsnY29tbWVudC5ibG9jaycsICdzdG9yYWdlLnR5cGUuY2xhc3MnXSwgc3RyOiBhY3R1YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b3JldC5wdXNoKHsgc3R5bGU6IFsnY29tbWVudC5ibG9jayddLCBzdHI6IHN0ciB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9yZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW3sgc3R5bGU6IFtzdHlsZV0sIHN0cjogc3RyIH1dO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB7IHRva2VuczogdG9rZW5zLCBydWxlU3RhY2s6IHJ1bGVTdGFjayB9O1xuICAgIH07XG4gICAgVHlwZVNjcmlwdFNlbWFudGljR3JhbW1hci5wcm90b3R5cGUuZ2V0QXRvbVRva2Vuc0ZvckxpbmUgPSBmdW5jdGlvbiAobGluZSwgZmluYWxMZXhTdGF0ZSkge1xuICAgICAgICB2YXIgdHNUb2tlbnNXaXRoUnVsZVN0YWNrID0gdGhpcy5nZXRUc1Rva2Vuc0ZvckxpbmUobGluZSwgZmluYWxMZXhTdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUc1Rva2Vuc1RvQXRvbVRva2Vucyh0c1Rva2Vuc1dpdGhSdWxlU3RhY2spO1xuICAgIH07XG4gICAgVHlwZVNjcmlwdFNlbWFudGljR3JhbW1hci5wcm90b3R5cGUuY29udmVydFRzVG9rZW5zVG9BdG9tVG9rZW5zID0gZnVuY3Rpb24gKHRzVG9rZW5zV2l0aFJ1bGVTdGFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdG9rZW5zID0gdHNUb2tlbnNXaXRoUnVsZVN0YWNrLnRva2Vucy5tYXAoZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICAgIHZhciBhdG9tVG9rZW4gPSBfdGhpcy5yZWdpc3RyeS5jcmVhdGVUb2tlbihpbmZvLnN0ciwgW1wic291cmNlLnRzXCJdLmNvbmNhdChpbmZvLnN0eWxlKSk7XG4gICAgICAgICAgICByZXR1cm4gYXRvbVRva2VuO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgdG9rZW5zOiB0b2tlbnMsIHJ1bGVTdGFjazogdHNUb2tlbnNXaXRoUnVsZVN0YWNrLnJ1bGVTdGFjayB9O1xuICAgIH07XG4gICAgcmV0dXJuIFR5cGVTY3JpcHRTZW1hbnRpY0dyYW1tYXI7XG59KShBdG9tVFNCYXNlR3JhbW1hcik7XG5leHBvcnRzLlR5cGVTY3JpcHRTZW1hbnRpY0dyYW1tYXIgPSBUeXBlU2NyaXB0U2VtYW50aWNHcmFtbWFyO1xuZnVuY3Rpb24gZ2V0QXRvbVN0eWxlRm9yVG9rZW4odG9rZW4sIHN0cikge1xuICAgIHN3aXRjaCAodG9rZW4uY2xhc3NpZmljYXRpb24pIHtcbiAgICAgICAgY2FzZSBUb2tlbkNsYXNzLlB1bmN0dWF0aW9uOlxuICAgICAgICAgICAgc3dpdGNoIChzdHIpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicHVuY3R1YXRpb24uc2VjdGlvbi5zY29wZS5iZWdpbi50c1wiO1xuICAgICAgICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJwdW5jdHVhdGlvbi5zZWN0aW9uLnNjb3BlLmVuZC50c1wiO1xuICAgICAgICAgICAgICAgIGNhc2UgJyknOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtZXRhLmJyYWNlLnJvdW5kLnRzXCI7XG4gICAgICAgICAgICAgICAgY2FzZSAnKCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm1ldGEuYnJhY2Uucm91bmQudHNcIjtcbiAgICAgICAgICAgICAgICBjYXNlICc7JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicHVuY3R1YXRpb24udGVybWluYXRvci5zdGF0ZW1lbnQudHNcIjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJwdW5jdHVhdGlvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIFRva2VuQ2xhc3MuS2V5d29yZDpcbiAgICAgICAgICAgIHN3aXRjaCAoc3RyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RhdGljJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwdWJsaWMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3ByaXZhdGUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb3RlY3RlZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhwb3J0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdnZXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NldCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnc3VwcG9ydC5mdW5jdGlvbic7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xhc3MnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vZHVsZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndmFyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdzdG9yYWdlLm1vZGlmaWVyJztcbiAgICAgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnc3RvcmFnZS50eXBlLmZ1bmN0aW9uJztcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgY2FzZSAndm9pZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAna2V5d29yZCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdrZXl3b3JkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBUb2tlbkNsYXNzLk9wZXJhdG9yOlxuICAgICAgICAgICAgcmV0dXJuICdrZXl3b3JkLm9wZXJhdG9yLmpzJztcbiAgICAgICAgY2FzZSBUb2tlbkNsYXNzLkNvbW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1lbnQuYmxvY2snO1xuICAgICAgICBjYXNlIFRva2VuQ2xhc3MuV2hpdGVzcGFjZTpcbiAgICAgICAgICAgIHJldHVybiAnd2hpdGVzcGFjZSc7XG4gICAgICAgIGNhc2UgVG9rZW5DbGFzcy5JZGVudGlmaWVyOlxuICAgICAgICAgICAgcmV0dXJuICdpZGVudGlmaWVyJztcbiAgICAgICAgY2FzZSBUb2tlbkNsYXNzLk51bWJlckxpdGVyYWw6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbnN0YW50Lm51bWVyaWMnO1xuICAgICAgICBjYXNlIFRva2VuQ2xhc3MuU3RyaW5nTGl0ZXJhbDpcbiAgICAgICAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICAgICAgY2FzZSBUb2tlbkNsYXNzLlJlZ0V4cExpdGVyYWw6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbnN0YW50LmNoYXJhY3Rlcic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXX0=