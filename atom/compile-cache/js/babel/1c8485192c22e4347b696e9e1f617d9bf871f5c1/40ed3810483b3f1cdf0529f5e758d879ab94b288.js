/// Not useful for user input validation
// But great for simple config validation
// works only by "n" valid options
exports.types = {
    string: 'string',
    boolean: 'boolean',
    number: 'number'
};
var SimpleValidator = (function () {
    function SimpleValidator(validationInfo) {
        var _this = this;
        this.validationInfo = validationInfo;
        this.potentialLowerCaseMatch = {};
        Object.keys(validationInfo).forEach(function (k) {
            return _this.potentialLowerCaseMatch[k.toLowerCase()] = k;
        });
    }
    SimpleValidator.prototype.validate = function (config) {
        var _this = this;
        var keys = Object.keys(config);
        var errors = { invalidValues: [], extraKeys: [], errorMessage: '' };
        keys.forEach(function (k) {
            if (!_this.validationInfo[k]) {
                if (_this.potentialLowerCaseMatch[k]) {
                    errors.extraKeys.push('Key: \'' + k + '\' is a potential lower case match for \'' + _this.potentialLowerCaseMatch[k] + '\'. Fix the casing.');
                } else {
                    errors.extraKeys.push('Unknown Option: ' + k);
                }
            } else {
                var validationInfo = _this.validationInfo[k];
                var value = config[k];
                if (validationInfo.validValues && validationInfo.validValues.length) {
                    var validValues = validationInfo.validValues;
                    if (!validValues.some(function (valid) {
                        return valid === value;
                    })) {
                        errors.invalidValues.push('Key: \'' + k + '\' has an invalid value: ' + value);
                    }
                }
                if (validationInfo.type && typeof value !== validationInfo.type) {
                    errors.invalidValues.push('Key: \'' + k + '\' has an invalid type: ' + typeof value);
                }
            }
        });
        var total = errors.invalidValues.concat(errors.extraKeys);
        if (total.length) {
            errors.errorMessage = total.join('\n');
        }
        return errors;
    };
    return SimpleValidator;
})();
exports.SimpleValidator = SimpleValidator;
function createMap(arr) {
    return arr.reduce(function (result, key) {
        result[key] = true;
        return result;
    }, {});
}
exports.createMap = createMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL3RzY29uZmlnL3NpbXBsZVZhbGlkYXRvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxPQUFPLENBQUMsS0FBSyxHQUFHO0FBQ1osVUFBTSxFQUFFLFFBQVE7QUFDaEIsV0FBTyxFQUFFLFNBQVM7QUFDbEIsVUFBTSxFQUFFLFFBQVE7Q0FDbkIsQ0FBQztBQUNGLElBQUksZUFBZSxHQUFHLENBQUMsWUFBWTtBQUMvQixhQUFTLGVBQWUsQ0FBQyxjQUFjLEVBQUU7QUFDckMsWUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQ3JDLFlBQUksQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFDbEMsY0FBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFBRSxtQkFBTyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQUUsQ0FBQyxDQUFDO0tBQ3BIO0FBQ0QsbUJBQWUsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVUsTUFBTSxFQUFFO0FBQ25ELFlBQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQixZQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLFlBQUksTUFBTSxHQUFHLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUNwRSxZQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ3RCLGdCQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUMxQixvQkFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDbEMsMEJBQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVEsR0FBRyxDQUFDLEdBQUcsMkNBQXlDLEdBQUcsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxHQUFHLHFCQUFvQixDQUFDLENBQUM7aUJBQzdJLE1BQ0k7QUFDRCwwQkFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2pEO2FBQ0osTUFDSTtBQUNELG9CQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLG9CQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsb0JBQUksY0FBYyxDQUFDLFdBQVcsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtBQUNqRSx3QkFBSSxXQUFXLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztBQUM3Qyx3QkFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFBRSwrQkFBTyxLQUFLLEtBQUssS0FBSyxDQUFDO3FCQUFFLENBQUMsRUFBRTtBQUNqRSw4QkFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUSxHQUFHLENBQUMsR0FBRywyQkFBMEIsR0FBRyxLQUFLLENBQUMsQ0FBQztxQkFDaEY7aUJBQ0o7QUFDRCxvQkFBSSxjQUFjLENBQUMsSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7QUFDN0QsMEJBQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVEsR0FBRyxDQUFDLEdBQUcsMEJBQXlCLEdBQUcsT0FBTyxLQUFLLENBQUMsQ0FBQztpQkFDdEY7YUFDSjtTQUNKLENBQUMsQ0FBQztBQUNILFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxRCxZQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDZCxrQkFBTSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFDO0FBQ0QsZUFBTyxNQUFNLENBQUM7S0FDakIsQ0FBQztBQUNGLFdBQU8sZUFBZSxDQUFDO0NBQzFCLENBQUEsRUFBRyxDQUFDO0FBQ0wsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDMUMsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFO0FBQ3BCLFdBQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDckMsY0FBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNuQixlQUFPLE1BQU0sQ0FBQztLQUNqQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ1Y7QUFDRCxPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi90c2NvbmZpZy9zaW1wbGVWYWxpZGF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gTm90IHVzZWZ1bCBmb3IgdXNlciBpbnB1dCB2YWxpZGF0aW9uXG4vLyBCdXQgZ3JlYXQgZm9yIHNpbXBsZSBjb25maWcgdmFsaWRhdGlvbiBcbi8vIHdvcmtzIG9ubHkgYnkgXCJuXCIgdmFsaWQgb3B0aW9uc1xuZXhwb3J0cy50eXBlcyA9IHtcbiAgICBzdHJpbmc6ICdzdHJpbmcnLFxuICAgIGJvb2xlYW46ICdib29sZWFuJyxcbiAgICBudW1iZXI6ICdudW1iZXInXG59O1xudmFyIFNpbXBsZVZhbGlkYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2ltcGxlVmFsaWRhdG9yKHZhbGlkYXRpb25JbmZvKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbkluZm8gPSB2YWxpZGF0aW9uSW5mbztcbiAgICAgICAgdGhpcy5wb3RlbnRpYWxMb3dlckNhc2VNYXRjaCA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyh2YWxpZGF0aW9uSW5mbykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyByZXR1cm4gX3RoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2hbay50b0xvd2VyQ2FzZSgpXSA9IGs7IH0pO1xuICAgIH1cbiAgICBTaW1wbGVWYWxpZGF0b3IucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7XG4gICAgICAgIHZhciBlcnJvcnMgPSB7IGludmFsaWRWYWx1ZXM6IFtdLCBleHRyYUtleXM6IFtdLCBlcnJvck1lc3NhZ2U6ICcnIH07XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy52YWxpZGF0aW9uSW5mb1trXSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wb3RlbnRpYWxMb3dlckNhc2VNYXRjaFtrXSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMuZXh0cmFLZXlzLnB1c2goXCJLZXk6ICdcIiArIGsgKyBcIicgaXMgYSBwb3RlbnRpYWwgbG93ZXIgY2FzZSBtYXRjaCBmb3IgJ1wiICsgX3RoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2hba10gKyBcIicuIEZpeCB0aGUgY2FzaW5nLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5leHRyYUtleXMucHVzaChcIlVua25vd24gT3B0aW9uOiBcIiArIGspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB2YWxpZGF0aW9uSW5mbyA9IF90aGlzLnZhbGlkYXRpb25JbmZvW2tdO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbmZpZ1trXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkluZm8udmFsaWRWYWx1ZXMgJiYgdmFsaWRhdGlvbkluZm8udmFsaWRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZFZhbHVlcyA9IHZhbGlkYXRpb25JbmZvLnZhbGlkVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkVmFsdWVzLnNvbWUoZnVuY3Rpb24gKHZhbGlkKSB7IHJldHVybiB2YWxpZCA9PT0gdmFsdWU7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuaW52YWxpZFZhbHVlcy5wdXNoKFwiS2V5OiAnXCIgKyBrICsgXCInIGhhcyBhbiBpbnZhbGlkIHZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkluZm8udHlwZSAmJiB0eXBlb2YgdmFsdWUgIT09IHZhbGlkYXRpb25JbmZvLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmludmFsaWRWYWx1ZXMucHVzaChcIktleTogJ1wiICsgayArIFwiJyBoYXMgYW4gaW52YWxpZCB0eXBlOiBcIiArIHR5cGVvZiB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHRvdGFsID0gZXJyb3JzLmludmFsaWRWYWx1ZXMuY29uY2F0KGVycm9ycy5leHRyYUtleXMpO1xuICAgICAgICBpZiAodG90YWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBlcnJvcnMuZXJyb3JNZXNzYWdlID0gdG90YWwuam9pbihcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH07XG4gICAgcmV0dXJuIFNpbXBsZVZhbGlkYXRvcjtcbn0pKCk7XG5leHBvcnRzLlNpbXBsZVZhbGlkYXRvciA9IFNpbXBsZVZhbGlkYXRvcjtcbmZ1bmN0aW9uIGNyZWF0ZU1hcChhcnIpIHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KTtcbn1cbmV4cG9ydHMuY3JlYXRlTWFwID0gY3JlYXRlTWFwO1xuIl19