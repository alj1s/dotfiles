function formatDocument(proj, filePath) {
    var textChanges = proj.languageService.getFormattingEditsForDocument(filePath, proj.projectFile.project.formatCodeOptions);
    var edits = textChanges.map(function (change) {
        return {
            start: proj.languageServiceHost.getPositionFromIndex(filePath, change.span.start),
            end: proj.languageServiceHost.getPositionFromIndex(filePath, change.span.start + change.span.length),
            newText: change.newText
        };
    });
    return edits;
}
exports.formatDocument = formatDocument;
function formatDocumentRange(proj, filePath, start, end) {
    var st = proj.languageServiceHost.getIndexFromPosition(filePath, start);
    var ed = proj.languageServiceHost.getIndexFromPosition(filePath, end);
    var textChanges = proj.languageService.getFormattingEditsForRange(filePath, st, ed, proj.projectFile.project.formatCodeOptions);
    var edits = textChanges.map(function (change) {
        return {
            start: proj.languageServiceHost.getPositionFromIndex(filePath, change.span.start),
            end: proj.languageServiceHost.getPositionFromIndex(filePath, change.span.start + change.span.length),
            newText: change.newText
        };
    });
    return edits;
}
exports.formatDocumentRange = formatDocumentRange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvbW9kdWxlcy9mb3JtYXR0aW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDcEMsUUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyw2QkFBNkIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMzSCxRQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQzFDLGVBQU87QUFDSCxpQkFBSyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDakYsZUFBRyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDcEcsbUJBQU8sRUFBRSxNQUFNLENBQUMsT0FBTztTQUMxQixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0FBQ0gsV0FBTyxLQUFLLENBQUM7Q0FDaEI7QUFDRCxPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUN4QyxTQUFTLG1CQUFtQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtBQUNyRCxRQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hFLFFBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEUsUUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2hJLFFBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxNQUFNLEVBQUU7QUFDMUMsZUFBTztBQUNILGlCQUFLLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUNqRixlQUFHLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNwRyxtQkFBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1NBQzFCLENBQUM7S0FDTCxDQUFDLENBQUM7QUFDSCxXQUFPLEtBQUssQ0FBQztDQUNoQjtBQUNELE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9sYW5nL21vZHVsZXMvZm9ybWF0dGluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGZvcm1hdERvY3VtZW50KHByb2osIGZpbGVQYXRoKSB7XG4gICAgdmFyIHRleHRDaGFuZ2VzID0gcHJvai5sYW5ndWFnZVNlcnZpY2UuZ2V0Rm9ybWF0dGluZ0VkaXRzRm9yRG9jdW1lbnQoZmlsZVBhdGgsIHByb2oucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucyk7XG4gICAgdmFyIGVkaXRzID0gdGV4dENoYW5nZXMubWFwKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9qLmxhbmd1YWdlU2VydmljZUhvc3QuZ2V0UG9zaXRpb25Gcm9tSW5kZXgoZmlsZVBhdGgsIGNoYW5nZS5zcGFuLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogcHJvai5sYW5ndWFnZVNlcnZpY2VIb3N0LmdldFBvc2l0aW9uRnJvbUluZGV4KGZpbGVQYXRoLCBjaGFuZ2Uuc3Bhbi5zdGFydCArIGNoYW5nZS5zcGFuLmxlbmd0aCksXG4gICAgICAgICAgICBuZXdUZXh0OiBjaGFuZ2UubmV3VGV4dFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBlZGl0cztcbn1cbmV4cG9ydHMuZm9ybWF0RG9jdW1lbnQgPSBmb3JtYXREb2N1bWVudDtcbmZ1bmN0aW9uIGZvcm1hdERvY3VtZW50UmFuZ2UocHJvaiwgZmlsZVBhdGgsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgc3QgPSBwcm9qLmxhbmd1YWdlU2VydmljZUhvc3QuZ2V0SW5kZXhGcm9tUG9zaXRpb24oZmlsZVBhdGgsIHN0YXJ0KTtcbiAgICB2YXIgZWQgPSBwcm9qLmxhbmd1YWdlU2VydmljZUhvc3QuZ2V0SW5kZXhGcm9tUG9zaXRpb24oZmlsZVBhdGgsIGVuZCk7XG4gICAgdmFyIHRleHRDaGFuZ2VzID0gcHJvai5sYW5ndWFnZVNlcnZpY2UuZ2V0Rm9ybWF0dGluZ0VkaXRzRm9yUmFuZ2UoZmlsZVBhdGgsIHN0LCBlZCwgcHJvai5wcm9qZWN0RmlsZS5wcm9qZWN0LmZvcm1hdENvZGVPcHRpb25zKTtcbiAgICB2YXIgZWRpdHMgPSB0ZXh0Q2hhbmdlcy5tYXAoZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IHByb2oubGFuZ3VhZ2VTZXJ2aWNlSG9zdC5nZXRQb3NpdGlvbkZyb21JbmRleChmaWxlUGF0aCwgY2hhbmdlLnNwYW4uc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBwcm9qLmxhbmd1YWdlU2VydmljZUhvc3QuZ2V0UG9zaXRpb25Gcm9tSW5kZXgoZmlsZVBhdGgsIGNoYW5nZS5zcGFuLnN0YXJ0ICsgY2hhbmdlLnNwYW4ubGVuZ3RoKSxcbiAgICAgICAgICAgIG5ld1RleHQ6IGNoYW5nZS5uZXdUZXh0XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGVkaXRzO1xufVxuZXhwb3J0cy5mb3JtYXREb2N1bWVudFJhbmdlID0gZm9ybWF0RG9jdW1lbnRSYW5nZTtcbiJdfQ==