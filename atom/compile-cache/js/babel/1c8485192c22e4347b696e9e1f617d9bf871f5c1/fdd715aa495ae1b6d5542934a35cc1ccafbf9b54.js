var QuotesToQuotes = (function () {
    function QuotesToQuotes() {
        this.key = QuotesToQuotes.name;
    }
    QuotesToQuotes.prototype.canProvideFix = function (info) {
        if (info.positionNode.kind === 8) {
            if (info.positionNode.getText().trim()[0] === "'") {
                return { display: "Convert ' to \"" };
            }
            if (info.positionNode.getText().trim()[0] === "\"") {
                return { display: "Convert \" to '" };
            }
        }
    };
    QuotesToQuotes.prototype.provideFix = function (info) {
        var text = info.positionNode.getText();
        var quoteCharacter = text.trim()[0];
        var nextQuoteCharacter = quoteCharacter === "'" ? "\"" : "'";
        var quoteRegex = new RegExp(quoteCharacter, "g");
        var escapedQuoteRegex = new RegExp("\\\\" + quoteCharacter, "g");
        var nextQuoteRegex = new RegExp(nextQuoteCharacter, "g");
        var newText = text.replace(nextQuoteRegex, "\\" + nextQuoteCharacter).replace(escapedQuoteRegex, quoteCharacter);
        newText = nextQuoteCharacter + newText.substr(1, newText.length - 2) + nextQuoteCharacter;
        var refactoring = {
            span: {
                start: info.positionNode.getStart(),
                length: info.positionNode.end - info.positionNode.getStart()
            },
            newText: newText,
            filePath: info.filePath
        };
        return [refactoring];
    };
    return QuotesToQuotes;
})();
exports.QuotesToQuotes = QuotesToQuotes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL3F1b3Rlc1RvUXVvdGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksY0FBYyxHQUFHLENBQUMsWUFBWTtBQUM5QixhQUFTLGNBQWMsR0FBRztBQUN0QixZQUFJLENBQUMsR0FBRyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7S0FDbEM7QUFDRCxrQkFBYyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsVUFBVSxJQUFJLEVBQUU7QUFDckQsWUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7QUFDOUIsZ0JBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7QUFDL0MsdUJBQU8sRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQzthQUN6QztBQUNELGdCQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO0FBQ2hELHVCQUFPLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUM7YUFDekM7U0FDSjtLQUNKLENBQUM7QUFDRixrQkFBYyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUU7QUFDbEQsWUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QyxZQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsWUFBSSxrQkFBa0IsR0FBRyxjQUFjLEtBQUssR0FBRyxHQUFHLElBQUcsR0FBRyxHQUFHLENBQUM7QUFDNUQsWUFBSSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELFlBQUksaUJBQWlCLEdBQUcsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqRSxZQUFJLGNBQWMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN6RCxZQUFJLE9BQU8sR0FBRyxJQUFJLENBQ2IsT0FBTyxDQUFDLGNBQWMsRUFBRSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsQ0FDbEQsT0FBTyxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ2hELGVBQU8sR0FBRyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO0FBQzFGLFlBQUksV0FBVyxHQUFHO0FBQ2QsZ0JBQUksRUFBRTtBQUNGLHFCQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7QUFDbkMsc0JBQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTthQUMvRDtBQUNELG1CQUFPLEVBQUUsT0FBTztBQUNoQixvQkFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQzFCLENBQUM7QUFDRixlQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDeEIsQ0FBQztBQUNGLFdBQU8sY0FBYyxDQUFDO0NBQ3pCLENBQUEsRUFBRyxDQUFDO0FBQ0wsT0FBTyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vbGFuZy9maXhteXRzL3F1aWNrRml4ZXMvcXVvdGVzVG9RdW90ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUXVvdGVzVG9RdW90ZXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1b3Rlc1RvUXVvdGVzKCkge1xuICAgICAgICB0aGlzLmtleSA9IFF1b3Rlc1RvUXVvdGVzLm5hbWU7XG4gICAgfVxuICAgIFF1b3Rlc1RvUXVvdGVzLnByb3RvdHlwZS5jYW5Qcm92aWRlRml4ID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgaWYgKGluZm8ucG9zaXRpb25Ob2RlLmtpbmQgPT09IDgpIHtcbiAgICAgICAgICAgIGlmIChpbmZvLnBvc2l0aW9uTm9kZS5nZXRUZXh0KCkudHJpbSgpWzBdID09PSBcIidcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRpc3BsYXk6IFwiQ29udmVydCAnIHRvIFxcXCJcIiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZm8ucG9zaXRpb25Ob2RlLmdldFRleHQoKS50cmltKClbMF0gPT09IFwiXFxcIlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGlzcGxheTogXCJDb252ZXJ0IFxcXCIgdG8gJ1wiIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1b3Rlc1RvUXVvdGVzLnByb3RvdHlwZS5wcm92aWRlRml4ID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgdmFyIHRleHQgPSBpbmZvLnBvc2l0aW9uTm9kZS5nZXRUZXh0KCk7XG4gICAgICAgIHZhciBxdW90ZUNoYXJhY3RlciA9IHRleHQudHJpbSgpWzBdO1xuICAgICAgICB2YXIgbmV4dFF1b3RlQ2hhcmFjdGVyID0gcXVvdGVDaGFyYWN0ZXIgPT09IFwiJ1wiID8gJ1wiJyA6IFwiJ1wiO1xuICAgICAgICB2YXIgcXVvdGVSZWdleCA9IG5ldyBSZWdFeHAocXVvdGVDaGFyYWN0ZXIsICdnJyk7XG4gICAgICAgIHZhciBlc2NhcGVkUXVvdGVSZWdleCA9IG5ldyBSZWdFeHAoXCJcXFxcXFxcXFwiICsgcXVvdGVDaGFyYWN0ZXIsICdnJyk7XG4gICAgICAgIHZhciBuZXh0UXVvdGVSZWdleCA9IG5ldyBSZWdFeHAobmV4dFF1b3RlQ2hhcmFjdGVyLCAnZycpO1xuICAgICAgICB2YXIgbmV3VGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKG5leHRRdW90ZVJlZ2V4LCBcIlxcXFxcIiArIG5leHRRdW90ZUNoYXJhY3RlcilcbiAgICAgICAgICAgIC5yZXBsYWNlKGVzY2FwZWRRdW90ZVJlZ2V4LCBxdW90ZUNoYXJhY3Rlcik7XG4gICAgICAgIG5ld1RleHQgPSBuZXh0UXVvdGVDaGFyYWN0ZXIgKyBuZXdUZXh0LnN1YnN0cigxLCBuZXdUZXh0Lmxlbmd0aCAtIDIpICsgbmV4dFF1b3RlQ2hhcmFjdGVyO1xuICAgICAgICB2YXIgcmVmYWN0b3JpbmcgPSB7XG4gICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGluZm8ucG9zaXRpb25Ob2RlLmdldFN0YXJ0KCksXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBpbmZvLnBvc2l0aW9uTm9kZS5lbmQgLSBpbmZvLnBvc2l0aW9uTm9kZS5nZXRTdGFydCgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV3VGV4dDogbmV3VGV4dCxcbiAgICAgICAgICAgIGZpbGVQYXRoOiBpbmZvLmZpbGVQYXRoXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBbcmVmYWN0b3JpbmddO1xuICAgIH07XG4gICAgcmV0dXJuIFF1b3Rlc1RvUXVvdGVzO1xufSkoKTtcbmV4cG9ydHMuUXVvdGVzVG9RdW90ZXMgPSBRdW90ZXNUb1F1b3RlcztcbiJdfQ==