'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var React = require('react-for-atom');
var FileListProvider = require('../lib/FileListProvider');

function toArray(nodes) {
  return Array.prototype.slice.call(nodes);
}

describe('FileListProvider', function () {
  var listProvider;

  beforeEach(function () {
    listProvider = new FileListProvider();
  });

  describe('Path/Filename splitting', function () {
    it('should split filenames from paths appropriately', function () {
      var output = listProvider.getComponentForItem({ path: '/a/path/to/a/file', matchIndexes: [] });

      var containerDiv = document.createElement('div');
      React.render(output, containerDiv);

      // The path should be shown completely, without a trailing slash.
      expect(containerDiv.querySelector('.path span').innerHTML).toBe('/a/path/to/a');

      // The filename should be shown completely, without a leading slash.
      expect(containerDiv.querySelector('.file span').innerHTML).toBe('file');
    });
  });

  describe('Match Highlighting', function () {
    it('should split filenames from paths appropriately', function () {
      var output = listProvider.getComponentForItem({ path: '/some/file', matchIndexes: [1, 6] });
      var containerDiv = document.createElement('div');
      React.render(output, containerDiv);

      var pathHighlights = toArray(containerDiv.querySelectorAll('.path .quick-open-file-search-match')).map(function (node) {
        return node.innerHTML;
      });
      var pathPlain = toArray(containerDiv.querySelectorAll('.path :not(.quick-open-file-search-match)')).map(function (node) {
        return node.innerHTML;
      });

      // Expect the 's' at index 1 to be highlighted, and the text before/after to not be.
      expect(pathHighlights).toEqual(['s']);
      expect(pathPlain).toEqual(['/', 'ome']);

      var fileHighlights = toArray(containerDiv.querySelectorAll('.file .quick-open-file-search-match')).map(function (node) {
        return node.innerHTML;
      });
      var filePlain = toArray(containerDiv.querySelectorAll('.file :not(.quick-open-file-search-match)')).map(function (node) {
        return node.innerHTML;
      });

      // Expect the 'f' at index 6 to be highlighted, and the text after to not be.
      expect(fileHighlights).toEqual(['f']);
      expect(filePlain).toEqual(['ile']);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLXF1aWNrLW9wZW4vc3BlYy9GaWxlTGlzdFByb3ZpZGVyLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7OztBQVdaLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RDLElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7O0FBRTFELFNBQVMsT0FBTyxDQUFDLEtBQWUsRUFBZTtBQUM3QyxTQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMxQzs7QUFFRCxRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBTTtBQUNqQyxNQUFJLFlBQThCLENBQUM7O0FBRW5DLFlBQVUsQ0FBQyxZQUFNO0FBQ2YsZ0JBQVksR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7R0FDdkMsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0FBQ3hDLE1BQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFNO0FBQzFELFVBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQzs7QUFFN0YsVUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqRCxXQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQzs7O0FBR25DLFlBQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzs7O0FBR2hGLFlBQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN6RSxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07QUFDbkMsTUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQU07QUFDMUQsVUFBSSxNQUFNLEdBQUcsWUFBWSxDQUFDLG1CQUFtQixDQUFDLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQzFGLFVBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsV0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7O0FBRW5DLFVBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUk7ZUFBSyxJQUFJLENBQUMsU0FBUztPQUFBLENBQUMsQ0FBQztBQUNqSSxVQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO2VBQUssSUFBSSxDQUFDLFNBQVM7T0FBQSxDQUFDLENBQUM7OztBQUdsSSxZQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QyxZQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7O0FBRXhDLFVBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMscUNBQXFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUk7ZUFBSyxJQUFJLENBQUMsU0FBUztPQUFBLENBQUMsQ0FBQztBQUNqSSxVQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO2VBQUssSUFBSSxDQUFDLFNBQVM7T0FBQSxDQUFDLENBQUM7OztBQUdsSSxZQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QyxZQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNwQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL251Y2xpZGUtcXVpY2stb3Blbi9zcGVjL0ZpbGVMaXN0UHJvdmlkZXItc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0LWZvci1hdG9tJyk7XG52YXIgRmlsZUxpc3RQcm92aWRlciA9IHJlcXVpcmUoJy4uL2xpYi9GaWxlTGlzdFByb3ZpZGVyJyk7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobm9kZXM6IE5vZGVMaXN0KTogQXJyYXk8Tm9kZT4ge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZXMpO1xufVxuXG5kZXNjcmliZSgnRmlsZUxpc3RQcm92aWRlcicsICgpID0+IHtcbiAgdmFyIGxpc3RQcm92aWRlcjogRmlsZUxpc3RQcm92aWRlcjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBsaXN0UHJvdmlkZXIgPSBuZXcgRmlsZUxpc3RQcm92aWRlcigpO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGF0aC9GaWxlbmFtZSBzcGxpdHRpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzcGxpdCBmaWxlbmFtZXMgZnJvbSBwYXRocyBhcHByb3ByaWF0ZWx5JywgKCkgPT4ge1xuICAgICAgdmFyIG91dHB1dCA9IGxpc3RQcm92aWRlci5nZXRDb21wb25lbnRGb3JJdGVtKHtwYXRoOiAnL2EvcGF0aC90by9hL2ZpbGUnLCBtYXRjaEluZGV4ZXM6IFtdfSk7XG5cbiAgICAgIHZhciBjb250YWluZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIFJlYWN0LnJlbmRlcihvdXRwdXQsIGNvbnRhaW5lckRpdik7XG5cbiAgICAgIC8vIFRoZSBwYXRoIHNob3VsZCBiZSBzaG93biBjb21wbGV0ZWx5LCB3aXRob3V0IGEgdHJhaWxpbmcgc2xhc2guXG4gICAgICBleHBlY3QoY29udGFpbmVyRGl2LnF1ZXJ5U2VsZWN0b3IoJy5wYXRoIHNwYW4nKS5pbm5lckhUTUwpLnRvQmUoJy9hL3BhdGgvdG8vYScpO1xuXG4gICAgICAvLyBUaGUgZmlsZW5hbWUgc2hvdWxkIGJlIHNob3duIGNvbXBsZXRlbHksIHdpdGhvdXQgYSBsZWFkaW5nIHNsYXNoLlxuICAgICAgZXhwZWN0KGNvbnRhaW5lckRpdi5xdWVyeVNlbGVjdG9yKCcuZmlsZSBzcGFuJykuaW5uZXJIVE1MKS50b0JlKCdmaWxlJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNYXRjaCBIaWdobGlnaHRpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzcGxpdCBmaWxlbmFtZXMgZnJvbSBwYXRocyBhcHByb3ByaWF0ZWx5JywgKCkgPT4ge1xuICAgICAgdmFyIG91dHB1dCA9IGxpc3RQcm92aWRlci5nZXRDb21wb25lbnRGb3JJdGVtKHtwYXRoOiAnL3NvbWUvZmlsZScsIG1hdGNoSW5kZXhlczogWzEsIDZdfSk7XG4gICAgICB2YXIgY29udGFpbmVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBSZWFjdC5yZW5kZXIob3V0cHV0LCBjb250YWluZXJEaXYpO1xuXG4gICAgICB2YXIgcGF0aEhpZ2hsaWdodHMgPSB0b0FycmF5KGNvbnRhaW5lckRpdi5xdWVyeVNlbGVjdG9yQWxsKCcucGF0aCAucXVpY2stb3Blbi1maWxlLXNlYXJjaC1tYXRjaCcpKS5tYXAoKG5vZGUpID0+IG5vZGUuaW5uZXJIVE1MKTtcbiAgICAgIHZhciBwYXRoUGxhaW4gPSB0b0FycmF5KGNvbnRhaW5lckRpdi5xdWVyeVNlbGVjdG9yQWxsKCcucGF0aCA6bm90KC5xdWljay1vcGVuLWZpbGUtc2VhcmNoLW1hdGNoKScpKS5tYXAoKG5vZGUpID0+IG5vZGUuaW5uZXJIVE1MKTtcblxuICAgICAgLy8gRXhwZWN0IHRoZSAncycgYXQgaW5kZXggMSB0byBiZSBoaWdobGlnaHRlZCwgYW5kIHRoZSB0ZXh0IGJlZm9yZS9hZnRlciB0byBub3QgYmUuXG4gICAgICBleHBlY3QocGF0aEhpZ2hsaWdodHMpLnRvRXF1YWwoWydzJ10pO1xuICAgICAgZXhwZWN0KHBhdGhQbGFpbikudG9FcXVhbChbJy8nLCAnb21lJ10pO1xuXG4gICAgICB2YXIgZmlsZUhpZ2hsaWdodHMgPSB0b0FycmF5KGNvbnRhaW5lckRpdi5xdWVyeVNlbGVjdG9yQWxsKCcuZmlsZSAucXVpY2stb3Blbi1maWxlLXNlYXJjaC1tYXRjaCcpKS5tYXAoKG5vZGUpID0+IG5vZGUuaW5uZXJIVE1MKTtcbiAgICAgIHZhciBmaWxlUGxhaW4gPSB0b0FycmF5KGNvbnRhaW5lckRpdi5xdWVyeVNlbGVjdG9yQWxsKCcuZmlsZSA6bm90KC5xdWljay1vcGVuLWZpbGUtc2VhcmNoLW1hdGNoKScpKS5tYXAoKG5vZGUpID0+IG5vZGUuaW5uZXJIVE1MKTtcblxuICAgICAgLy8gRXhwZWN0IHRoZSAnZicgYXQgaW5kZXggNiB0byBiZSBoaWdobGlnaHRlZCwgYW5kIHRoZSB0ZXh0IGFmdGVyIHRvIG5vdCBiZS5cbiAgICAgIGV4cGVjdChmaWxlSGlnaGxpZ2h0cykudG9FcXVhbChbJ2YnXSk7XG4gICAgICBleHBlY3QoZmlsZVBsYWluKS50b0VxdWFsKFsnaWxlJ10pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19