'use babel';

var createRemoteConnection = _asyncToGenerator(function* (remoteProjectConfig) {
  var RemoteConnection = getRemoteConnection();

  try {
    var connection = new RemoteConnection(restoreClientKey(remoteProjectConfig));
    yield connection.initialize();
    return connection;
  } catch (e) {
    // If connection fails using saved config, open connect dialog.

    var _require4 = require('nuclide-ssh-dialog');

    var openConnectionDialog = _require4.openConnectionDialog;

    return openConnectionDialog({
      initialServer: remoteProjectConfig.host,
      initialCwd: remoteProjectConfig.cwd
    });
  }
});

/**
 * Restore a nuclide project state from a serialized state of the remote connection config.
 */

var restoreNuclideProjectState = _asyncToGenerator(function* (remoteProjectConfig) {
  // TODO use the rest of the config for the connection dialog.
  var projectHostname = remoteProjectConfig.host;
  var projectDirectory = remoteProjectConfig.cwd;

  // try to re-connect, then, add the project to atom.project and the tree.
  var connection = yield createRemoteConnection(remoteProjectConfig);
  if (!connection) {
    getLogger().info('No RemoteConnection returned on restore state trial:', projectHostname, projectDirectory);
  }
  // Reload the project files that have empty text editors/buffers open.
  var closedUris = closeOpenFilesForRemoteProject(remoteProjectConfig);
  // On Atom restart, it tries to open the uri path as a file tab because it's not a local directory.
  // Hence, we close it in the cleanup, because we have the needed connection config saved
  // with the last opened files in the package state.
  if (connection) {
    closedUris.forEach(function (uri) {
      return atom.workspace.open(uri);
    });
  }
});

/**
 * The same TextEditor must be returned to prevent Atom from creating multiple tabs
 * for the same file, because Atom doesn't cache pending opener promises.
 */

var createEditorForNuclide = _asyncToGenerator(function* (connection, uri) {
  var NuclideTextBuffer = require('./NuclideTextBuffer');

  var buffer = new NuclideTextBuffer(connection, { filePath: uri });
  buffer.setEncoding(atom.config.get('core.fileEncoding'));
  try {
    yield buffer.load();
  } catch (err) {
    getLogger().warn('buffer load issue:', err);
    throw err;
  }
  return new TextEditor( /*editorOptions*/{ buffer: buffer, registerEditor: true });
});

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;
var TextEditor = _require.TextEditor;

var _require2 = require('nuclide-client');

var getServiceByNuclideUri = _require2.getServiceByNuclideUri;

var _require3 = require('nuclide-remote-connection');

var RemoteDirectory = _require3.RemoteDirectory;

var subscriptions = null;
var pendingFiles = {};

var logger = null;
function getLogger() {
  return logger || (logger = require('nuclide-logging').getLogger());
}

var RemoteConnection = null;
function getRemoteConnection() {
  return RemoteConnection || (RemoteConnection = require('nuclide-remote-connection').RemoteConnection);
}

function addRemoteFolderToProject(connection) {
  var workingDirectoryUri = connection.getUriForInitialWorkingDirectory();
  // If restoring state, then the project already exists with local directory and wrong repo instances.
  // Hence, we remove it here, if existing, and add the new path for which we added a workspace opener handler.
  atom.project.removePath(workingDirectoryUri);

  atom.project.addPath(workingDirectoryUri);

  var subscription = atom.project.onDidChangePaths(function (paths) {
    if (paths.indexOf(workingDirectoryUri) !== -1) {
      return;
    }
    // The project was removed from the tree.
    subscription.dispose();

    closeOpenFilesForRemoteProject(connection.getConfig());

    var hostname = connection.getRemoteHostname();
    if (getRemoteConnection().getByHostname(hostname).length > 1) {
      getLogger().info('Remaining remote projects using Nuclide Server - no prompt to shutdown');
      return connection.close();
    }

    var choice = atom.confirm({
      message: 'No more remote projects on the host: \'' + hostname + '\'. Would you like to shutdown Nuclide server there?',
      buttons: ['Shutdown', 'Keep It']
    });
    if (choice === 1) {
      return connection.close();
    }
    if (choice === 0) {
      connection.getClient().shutdownServer();
      return connection.close();
    }
  });
}

function closeOpenFilesForRemoteProject(remoteProjectConfig) {
  var _require5 = require('nuclide-atom-helpers');

  var closeTabForBuffer = _require5.closeTabForBuffer;

  var _require6 = require('./utils');

  var sanitizeNuclideUri = _require6.sanitizeNuclideUri;
  var projectHostname = remoteProjectConfig.host;
  var projectDirectory = remoteProjectConfig.cwd;

  var closedUris = [];
  atom.workspace.getTextEditors().forEach(function (editor) {
    var rawUrl = editor.getURI();
    if (!rawUrl) {
      return;
    }
    var uri = sanitizeNuclideUri(rawUrl);

    var _require$parse = require('nuclide-remote-uri').parse(uri);

    var fileHostname = _require$parse.hostname;
    var filePath = _require$parse.path;

    if (fileHostname === projectHostname && filePath.startsWith(projectDirectory)) {
      closeTabForBuffer(editor.getBuffer());
      if (filePath !== projectDirectory) {
        closedUris.push(uri);
      }
    }
  });
  return closedUris;
}

function cleanupRemoteNuclideProjects() {
  getRemoteRootDirectories().forEach(function (directory) {
    return atom.project.removePath(directory.getPath());
  });
}

function getRemoteRootDirectories() {
  return atom.project.getDirectories().filter(function (directory) {
    return directory.getPath().startsWith('nuclide:');
  });
}

/**
 * Encrypts the clientKey of a RemoteConnectionConfiguration.
 * @param remoteProjectConfig - The config with the clientKey we want encrypted.
 * @return returns the passed in config with the clientKey encrypted.
 */
function protectClientKey(remoteProjectConfig) {
  var _require7 = require('nuclide-keytar-wrapper');

  var replacePassword = _require7.replacePassword;

  var crypto = require('crypto');

  var sha1 = crypto.createHash('sha1');
  sha1.update(remoteProjectConfig.host + ':' + remoteProjectConfig.port);
  var sha1sum = sha1.digest('hex');

  var _encryptString = encryptString(remoteProjectConfig.clientKey);

  var salt = _encryptString.salt;
  var password = _encryptString.password;
  var encryptedString = _encryptString.encryptedString;

  replacePassword('nuclide.remoteProjectConfig', sha1sum, '' + password);

  remoteProjectConfig.clientKey = encryptedString + '.' + salt;

  return remoteProjectConfig;
}

/**
 * Decrypts the clientKey of a RemoteConnectionConfiguration.
 * @param remoteProjectConfig - The config with the clientKey we want encrypted.
 * @return returns the passed in config with the clientKey encrypted.
 */
function restoreClientKey(remoteProjectConfig) {
  var _require8 = require('nuclide-keytar-wrapper');

  var getPassword = _require8.getPassword;

  var crypto = require('crypto');

  var sha1 = crypto.createHash('sha1');
  sha1.update(remoteProjectConfig.host + ':' + remoteProjectConfig.port);
  var sha1sum = sha1.digest('hex');

  var password = getPassword('nuclide.remoteProjectConfig', sha1sum);

  if (!password) {
    throw new Error('Cannot find password for encrypted client key');
  }

  var salt;
  var clientKey;

  var _remoteProjectConfig$clientKey$split = remoteProjectConfig.clientKey.split('.');

  var _remoteProjectConfig$clientKey$split2 = _slicedToArray(_remoteProjectConfig$clientKey$split, 2);

  clientKey = _remoteProjectConfig$clientKey$split2[0];
  salt = _remoteProjectConfig$clientKey$split2[1];

  if (!clientKey || !salt) {
    throw new Error('Cannot decrypt client key');
  }

  remoteProjectConfig.clientKey = decryptString(clientKey, password, salt);

  return remoteProjectConfig;
}

function decryptString(text, password, salt) {
  var crypto = require('crypto');

  var decipher = crypto.createDecipheriv('aes-128-cbc', new Buffer(password, 'base64'), new Buffer(salt, 'base64'));

  var decryptedString = decipher.update(text, 'base64', 'utf8');
  decryptedString += decipher.final('utf8');

  return decryptedString;
}

function encryptString(text) {
  var crypto = require('crypto');
  var password = crypto.randomBytes(16).toString('base64');
  var salt = crypto.randomBytes(16).toString('base64');

  var cipher = crypto.createCipheriv('aes-128-cbc', new Buffer(password, 'base64'), new Buffer(salt, 'base64'));

  var encryptedString = cipher.update(text, 'utf8', 'base64');
  encryptedString += cipher.final('base64');

  return {
    password: password,
    salt: salt,
    encryptedString: encryptedString
  };
}

module.exports = {
  __test__: {
    decryptString: decryptString,
    encryptString: encryptString
  },

  activate: function activate(state) {
    subscriptions = new CompositeDisposable();

    subscriptions.add(getRemoteConnection().onDidAddRemoteConnection(function (connection) {
      addRemoteFolderToProject(connection);
    }));

    // Don't do require or any other expensive operations in activate().
    subscriptions.add(atom.packages.onDidActivateInitialPackages(function () {
      // Subscribe opener before restoring the remote projects.
      subscriptions.add(atom.workspace.addOpener(function () {
        var uri = arguments[0] === undefined ? '' : arguments[0];

        if (uri.startsWith('nuclide:')) {
          var connection = getRemoteConnection().getForUri(uri);
          // On Atom restart, it tries to open the uri path as a file tab because it's not a local directory.
          // We can't let that create a file with the initial working directory path.
          if (connection && uri !== connection.getUriForInitialWorkingDirectory()) {
            if (pendingFiles[uri]) {
              return pendingFiles[uri];
            }
            var textEditorPromise = pendingFiles[uri] = createEditorForNuclide(connection, uri);
            var removeFromCache = function removeFromCache() {
              return delete pendingFiles[uri];
            };
            textEditorPromise.then(removeFromCache, removeFromCache);
            return textEditorPromise;
          }
        }
      }));
      subscriptions.add(atom.commands.add('atom-workspace', 'nuclide-remote-projects:connect', function () {
        return require('nuclide-ssh-dialog').openConnectionDialog();
      }));

      // Remove remote projects added in case of reloads.
      // We already have their connection config stored.
      var remoteProjectsConfig = state && state.remoteProjectsConfig || [];
      remoteProjectsConfig.forEach(restoreNuclideProjectState);
      // Clear obsolete config.
      atom.config.set('nuclide.remoteProjectsConfig', []);
    }));
  },

  serialize: function serialize() {
    var remoteProjectsConfig = getRemoteRootDirectories().map(function (directory) {
      var connection = getRemoteConnection().getForUri(directory.getPath());
      return connection && protectClientKey(connection.getConfig());
    }).filter(function (config) {
      return !!config;
    });
    return {
      remoteProjectsConfig: remoteProjectsConfig
    };
  },

  deactivate: function deactivate() {
    // This should always be true here, but we do this to appease Flow.
    if (subscriptions) {
      subscriptions.dispose();
      subscriptions = null;
    }
  },

  createRemoteDirectoryProvider: function createRemoteDirectoryProvider() {
    var RemoteDirectoryProvider = require('./RemoteDirectoryProvider');
    return new RemoteDirectoryProvider();
  },

  createRemoteDirectorySearcher: function createRemoteDirectorySearcher() {
    var RemoteDirectorySearcher = require('./RemoteDirectorySearcher');
    return new RemoteDirectorySearcher(function (dir) {
      return getServiceByNuclideUri('FindInProjectService', dir.getPath());
    });
  }
};
//# sourceMappingURL=data:application/json;base64,