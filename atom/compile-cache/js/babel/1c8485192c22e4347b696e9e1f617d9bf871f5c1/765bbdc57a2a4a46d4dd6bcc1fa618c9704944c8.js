var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp = require("atom-space-pen-views");
var atomUtils = require("../atomUtils");
var FileSymbolsView = (function (_super) {
    __extends(FileSymbolsView, _super);
    function FileSymbolsView() {
        _super.apply(this, arguments);
        this.panel = null;
    }
    Object.defineProperty(FileSymbolsView.prototype, "$", {
        get: function get() {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    FileSymbolsView.prototype.setNavBarItems = function (tsItems, filePath) {
        var items = tsItems;
        this.filePath = filePath;
        _super.prototype.setItems.call(this, items);
    };
    FileSymbolsView.prototype.viewForItem = function (item) {
        return "\n            <li>\n                <div class=\"highlight\">" + (Array(item.indent * 2).join("&nbsp;") + (item.indent ? "âˆŸ " : "") + item.text) + "</div>\n                <div class=\"pull-right\" style=\"font-weight: bold; color:" + atomUtils.kindToColor(item.kind) + "\">" + item.kind + "</div>\n                <div class=\"clear\"> line: " + (item.position.line + 1) + "</div>\n            </li>\n        ";
    };
    FileSymbolsView.prototype.confirmed = function (item) {
        atom.workspace.open(this.filePath, {
            initialLine: item.position.line,
            initialColumn: item.position.col
        });
        this.hide();
    };
    FileSymbolsView.prototype.getFilterKey = function () {
        return "text";
    };
    FileSymbolsView.prototype.show = function () {
        this.storeFocusedElement();
        if (!this.panel) this.panel = atom.workspace.addModalPanel({ item: this });
        this.panel.show();
        this.focusFilterEditor();
    };
    FileSymbolsView.prototype.hide = function () {
        this.panel.hide();
        this.restoreFocus();
    };
    FileSymbolsView.prototype.cancelled = function () {
        this.hide();
    };
    return FileSymbolsView;
})(sp.SelectListView);
exports.FileSymbolsView = FileSymbolsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvZmlsZVN5bWJvbHNWaWV3LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksU0FBUyxHQUFHLEFBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3hELFNBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RELGFBQVMsRUFBRSxHQUFHO0FBQUUsWUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7S0FBRTtBQUN2QyxLQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQSxBQUFDLENBQUM7Q0FDeEYsQ0FBQztBQUNGLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3pDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4QyxJQUFJLGVBQWUsR0FBRyxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQ3JDLGFBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbkMsYUFBUyxlQUFlLEdBQUc7QUFDdkIsY0FBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUIsWUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDckI7QUFDRCxVQUFNLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0FBQ2xELFdBQUcsRUFBRSxlQUFZO0FBQ2IsbUJBQU8sSUFBSSxDQUFDO1NBQ2Y7QUFDRCxrQkFBVSxFQUFFLElBQUk7QUFDaEIsb0JBQVksRUFBRSxJQUFJO0tBQ3JCLENBQUMsQ0FBQztBQUNILG1CQUFlLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxVQUFVLE9BQU8sRUFBRSxRQUFRLEVBQUU7QUFDcEUsWUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFlBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLGNBQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDL0MsQ0FBQztBQUNGLG1CQUFlLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLElBQUksRUFBRTtBQUNwRCxlQUFPLCtEQUErRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQVMsR0FBRyxFQUFFLENBQUEsQUFBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUEsQUFBQyxHQUFHLHFGQUFxRixHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHNEQUFzRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQSxBQUFDLEdBQUcscUNBQXFDLENBQUM7S0FDNWEsQ0FBQztBQUNGLG1CQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLElBQUksRUFBRTtBQUNsRCxZQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQy9CLHVCQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO0FBQy9CLHlCQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHO1NBQ25DLENBQUMsQ0FBQztBQUNILFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmLENBQUM7QUFDRixtQkFBZSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsWUFBWTtBQUFFLGVBQU8sTUFBTSxDQUFDO0tBQUUsQ0FBQztBQUN4RSxtQkFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN6QyxZQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUMzQixZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsWUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQixZQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUM1QixDQUFDO0FBQ0YsbUJBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDekMsWUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQixZQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDdkIsQ0FBQztBQUNGLG1CQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFZO0FBQzlDLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmLENBQUM7QUFDRixXQUFPLGVBQWUsQ0FBQztDQUMxQixDQUFBLENBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RCLE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvZmlsZVN5bWJvbHNWaWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgc3AgPSByZXF1aXJlKCdhdG9tLXNwYWNlLXBlbi12aWV3cycpO1xudmFyIGF0b21VdGlscyA9IHJlcXVpcmUoXCIuLi9hdG9tVXRpbHNcIik7XG52YXIgRmlsZVN5bWJvbHNWaWV3ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsZVN5bWJvbHNWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZpbGVTeW1ib2xzVmlldygpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucGFuZWwgPSBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlsZVN5bWJvbHNWaWV3LnByb3RvdHlwZSwgXCIkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRmlsZVN5bWJvbHNWaWV3LnByb3RvdHlwZS5zZXROYXZCYXJJdGVtcyA9IGZ1bmN0aW9uICh0c0l0ZW1zLCBmaWxlUGF0aCkge1xuICAgICAgICB2YXIgaXRlbXMgPSB0c0l0ZW1zO1xuICAgICAgICB0aGlzLmZpbGVQYXRoID0gZmlsZVBhdGg7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuc2V0SXRlbXMuY2FsbCh0aGlzLCBpdGVtcyk7XG4gICAgfTtcbiAgICBGaWxlU3ltYm9sc1ZpZXcucHJvdG90eXBlLnZpZXdGb3JJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIFwiXFxuICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoaWdobGlnaHRcXFwiPlwiICsgKEFycmF5KGl0ZW0uaW5kZW50ICogMikuam9pbignJm5ic3A7JykgKyAoaXRlbS5pbmRlbnQgPyBcIlxcdTIyMUYgXCIgOiAnJykgKyBpdGVtLnRleHQpICsgXCI8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHVsbC1yaWdodFxcXCIgc3R5bGU9XFxcImZvbnQtd2VpZ2h0OiBib2xkOyBjb2xvcjpcIiArIGF0b21VdGlscy5raW5kVG9Db2xvcihpdGVtLmtpbmQpICsgXCJcXFwiPlwiICsgaXRlbS5raW5kICsgXCI8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJcXFwiPiBsaW5lOiBcIiArIChpdGVtLnBvc2l0aW9uLmxpbmUgKyAxKSArIFwiPC9kaXY+XFxuICAgICAgICAgICAgPC9saT5cXG4gICAgICAgIFwiO1xuICAgIH07XG4gICAgRmlsZVN5bWJvbHNWaWV3LnByb3RvdHlwZS5jb25maXJtZWQgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBhdG9tLndvcmtzcGFjZS5vcGVuKHRoaXMuZmlsZVBhdGgsIHtcbiAgICAgICAgICAgIGluaXRpYWxMaW5lOiBpdGVtLnBvc2l0aW9uLmxpbmUsXG4gICAgICAgICAgICBpbml0aWFsQ29sdW1uOiBpdGVtLnBvc2l0aW9uLmNvbFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICBGaWxlU3ltYm9sc1ZpZXcucHJvdG90eXBlLmdldEZpbHRlcktleSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICd0ZXh0JzsgfTtcbiAgICBGaWxlU3ltYm9sc1ZpZXcucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RvcmVGb2N1c2VkRWxlbWVudCgpO1xuICAgICAgICBpZiAoIXRoaXMucGFuZWwpXG4gICAgICAgICAgICB0aGlzLnBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7IGl0ZW06IHRoaXMgfSk7XG4gICAgICAgIHRoaXMucGFuZWwuc2hvdygpO1xuICAgICAgICB0aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7XG4gICAgfTtcbiAgICBGaWxlU3ltYm9sc1ZpZXcucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFuZWwuaGlkZSgpO1xuICAgICAgICB0aGlzLnJlc3RvcmVGb2N1cygpO1xuICAgIH07XG4gICAgRmlsZVN5bWJvbHNWaWV3LnByb3RvdHlwZS5jYW5jZWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbGVTeW1ib2xzVmlldztcbn0pKHNwLlNlbGVjdExpc3RWaWV3KTtcbmV4cG9ydHMuRmlsZVN5bWJvbHNWaWV3ID0gRmlsZVN5bWJvbHNWaWV3O1xuIl19