var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var view = require('./view');
var $ = view.$;
var LineMessageView = (function (_super) {
    __extends(LineMessageView, _super);
    function LineMessageView() {
        _super.apply(this, arguments);
    }
    LineMessageView.content = function () {
        var _this = this;
        return this.div({
            'class': 'line-message'
        }, function () {
            _this.div({
                'class': 'text-subtle inline-block',
                outlet: 'position',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
            _this.div({
                'class': 'message inline-block',
                outlet: 'contents'
            });
            _this.pre({
                'class': 'preview',
                outlet: 'code',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
        });
    };
    LineMessageView.prototype.init = function () {
        var message = 'at line ' + this.options.line;
        if (this.options.file !== undefined) {
            message += ', file ' + this.options.file;
        }
        this.position.text(message);
        this.contents.text(this.options.message);
        if (this.options.preview) {
            this.code.text(this.options.preview);
        } else {
            this.code.remove();
        }
    };
    LineMessageView.prototype.goToLine = function () {
        this.options.goToLine(this.options.file, this.options.line, this.options.col);
    };
    LineMessageView.prototype.getSummary = function () {
        var pos = this.options.line.toString();
        if (this.options.file !== undefined) {
            pos += ', ' + this.options.file;
        }
        return {
            summary: pos + ' ' + this.options.message,
            rawSummary: true,
            handler: (function (element) {
                $(element).css('cursor', 'pointer').click(this.goToLine.bind(this));
            }).bind(this)
        };
    };
    return LineMessageView;
})(view.View);
exports.LineMessageView = LineMessageView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvbGluZU1lc3NhZ2VWaWV3LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksU0FBUyxHQUFHLEFBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3hELFNBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RELGFBQVMsRUFBRSxHQUFHO0FBQUUsWUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7S0FBRTtBQUN2QyxLQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQSxBQUFDLENBQUM7Q0FDeEYsQ0FBQztBQUNGLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2YsSUFBSSxlQUFlLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUNyQyxhQUFTLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLGFBQVMsZUFBZSxHQUFHO0FBQ3ZCLGNBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ2pDO0FBQ0QsbUJBQWUsQ0FBQyxPQUFPLEdBQUcsWUFBWTtBQUNsQyxZQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDakIsZUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ1oscUJBQU8sY0FBYztTQUN4QixFQUFFLFlBQVk7QUFDWCxpQkFBSyxDQUFDLEdBQUcsQ0FBQztBQUNOLHlCQUFPLDBCQUEwQjtBQUNqQyxzQkFBTSxFQUFFLFVBQVU7QUFDbEIscUJBQUssRUFBRSxVQUFVO0FBQ2pCLHFCQUFLLEVBQUUsa0JBQWtCO2FBQzVCLENBQUMsQ0FBQztBQUNILGlCQUFLLENBQUMsR0FBRyxDQUFDO0FBQ04seUJBQU8sc0JBQXNCO0FBQzdCLHNCQUFNLEVBQUUsVUFBVTthQUNyQixDQUFDLENBQUM7QUFDSCxpQkFBSyxDQUFDLEdBQUcsQ0FBQztBQUNOLHlCQUFPLFNBQVM7QUFDaEIsc0JBQU0sRUFBRSxNQUFNO0FBQ2QscUJBQUssRUFBRSxVQUFVO0FBQ2pCLHFCQUFLLEVBQUUsa0JBQWtCO2FBQzVCLENBQUMsQ0FBQztTQUNOLENBQUMsQ0FBQztLQUNOLENBQUM7QUFDRixtQkFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUN6QyxZQUFJLE9BQU8sR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDN0MsWUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7QUFDakMsbUJBQU8sSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDNUM7QUFDRCxZQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QixZQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLFlBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7QUFDdEIsZ0JBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEMsTUFDSTtBQUNELGdCQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3RCO0tBQ0osQ0FBQztBQUNGLG1CQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxZQUFZO0FBQzdDLFlBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDakYsQ0FBQztBQUNGLG1CQUFlLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxZQUFZO0FBQy9DLFlBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3ZDLFlBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ2pDLGVBQUcsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7U0FDbkM7QUFDRCxlQUFPO0FBQ0gsbUJBQU8sRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTztBQUN6QyxzQkFBVSxFQUFFLElBQUk7QUFDaEIsbUJBQU8sRUFBRSxDQUFBLFVBQVUsT0FBTyxFQUFFO0FBQ3hCLGlCQUFDLENBQUMsT0FBTyxDQUFDLENBQ0wsR0FBRyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDeEMsQ0FBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDZixDQUFDO0tBQ0wsQ0FBQztBQUNGLFdBQU8sZUFBZSxDQUFDO0NBQzFCLENBQUEsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9hdG9tL3ZpZXdzL2xpbmVNZXNzYWdlVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHZpZXcgPSByZXF1aXJlKCcuL3ZpZXcnKTtcbnZhciAkID0gdmlldy4kO1xudmFyIExpbmVNZXNzYWdlVmlldyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKExpbmVNZXNzYWdlVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMaW5lTWVzc2FnZVZpZXcoKSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBMaW5lTWVzc2FnZVZpZXcuY29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2KHtcbiAgICAgICAgICAgIGNsYXNzOiAnbGluZS1tZXNzYWdlJ1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5kaXYoe1xuICAgICAgICAgICAgICAgIGNsYXNzOiAndGV4dC1zdWJ0bGUgaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgICAgICBvdXRsZXQ6ICdwb3NpdGlvbicsXG4gICAgICAgICAgICAgICAgY2xpY2s6ICdnb1RvTGluZScsXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdjdXJzb3I6IHBvaW50ZXI7J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5kaXYoe1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnbWVzc2FnZSBpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgICAgIG91dGxldDogJ2NvbnRlbnRzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5wcmUoe1xuICAgICAgICAgICAgICAgIGNsYXNzOiAncHJldmlldycsXG4gICAgICAgICAgICAgICAgb3V0bGV0OiAnY29kZScsXG4gICAgICAgICAgICAgICAgY2xpY2s6ICdnb1RvTGluZScsXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdjdXJzb3I6IHBvaW50ZXI7J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTGluZU1lc3NhZ2VWaWV3LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdhdCBsaW5lICcgKyB0aGlzLm9wdGlvbnMubGluZTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gJywgZmlsZSAnICsgdGhpcy5vcHRpb25zLmZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb3NpdGlvbi50ZXh0KG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvbnRlbnRzLnRleHQodGhpcy5vcHRpb25zLm1lc3NhZ2UpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZXZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuY29kZS50ZXh0KHRoaXMub3B0aW9ucy5wcmV2aWV3KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29kZS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGluZU1lc3NhZ2VWaWV3LnByb3RvdHlwZS5nb1RvTGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmdvVG9MaW5lKHRoaXMub3B0aW9ucy5maWxlLCB0aGlzLm9wdGlvbnMubGluZSwgdGhpcy5vcHRpb25zLmNvbCk7XG4gICAgfTtcbiAgICBMaW5lTWVzc2FnZVZpZXcucHJvdG90eXBlLmdldFN1bW1hcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLm9wdGlvbnMubGluZS50b1N0cmluZygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9zICs9ICcsICcgKyB0aGlzLm9wdGlvbnMuZmlsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VtbWFyeTogcG9zICsgJyAnICsgdGhpcy5vcHRpb25zLm1lc3NhZ2UsXG4gICAgICAgICAgICByYXdTdW1tYXJ5OiB0cnVlLFxuICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgICAgICAgICAgICAgICAgLmNsaWNrKHRoaXMuZ29Ub0xpbmUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBMaW5lTWVzc2FnZVZpZXc7XG59KSh2aWV3LlZpZXcpO1xuZXhwb3J0cy5MaW5lTWVzc2FnZVZpZXcgPSBMaW5lTWVzc2FnZVZpZXc7XG4iXX0=