var mkdirp = require('mkdirp');
var path = require('path');
var fs = require('fs');
function diagnosticToTSError(diagnostic) {
    var filePath = diagnostic.file.fileName;
    var startPosition = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
    var endPosition = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start + diagnostic.length);
    return {
        filePath: filePath,
        startPos: { line: startPosition.line, col: startPosition.character },
        endPos: { line: endPosition.line, col: endPosition.character },
        message: ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n'),
        preview: diagnostic.file.text.substr(diagnostic.start, diagnostic.length)
    };
}
exports.diagnosticToTSError = diagnosticToTSError;
function emitFile(proj, filePath) {
    var services = proj.languageService;
    var output = services.getEmitOutput(filePath);
    var emitDone = !output.emitSkipped;
    var errors = [];
    var allDiagnostics = services.getCompilerOptionsDiagnostics().concat(services.getSyntacticDiagnostics(filePath)).concat(services.getSemanticDiagnostics(filePath));
    allDiagnostics.forEach(function (diagnostic) {
        if (!diagnostic.file) return;
        var startPosition = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
        errors.push(diagnosticToTSError(diagnostic));
    });
    output.outputFiles.forEach(function (o) {
        mkdirp.sync(path.dirname(o.name));
        fs.writeFileSync(o.name, o.text, 'utf8');
    });
    var outputFiles = output.outputFiles.map(function (o) {
        return o.name;
    });
    if (path.extname(filePath) == '.d.ts') {
        outputFiles.push(filePath);
    }
    return {
        sourceFileName: filePath,
        outputFiles: outputFiles,
        success: emitDone && !errors.length,
        errors: errors,
        emitError: !emitDone
    };
}
exports.emitFile = emitFile;
function getRawOutput(proj, filePath) {
    var services = proj.languageService;
    var output = services.getEmitOutput(filePath);
    return output;
}
exports.getRawOutput = getRawOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvbW9kdWxlcy9idWlsZGluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QixTQUFTLG1CQUFtQixDQUFDLFVBQVUsRUFBRTtBQUNyQyxRQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN4QyxRQUFJLGFBQWEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRixRQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RHLFdBQU87QUFDSCxnQkFBUSxFQUFFLFFBQVE7QUFDbEIsZ0JBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsU0FBUyxFQUFFO0FBQ3BFLGNBQU0sRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsU0FBUyxFQUFFO0FBQzlELGVBQU8sRUFBRSxFQUFFLENBQUMsNEJBQTRCLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUM7QUFDdEUsZUFBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUM7S0FDNUUsQ0FBQztDQUNMO0FBQ0QsT0FBTyxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0FBQ2xELFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7QUFDOUIsUUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztBQUNwQyxRQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLFFBQUksUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztBQUNuQyxRQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDaEIsUUFBSSxjQUFjLEdBQUcsUUFBUSxDQUFDLDZCQUE2QixFQUFFLENBQ3hELE1BQU0sQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDbEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELGtCQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsVUFBVSxFQUFFO0FBQ3pDLFlBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUNoQixPQUFPO0FBQ1gsWUFBSSxhQUFhLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEYsY0FBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0tBQ2hELENBQUMsQ0FBQztBQUNILFVBQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ3BDLGNBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsQyxVQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1QyxDQUFDLENBQUM7QUFDSCxRQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUFFLGVBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQztLQUFFLENBQUMsQ0FBQztBQUMxRSxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxFQUFFO0FBQ25DLG1CQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzlCO0FBQ0QsV0FBTztBQUNILHNCQUFjLEVBQUUsUUFBUTtBQUN4QixtQkFBVyxFQUFFLFdBQVc7QUFDeEIsZUFBTyxFQUFFLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO0FBQ25DLGNBQU0sRUFBRSxNQUFNO0FBQ2QsaUJBQVMsRUFBRSxDQUFDLFFBQVE7S0FDdkIsQ0FBQztDQUNMO0FBQ0QsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDNUIsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUNsQyxRQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQ3BDLFFBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUMsV0FBTyxNQUFNLENBQUM7Q0FDakI7QUFDRCxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9sYW5nL21vZHVsZXMvYnVpbGRpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWtkaXJwID0gcmVxdWlyZSgnbWtkaXJwJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5mdW5jdGlvbiBkaWFnbm9zdGljVG9UU0Vycm9yKGRpYWdub3N0aWMpIHtcbiAgICB2YXIgZmlsZVBhdGggPSBkaWFnbm9zdGljLmZpbGUuZmlsZU5hbWU7XG4gICAgdmFyIHN0YXJ0UG9zaXRpb24gPSBkaWFnbm9zdGljLmZpbGUuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24oZGlhZ25vc3RpYy5zdGFydCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gZGlhZ25vc3RpYy5maWxlLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKGRpYWdub3N0aWMuc3RhcnQgKyBkaWFnbm9zdGljLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZVBhdGg6IGZpbGVQYXRoLFxuICAgICAgICBzdGFydFBvczogeyBsaW5lOiBzdGFydFBvc2l0aW9uLmxpbmUsIGNvbDogc3RhcnRQb3NpdGlvbi5jaGFyYWN0ZXIgfSxcbiAgICAgICAgZW5kUG9zOiB7IGxpbmU6IGVuZFBvc2l0aW9uLmxpbmUsIGNvbDogZW5kUG9zaXRpb24uY2hhcmFjdGVyIH0sXG4gICAgICAgIG1lc3NhZ2U6IHRzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCwgJ1xcbicpLFxuICAgICAgICBwcmV2aWV3OiBkaWFnbm9zdGljLmZpbGUudGV4dC5zdWJzdHIoZGlhZ25vc3RpYy5zdGFydCwgZGlhZ25vc3RpYy5sZW5ndGgpLFxuICAgIH07XG59XG5leHBvcnRzLmRpYWdub3N0aWNUb1RTRXJyb3IgPSBkaWFnbm9zdGljVG9UU0Vycm9yO1xuZnVuY3Rpb24gZW1pdEZpbGUocHJvaiwgZmlsZVBhdGgpIHtcbiAgICB2YXIgc2VydmljZXMgPSBwcm9qLmxhbmd1YWdlU2VydmljZTtcbiAgICB2YXIgb3V0cHV0ID0gc2VydmljZXMuZ2V0RW1pdE91dHB1dChmaWxlUGF0aCk7XG4gICAgdmFyIGVtaXREb25lID0gIW91dHB1dC5lbWl0U2tpcHBlZDtcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIGFsbERpYWdub3N0aWNzID0gc2VydmljZXMuZ2V0Q29tcGlsZXJPcHRpb25zRGlhZ25vc3RpY3MoKVxuICAgICAgICAuY29uY2F0KHNlcnZpY2VzLmdldFN5bnRhY3RpY0RpYWdub3N0aWNzKGZpbGVQYXRoKSlcbiAgICAgICAgLmNvbmNhdChzZXJ2aWNlcy5nZXRTZW1hbnRpY0RpYWdub3N0aWNzKGZpbGVQYXRoKSk7XG4gICAgYWxsRGlhZ25vc3RpY3MuZm9yRWFjaChmdW5jdGlvbiAoZGlhZ25vc3RpYykge1xuICAgICAgICBpZiAoIWRpYWdub3N0aWMuZmlsZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSBkaWFnbm9zdGljLmZpbGUuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24oZGlhZ25vc3RpYy5zdGFydCk7XG4gICAgICAgIGVycm9ycy5wdXNoKGRpYWdub3N0aWNUb1RTRXJyb3IoZGlhZ25vc3RpYykpO1xuICAgIH0pO1xuICAgIG91dHB1dC5vdXRwdXRGaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIG1rZGlycC5zeW5jKHBhdGguZGlybmFtZShvLm5hbWUpKTtcbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhvLm5hbWUsIG8udGV4dCwgXCJ1dGY4XCIpO1xuICAgIH0pO1xuICAgIHZhciBvdXRwdXRGaWxlcyA9IG91dHB1dC5vdXRwdXRGaWxlcy5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ubmFtZTsgfSk7XG4gICAgaWYgKHBhdGguZXh0bmFtZShmaWxlUGF0aCkgPT0gJy5kLnRzJykge1xuICAgICAgICBvdXRwdXRGaWxlcy5wdXNoKGZpbGVQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlRmlsZU5hbWU6IGZpbGVQYXRoLFxuICAgICAgICBvdXRwdXRGaWxlczogb3V0cHV0RmlsZXMsXG4gICAgICAgIHN1Y2Nlc3M6IGVtaXREb25lICYmICFlcnJvcnMubGVuZ3RoLFxuICAgICAgICBlcnJvcnM6IGVycm9ycyxcbiAgICAgICAgZW1pdEVycm9yOiAhZW1pdERvbmVcbiAgICB9O1xufVxuZXhwb3J0cy5lbWl0RmlsZSA9IGVtaXRGaWxlO1xuZnVuY3Rpb24gZ2V0UmF3T3V0cHV0KHByb2osIGZpbGVQYXRoKSB7XG4gICAgdmFyIHNlcnZpY2VzID0gcHJvai5sYW5ndWFnZVNlcnZpY2U7XG4gICAgdmFyIG91dHB1dCA9IHNlcnZpY2VzLmdldEVtaXRPdXRwdXQoZmlsZVBhdGgpO1xuICAgIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnRzLmdldFJhd091dHB1dCA9IGdldFJhd091dHB1dDtcbiJdfQ==