'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var FileDialogComponent = require('../lib/FileDialogComponent');

var _require = require('atom');

var File = _require.File;
var Directory = _require.Directory;

var React = require('react-for-atom');

describe('FileDialogComponent', function () {
  // We use `renderComponent` in `beforeEach` to return the component so the test
  // methods have a chance to modify the default props.
  var renderComponent;
  var props;
  var hostEl;

  beforeEach(function () {
    hostEl = document.createElement('div');
    renderComponent = function () {
      return React.render(React.createElement(FileDialogComponent, props), hostEl);
    };

    props = {
      rootDirectory: new Directory('/root/'),
      message: React.createElement(
        'div',
        null,
        'message'
      ),
      onConfirm: function onConfirm() {},
      onClose: function onClose() {}
    };
  });

  afterEach(function () {
    React.unmountComponentAtNode(hostEl);
    hostEl = null;
  });

  describe('in the root', function () {
    it('relativizes a file path', function () {
      props.initialEntry = new File('/root/file.txt');
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getText()).toBe('file.txt');
    });

    it('relativizes a folder path', function () {
      props.initialEntry = new Directory('/root/dir');
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getText()).toBe('dir/');
    });

    it('selects a file basename with an extension', function () {
      props.initialEntry = new File('/root/file.txt');
      props.shouldSelectBasename = true;
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getSelectedText()).toBe('file');
    });

    it('selects a file basename without an extension', function () {
      props.initialEntry = new File('/root/file');
      props.shouldSelectBasename = true;
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getSelectedText()).toBe('file');
    });

    it('selects a folder basename', function () {
      props.initialEntry = new Directory('/root/dir');
      props.shouldSelectBasename = true;
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getSelectedText()).toBe('dir');
    });
  });

  describe('in a subdirectory', function () {
    it('relativizes a file path', function () {
      props.initialEntry = new File('/root/subdir/file.txt');
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getText()).toBe('subdir/file.txt');
    });

    it('relativizes a folder path', function () {
      props.initialEntry = new Directory('/root/subdir/dir');
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getText()).toBe('subdir/dir/');
    });

    it('selects a file basename with an extension', function () {
      props.initialEntry = new File('/root/subdir/file.txt');
      props.shouldSelectBasename = true;
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getSelectedText()).toBe('file');
    });

    it('selects a file basename without an extension', function () {
      props.initialEntry = new File('/root/subdir/file');
      props.shouldSelectBasename = true;
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getSelectedText()).toBe('file');
    });

    it('selects a folder basename', function () {
      props.initialEntry = new Directory('/root/subdir/dir');
      props.shouldSelectBasename = true;
      var component = renderComponent();
      var textEditor = component.refs['entryPath'].getTextEditor();

      expect(textEditor.getSelectedText()).toBe('dir');
    });
  });
});
//# sourceMappingURL=data:application/json;base64,