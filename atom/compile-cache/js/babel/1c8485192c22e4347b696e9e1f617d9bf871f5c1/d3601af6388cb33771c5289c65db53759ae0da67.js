/**
 * Gets the refactorings you would need if you move files around
 */
var astUtils_1 = require("../fixmyts/astUtils");
var path = require("path");
var tsconfig_1 = require("../../tsconfig/tsconfig");
var fsUtil_1 = require("../../utils/fsUtil");
function getRenameFilesRefactorings(program, oldDirectoryOrFile, newDirectoryOrFile) {
    oldDirectoryOrFile = fsUtil_1.consistentPath(oldDirectoryOrFile);
    newDirectoryOrFile = fsUtil_1.consistentPath(newDirectoryOrFile);
    var oldFileNoExt = tsconfig_1.removeExt(oldDirectoryOrFile);
    var newFileNoExt = tsconfig_1.removeExt(newDirectoryOrFile);
    var refactorings = [];
    var sourceFiles = program.getSourceFiles();
    sourceFiles.forEach(function (sourceFile) {
        var imports = astUtils_1.getSourceFileImportsWithTextRange(sourceFile).filter(function (fileReference) {
            return tsconfig_1.pathIsRelative(fileReference.text);
        }).map(function (ref) {
            return {
                path: fsUtil_1.consistentPath(path.resolve(path.dirname(sourceFile.fileName), ref.text)),
                range: ref.range
            };
        });
        var matches = imports.filter(function (f) {
            return f.path == oldFileNoExt;
        });
        if (matches.length) {
            for (var _i = 0; _i < matches.length; _i++) {
                var match = matches[_i];
                refactorings.push({
                    filePath: sourceFile.fileName,
                    span: {
                        start: match.range.pos,
                        length: match.range.end - match.range.pos
                    },
                    newText: tsconfig_1.makeRelativePath(path.dirname(sourceFile.fileName), newFileNoExt)
                });
            }
        }
    });
    return refactorings;
}
exports.getRenameFilesRefactorings = getRenameFilesRefactorings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvbW9kdWxlcy9tb3ZlRmlsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDaEQsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3BELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzdDLFNBQVMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFO0FBQ2pGLHNCQUFrQixHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNqRSxzQkFBa0IsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDakUsUUFBSSxZQUFZLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzVELFFBQUksWUFBWSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUM1RCxRQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDdEIsUUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzNDLGVBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxVQUFVLEVBQUU7QUFDdEMsWUFBSSxPQUFPLEdBQUcsVUFBVSxDQUFDLGlDQUFpQyxDQUFDLFVBQVUsQ0FBQyxDQUNqRSxNQUFNLENBQUMsVUFBVSxhQUFhLEVBQUU7QUFBRSxtQkFBTyxVQUFVLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUFFLENBQUMsQ0FDMUYsR0FBRyxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQ3BCLG1CQUFPO0FBQ0gsb0JBQUksRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hGLHFCQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7YUFDbkIsQ0FBQztTQUNMLENBQUMsQ0FBQztBQUNILFlBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFBRSxtQkFBTyxDQUFDLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQztTQUFFLENBQUMsQ0FBQztBQUM5RSxZQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7QUFDaEIsaUJBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ3hDLG9CQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsNEJBQVksQ0FBQyxJQUFJLENBQUM7QUFDZCw0QkFBUSxFQUFFLFVBQVUsQ0FBQyxRQUFRO0FBQzdCLHdCQUFJLEVBQUU7QUFDRiw2QkFBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRztBQUN0Qiw4QkFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRztxQkFDNUM7QUFDRCwyQkFBTyxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxZQUFZLENBQUM7aUJBQ3hGLENBQUMsQ0FBQzthQUNOO1NBQ0o7S0FDSixDQUFDLENBQUM7QUFDSCxXQUFPLFlBQVksQ0FBQztDQUN2QjtBQUNELE9BQU8sQ0FBQywwQkFBMEIsR0FBRywwQkFBMEIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9sYW5nL21vZHVsZXMvbW92ZUZpbGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXRzIHRoZSByZWZhY3RvcmluZ3MgeW91IHdvdWxkIG5lZWQgaWYgeW91IG1vdmUgZmlsZXMgYXJvdW5kXG4gKi9cbnZhciBhc3RVdGlsc18xID0gcmVxdWlyZShcIi4uL2ZpeG15dHMvYXN0VXRpbHNcIik7XG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xudmFyIHRzY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vLi4vdHNjb25maWcvdHNjb25maWdcIik7XG52YXIgZnNVdGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvZnNVdGlsXCIpO1xuZnVuY3Rpb24gZ2V0UmVuYW1lRmlsZXNSZWZhY3RvcmluZ3MocHJvZ3JhbSwgb2xkRGlyZWN0b3J5T3JGaWxlLCBuZXdEaXJlY3RvcnlPckZpbGUpIHtcbiAgICBvbGREaXJlY3RvcnlPckZpbGUgPSBmc1V0aWxfMS5jb25zaXN0ZW50UGF0aChvbGREaXJlY3RvcnlPckZpbGUpO1xuICAgIG5ld0RpcmVjdG9yeU9yRmlsZSA9IGZzVXRpbF8xLmNvbnNpc3RlbnRQYXRoKG5ld0RpcmVjdG9yeU9yRmlsZSk7XG4gICAgdmFyIG9sZEZpbGVOb0V4dCA9IHRzY29uZmlnXzEucmVtb3ZlRXh0KG9sZERpcmVjdG9yeU9yRmlsZSk7XG4gICAgdmFyIG5ld0ZpbGVOb0V4dCA9IHRzY29uZmlnXzEucmVtb3ZlRXh0KG5ld0RpcmVjdG9yeU9yRmlsZSk7XG4gICAgdmFyIHJlZmFjdG9yaW5ncyA9IFtdO1xuICAgIHZhciBzb3VyY2VGaWxlcyA9IHByb2dyYW0uZ2V0U291cmNlRmlsZXMoKTtcbiAgICBzb3VyY2VGaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICAgIHZhciBpbXBvcnRzID0gYXN0VXRpbHNfMS5nZXRTb3VyY2VGaWxlSW1wb3J0c1dpdGhUZXh0UmFuZ2Uoc291cmNlRmlsZSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGZpbGVSZWZlcmVuY2UpIHsgcmV0dXJuIHRzY29uZmlnXzEucGF0aElzUmVsYXRpdmUoZmlsZVJlZmVyZW5jZS50ZXh0KTsgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBmc1V0aWxfMS5jb25zaXN0ZW50UGF0aChwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKHNvdXJjZUZpbGUuZmlsZU5hbWUpLCByZWYudGV4dCkpLFxuICAgICAgICAgICAgICAgIHJhbmdlOiByZWYucmFuZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IGltcG9ydHMuZmlsdGVyKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmLnBhdGggPT0gb2xkRmlsZU5vRXh0OyB9KTtcbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbWF0Y2hlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBtYXRjaGVzW19pXTtcbiAgICAgICAgICAgICAgICByZWZhY3RvcmluZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBzb3VyY2VGaWxlLmZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbWF0Y2gucmFuZ2UucG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiBtYXRjaC5yYW5nZS5lbmQgLSBtYXRjaC5yYW5nZS5wb3NcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbmV3VGV4dDogdHNjb25maWdfMS5tYWtlUmVsYXRpdmVQYXRoKHBhdGguZGlybmFtZShzb3VyY2VGaWxlLmZpbGVOYW1lKSwgbmV3RmlsZU5vRXh0KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlZmFjdG9yaW5ncztcbn1cbmV4cG9ydHMuZ2V0UmVuYW1lRmlsZXNSZWZhY3RvcmluZ3MgPSBnZXRSZW5hbWVGaWxlc1JlZmFjdG9yaW5ncztcbiJdfQ==