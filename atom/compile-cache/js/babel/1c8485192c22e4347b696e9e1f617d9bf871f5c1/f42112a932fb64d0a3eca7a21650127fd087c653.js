'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var MATCH_PREFIX_CASE_SENSITIVE_SCORE = 6;
var MATCH_PREFIX_CASE_INSENSITIVE_SCORE = 4;
var MATCH_TOKEN_CASE_SENSITIVE_SCORE = 2;
var MATCH_TOKEN_CASE_INSENSITIVE_SCORE = 0;
var MATCH_PRIVATE_FUNCTION_PENALTY = -4;
var MATCH_APLHABETICAL_SCORE = 1;

function compareHackCompletions(token) {
  var tokenLowerCase = token.toLowerCase();

  return function (matchText1, matchText2) {
    var matchTexts = [matchText1, matchText2];
    var scores = matchTexts.map(function (matchText, i) {
      if (matchText.startsWith(token)) {
        // Matches starting with the prefix gets the highest score.
        return MATCH_PREFIX_CASE_SENSITIVE_SCORE;
      } else if (matchText.toLowerCase().startsWith(tokenLowerCase)) {
        // Ignore case score matches gets a good score.
        return MATCH_PREFIX_CASE_INSENSITIVE_SCORE;
      }

      var score;
      if (matchText.indexOf(token) !== -1) {
        // Small score for a match that contains the token case-sensitive.
        score = MATCH_TOKEN_CASE_SENSITIVE_SCORE;
      } else {
        // Zero score for a match that contains the token without case-sensitive matching.
        score = MATCH_TOKEN_CASE_INSENSITIVE_SCORE;
      }

      // Private functions gets negative score.
      if (matchText.startsWith('_')) {
        score += MATCH_PRIVATE_FUNCTION_PENALTY;
      }
      return score;
    });
    // Finally, consider the alphabetical order, but not higher than any other score.
    if (matchTexts[0] < matchTexts[1]) {
      scores[0] += MATCH_APLHABETICAL_SCORE;
    } else {
      scores[1] += MATCH_APLHABETICAL_SCORE;
    }
    return scores[1] - scores[0];
  };
}

module.exports = {
  compareHackCompletions: compareHackCompletions
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLWhhY2svbGliL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7Ozs7QUFXWixJQUFNLGlDQUFpQyxHQUFHLENBQUMsQ0FBQztBQUM1QyxJQUFNLG1DQUFtQyxHQUFHLENBQUMsQ0FBQztBQUM5QyxJQUFNLGdDQUFnQyxHQUFHLENBQUMsQ0FBQztBQUMzQyxJQUFNLGtDQUFrQyxHQUFHLENBQUMsQ0FBQztBQUM3QyxJQUFNLDhCQUE4QixHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzFDLElBQU0sd0JBQXdCLEdBQUcsQ0FBQyxDQUFDOztBQUVuQyxTQUFTLHNCQUFzQixDQUFDLEtBQWEsRUFBc0Q7QUFDakcsTUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDOztBQUV6QyxTQUFPLFVBQUMsVUFBVSxFQUFVLFVBQVUsRUFBYTtBQUNqRCxRQUFJLFVBQVUsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMxQyxRQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQUMsU0FBUyxFQUFFLENBQUMsRUFBSztBQUM1QyxVQUFJLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7O0FBRS9CLGVBQU8saUNBQWlDLENBQUM7T0FDMUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUU7O0FBRTdELGVBQU8sbUNBQW1DLENBQUM7T0FDNUM7O0FBRUQsVUFBSSxLQUFLLENBQUM7QUFDVixVQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7O0FBRW5DLGFBQUssR0FBRyxnQ0FBZ0MsQ0FBQztPQUMxQyxNQUFNOztBQUVMLGFBQUssR0FBRyxrQ0FBa0MsQ0FBQztPQUM1Qzs7O0FBR0QsVUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzdCLGFBQUssSUFBSSw4QkFBOEIsQ0FBQztPQUN6QztBQUNELGFBQU8sS0FBSyxDQUFDO0tBQ2QsQ0FBQyxDQUFDOztBQUVILFFBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNqQyxZQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksd0JBQXdCLENBQUM7S0FDdkMsTUFBTTtBQUNMLFlBQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSx3QkFBd0IsQ0FBQztLQUN2QztBQUNELFdBQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUM5QixDQUFDO0NBQ0g7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLHdCQUFzQixFQUF0QixzQkFBc0I7Q0FDdkIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvbnVjbGlkZS1oYWNrL2xpYi91dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IE1BVENIX1BSRUZJWF9DQVNFX1NFTlNJVElWRV9TQ09SRSA9IDY7XG5jb25zdCBNQVRDSF9QUkVGSVhfQ0FTRV9JTlNFTlNJVElWRV9TQ09SRSA9IDQ7XG5jb25zdCBNQVRDSF9UT0tFTl9DQVNFX1NFTlNJVElWRV9TQ09SRSA9IDI7XG5jb25zdCBNQVRDSF9UT0tFTl9DQVNFX0lOU0VOU0lUSVZFX1NDT1JFID0gMDtcbmNvbnN0IE1BVENIX1BSSVZBVEVfRlVOQ1RJT05fUEVOQUxUWSA9IC00O1xuY29uc3QgTUFUQ0hfQVBMSEFCRVRJQ0FMX1NDT1JFID0gMTtcblxuZnVuY3Rpb24gY29tcGFyZUhhY2tDb21wbGV0aW9ucyh0b2tlbjogc3RyaW5nKTogKG1hdGNoVGV4dDE6IHN0cmluZywgbWF0Y2hUZXh0Mjogc3RyaW5nKSA9PiBudW1iZXIge1xuICB2YXIgdG9rZW5Mb3dlckNhc2UgPSB0b2tlbi50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiAobWF0Y2hUZXh0MTogc3RyaW5nLCBtYXRjaFRleHQyOiBzdHJpbmcpID0+IHtcbiAgICB2YXIgbWF0Y2hUZXh0cyA9IFttYXRjaFRleHQxLCBtYXRjaFRleHQyXTtcbiAgICB2YXIgc2NvcmVzID0gbWF0Y2hUZXh0cy5tYXAoKG1hdGNoVGV4dCwgaSkgPT4ge1xuICAgICAgaWYgKG1hdGNoVGV4dC5zdGFydHNXaXRoKHRva2VuKSkge1xuICAgICAgICAvLyBNYXRjaGVzIHN0YXJ0aW5nIHdpdGggdGhlIHByZWZpeCBnZXRzIHRoZSBoaWdoZXN0IHNjb3JlLlxuICAgICAgICByZXR1cm4gTUFUQ0hfUFJFRklYX0NBU0VfU0VOU0lUSVZFX1NDT1JFO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaFRleHQudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHRva2VuTG93ZXJDYXNlKSkge1xuICAgICAgICAvLyBJZ25vcmUgY2FzZSBzY29yZSBtYXRjaGVzIGdldHMgYSBnb29kIHNjb3JlLlxuICAgICAgICByZXR1cm4gTUFUQ0hfUFJFRklYX0NBU0VfSU5TRU5TSVRJVkVfU0NPUkU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzY29yZTtcbiAgICAgIGlmIChtYXRjaFRleHQuaW5kZXhPZih0b2tlbikgIT09IC0xKSB7XG4gICAgICAgIC8vIFNtYWxsIHNjb3JlIGZvciBhIG1hdGNoIHRoYXQgY29udGFpbnMgdGhlIHRva2VuIGNhc2Utc2Vuc2l0aXZlLlxuICAgICAgICBzY29yZSA9IE1BVENIX1RPS0VOX0NBU0VfU0VOU0lUSVZFX1NDT1JFO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gWmVybyBzY29yZSBmb3IgYSBtYXRjaCB0aGF0IGNvbnRhaW5zIHRoZSB0b2tlbiB3aXRob3V0IGNhc2Utc2Vuc2l0aXZlIG1hdGNoaW5nLlxuICAgICAgICBzY29yZSA9IE1BVENIX1RPS0VOX0NBU0VfSU5TRU5TSVRJVkVfU0NPUkU7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zIGdldHMgbmVnYXRpdmUgc2NvcmUuXG4gICAgICBpZiAobWF0Y2hUZXh0LnN0YXJ0c1dpdGgoJ18nKSkge1xuICAgICAgICBzY29yZSArPSBNQVRDSF9QUklWQVRFX0ZVTkNUSU9OX1BFTkFMVFk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2NvcmU7XG4gICAgfSk7XG4gICAgLy8gRmluYWxseSwgY29uc2lkZXIgdGhlIGFscGhhYmV0aWNhbCBvcmRlciwgYnV0IG5vdCBoaWdoZXIgdGhhbiBhbnkgb3RoZXIgc2NvcmUuXG4gICAgaWYgKG1hdGNoVGV4dHNbMF0gPCBtYXRjaFRleHRzWzFdKSB7XG4gICAgICBzY29yZXNbMF0gKz0gTUFUQ0hfQVBMSEFCRVRJQ0FMX1NDT1JFO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY29yZXNbMV0gKz0gTUFUQ0hfQVBMSEFCRVRJQ0FMX1NDT1JFO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcmVzWzFdIC0gc2NvcmVzWzBdO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcGFyZUhhY2tDb21wbGV0aW9ucyxcbn07XG4iXX0=