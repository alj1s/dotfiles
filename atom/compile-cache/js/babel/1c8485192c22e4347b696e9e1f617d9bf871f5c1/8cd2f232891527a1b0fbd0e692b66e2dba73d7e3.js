var path = require("path");
var tsconfig = require("../../tsconfig/tsconfig");
var utils = require("../utils");
var fuzzaldrin = require("fuzzaldrin");
function getExternalModuleNames(program) {
    var entries = [];
    program.getSourceFiles().forEach(function (sourceFile) {
        ts.forEachChild(sourceFile, function (child) {
            if (child.kind === 215 && child.name.kind === 8) {
                entries.push(child.name.text);
            }
        });
    });
    return entries;
}
function getPathCompletions(query) {
    var project = query.project;
    var sourceDir = path.dirname(query.filePath);
    var filePaths = project.projectFile.project.files.filter(function (p) {
        return p !== query.filePath;
    });
    var files = [];
    if (query.includeExternalModules) {
        var externalModules = getExternalModuleNames(project.languageService.getProgram());
        externalModules.forEach(function (e) {
            return files.push({
                name: "" + e,
                relativePath: e,
                fullPath: e
            });
        });
    }
    filePaths.forEach(function (p) {
        files.push({
            name: path.basename(p, ".ts"),
            relativePath: tsconfig.removeExt(tsconfig.makeRelativePath(sourceDir, p)),
            fullPath: p
        });
    });
    var endsInPunctuation = utils.prefixEndsInPunctuation(query.prefix);
    if (!endsInPunctuation) files = fuzzaldrin.filter(files, query.prefix, { key: "name" });
    var response = {
        files: files,
        endsInPunctuation: endsInPunctuation
    };
    return response;
}
exports.getPathCompletions = getPathCompletions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvbW9kdWxlcy9nZXRQYXRoQ29tcGxldGlvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ2xELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoQyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdkMsU0FBUyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUU7QUFDckMsUUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLFdBQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxVQUFVLEVBQUU7QUFDbkQsVUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDekMsZ0JBQUksS0FBSyxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO0FBQzdDLHVCQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakM7U0FDSixDQUFDLENBQUM7S0FDTixDQUFDLENBQUM7QUFDSCxXQUFPLE9BQU8sQ0FBQztDQUNsQjtBQUNELFNBQVMsa0JBQWtCLENBQUMsS0FBSyxFQUFFO0FBQy9CLFFBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDNUIsUUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0MsUUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUFFLGVBQU8sQ0FBQyxLQUFLLEtBQUssQ0FBQyxRQUFRLENBQUM7S0FBRSxDQUFDLENBQUM7QUFDeEcsUUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsUUFBSSxLQUFLLENBQUMsc0JBQXNCLEVBQUU7QUFDOUIsWUFBSSxlQUFlLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ25GLHVCQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQUUsbUJBQU8sS0FBSyxDQUFDLElBQUksQ0FBQztBQUNyRCxvQkFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDO0FBQ1osNEJBQVksRUFBRSxDQUFDO0FBQ2Ysd0JBQVEsRUFBRSxDQUFDO2FBQ2QsQ0FBQyxDQUFDO1NBQUUsQ0FBQyxDQUFDO0tBQ1Y7QUFDRCxhQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzNCLGFBQUssQ0FBQyxJQUFJLENBQUM7QUFDUCxnQkFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUM3Qix3QkFBWSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6RSxvQkFBUSxFQUFFLENBQUM7U0FDZCxDQUFDLENBQUM7S0FDTixDQUFDLENBQUM7QUFDSCxRQUFJLGlCQUFpQixHQUFHLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEUsUUFBSSxDQUFDLGlCQUFpQixFQUNsQixLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLFFBQUksUUFBUSxHQUFHO0FBQ1gsYUFBSyxFQUFFLEtBQUs7QUFDWix5QkFBaUIsRUFBRSxpQkFBaUI7S0FDdkMsQ0FBQztBQUNGLFdBQU8sUUFBUSxDQUFDO0NBQ25CO0FBQ0QsT0FBTyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvbW9kdWxlcy9nZXRQYXRoQ29tcGxldGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xudmFyIHRzY29uZmlnID0gcmVxdWlyZShcIi4uLy4uL3RzY29uZmlnL3RzY29uZmlnXCIpO1xudmFyIHV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIGZ1enphbGRyaW4gPSByZXF1aXJlKCdmdXp6YWxkcmluJyk7XG5mdW5jdGlvbiBnZXRFeHRlcm5hbE1vZHVsZU5hbWVzKHByb2dyYW0pIHtcbiAgICB2YXIgZW50cmllcyA9IFtdO1xuICAgIHByb2dyYW0uZ2V0U291cmNlRmlsZXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICAgIHRzLmZvckVhY2hDaGlsZChzb3VyY2VGaWxlLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5raW5kID09PSAyMTUgJiYgY2hpbGQubmFtZS5raW5kID09PSA4KSB7XG4gICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKGNoaWxkLm5hbWUudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBlbnRyaWVzO1xufVxuZnVuY3Rpb24gZ2V0UGF0aENvbXBsZXRpb25zKHF1ZXJ5KSB7XG4gICAgdmFyIHByb2plY3QgPSBxdWVyeS5wcm9qZWN0O1xuICAgIHZhciBzb3VyY2VEaXIgPSBwYXRoLmRpcm5hbWUocXVlcnkuZmlsZVBhdGgpO1xuICAgIHZhciBmaWxlUGF0aHMgPSBwcm9qZWN0LnByb2plY3RGaWxlLnByb2plY3QuZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwICE9PSBxdWVyeS5maWxlUGF0aDsgfSk7XG4gICAgdmFyIGZpbGVzID0gW107XG4gICAgaWYgKHF1ZXJ5LmluY2x1ZGVFeHRlcm5hbE1vZHVsZXMpIHtcbiAgICAgICAgdmFyIGV4dGVybmFsTW9kdWxlcyA9IGdldEV4dGVybmFsTW9kdWxlTmFtZXMocHJvamVjdC5sYW5ndWFnZVNlcnZpY2UuZ2V0UHJvZ3JhbSgpKTtcbiAgICAgICAgZXh0ZXJuYWxNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGZpbGVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogXCJcIiArIGUsXG4gICAgICAgICAgICByZWxhdGl2ZVBhdGg6IGUsXG4gICAgICAgICAgICBmdWxsUGF0aDogZVxuICAgICAgICB9KTsgfSk7XG4gICAgfVxuICAgIGZpbGVQYXRocy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIGZpbGVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogcGF0aC5iYXNlbmFtZShwLCAnLnRzJyksXG4gICAgICAgICAgICByZWxhdGl2ZVBhdGg6IHRzY29uZmlnLnJlbW92ZUV4dCh0c2NvbmZpZy5tYWtlUmVsYXRpdmVQYXRoKHNvdXJjZURpciwgcCkpLFxuICAgICAgICAgICAgZnVsbFBhdGg6IHBcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGVuZHNJblB1bmN0dWF0aW9uID0gdXRpbHMucHJlZml4RW5kc0luUHVuY3R1YXRpb24ocXVlcnkucHJlZml4KTtcbiAgICBpZiAoIWVuZHNJblB1bmN0dWF0aW9uKVxuICAgICAgICBmaWxlcyA9IGZ1enphbGRyaW4uZmlsdGVyKGZpbGVzLCBxdWVyeS5wcmVmaXgsIHsga2V5OiAnbmFtZScgfSk7XG4gICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBmaWxlczogZmlsZXMsXG4gICAgICAgIGVuZHNJblB1bmN0dWF0aW9uOiBlbmRzSW5QdW5jdHVhdGlvblxuICAgIH07XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xufVxuZXhwb3J0cy5nZXRQYXRoQ29tcGxldGlvbnMgPSBnZXRQYXRoQ29tcGxldGlvbnM7XG4iXX0=