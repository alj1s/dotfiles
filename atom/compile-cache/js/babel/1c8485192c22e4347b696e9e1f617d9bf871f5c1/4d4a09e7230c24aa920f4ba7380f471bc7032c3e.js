var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sp = require("atom-space-pen-views");
var atomUtils = require("../atomUtils");
var ProjectSymbolsView = (function (_super) {
    __extends(ProjectSymbolsView, _super);
    function ProjectSymbolsView() {
        _super.apply(this, arguments);
        this.panel = null;
    }
    Object.defineProperty(ProjectSymbolsView.prototype, "$", {
        get: function get() {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProjectSymbolsView.prototype, "filterView", {
        get: function get() {
            return {
                $: this.filterEditorView,
                model: this.filterEditorView.model
            };
        },
        enumerable: true,
        configurable: true
    });
    ProjectSymbolsView.prototype.setNavBarItems = function (tsItems) {
        _super.prototype.setMaxItems.call(this, 40);
        var items = tsItems;
        _super.prototype.setItems.call(this, items);
    };
    ProjectSymbolsView.prototype.viewForItem = function (item) {
        return "\n            <li>\n                <div class=\"highlight\">" + item.name + "</div>\n                <div class=\"pull-right\" style=\"font-weight: bold; color:" + atomUtils.kindToColor(item.kind) + "\">" + item.kind + "</div>\n                <div class=\"clear\">" + item.fileName + " : " + (item.position.line + 1) + "</div>\n            </li>\n        ";
    };
    ProjectSymbolsView.prototype.confirmed = function (item) {
        atom.workspace.open(item.filePath, {
            initialLine: item.position.line,
            initialColumn: item.position.col
        });
        this.hide();
    };
    ProjectSymbolsView.prototype.getFilterKey = function () {
        return "name";
    };
    ProjectSymbolsView.prototype.show = function () {
        this.storeFocusedElement();
        if (!this.panel) this.panel = atom.workspace.addModalPanel({ item: this });
        this.panel.show();
        this.focusFilterEditor();
    };
    ProjectSymbolsView.prototype.hide = function () {
        this.panel.hide();
        this.restoreFocus();
    };
    ProjectSymbolsView.prototype.cancelled = function () {
        this.hide();
    };
    return ProjectSymbolsView;
})(sp.SelectListView);
exports.ProjectSymbolsView = ProjectSymbolsView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvcHJvamVjdFN5bWJvbHNWaWV3LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksU0FBUyxHQUFHLEFBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3hELFNBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RELGFBQVMsRUFBRSxHQUFHO0FBQUUsWUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7S0FBRTtBQUN2QyxLQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQSxBQUFDLENBQUM7Q0FDeEYsQ0FBQztBQUNGLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3pDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4QyxJQUFJLGtCQUFrQixHQUFHLENBQUMsVUFBVSxNQUFNLEVBQUU7QUFDeEMsYUFBUyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLGFBQVMsa0JBQWtCLEdBQUc7QUFDMUIsY0FBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUIsWUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDckI7QUFDRCxVQUFNLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7QUFDckQsV0FBRyxFQUFFLGVBQVk7QUFDYixtQkFBTyxJQUFJLENBQUM7U0FDZjtBQUNELGtCQUFVLEVBQUUsSUFBSTtBQUNoQixvQkFBWSxFQUFFLElBQUk7S0FDckIsQ0FBQyxDQUFDO0FBQ0gsVUFBTSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFO0FBQzlELFdBQUcsRUFBRSxlQUFZO0FBQ2IsbUJBQU87QUFDSCxpQkFBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7QUFDeEIscUJBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSzthQUNyQyxDQUFDO1NBQ0w7QUFDRCxrQkFBVSxFQUFFLElBQUk7QUFDaEIsb0JBQVksRUFBRSxJQUFJO0tBQ3JCLENBQUMsQ0FBQztBQUNILHNCQUFrQixDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsVUFBVSxPQUFPLEVBQUU7QUFDN0QsY0FBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM1QyxZQUFJLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDcEIsY0FBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMvQyxDQUFDO0FBQ0Ysc0JBQWtCLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFVLElBQUksRUFBRTtBQUN2RCxlQUFPLCtEQUErRCxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUZBQXFGLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsK0NBQStDLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBLEFBQUMsR0FBRyxxQ0FBcUMsQ0FBQztLQUNsWCxDQUFDO0FBQ0Ysc0JBQWtCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLElBQUksRUFBRTtBQUNyRCxZQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQy9CLHVCQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJO0FBQy9CLHlCQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHO1NBQ25DLENBQUMsQ0FBQztBQUNILFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmLENBQUM7QUFDRixzQkFBa0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFlBQVk7QUFBRSxlQUFPLE1BQU0sQ0FBQztLQUFFLENBQUM7QUFDM0Usc0JBQWtCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxZQUFZO0FBQzVDLFlBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQzNCLFlBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxZQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xCLFlBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0tBQzVCLENBQUM7QUFDRixzQkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFlBQVk7QUFDNUMsWUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQixZQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDdkIsQ0FBQztBQUNGLHNCQUFrQixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBWTtBQUNqRCxZQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDZixDQUFDO0FBQ0YsV0FBTyxrQkFBa0IsQ0FBQztDQUM3QixDQUFBLENBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RCLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9hdG9tL3ZpZXdzL3Byb2plY3RTeW1ib2xzVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIHNwID0gcmVxdWlyZSgnYXRvbS1zcGFjZS1wZW4tdmlld3MnKTtcbnZhciBhdG9tVXRpbHMgPSByZXF1aXJlKFwiLi4vYXRvbVV0aWxzXCIpO1xudmFyIFByb2plY3RTeW1ib2xzVmlldyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFByb2plY3RTeW1ib2xzVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcm9qZWN0U3ltYm9sc1ZpZXcoKSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnBhbmVsID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb2plY3RTeW1ib2xzVmlldy5wcm90b3R5cGUsIFwiJFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm9qZWN0U3ltYm9sc1ZpZXcucHJvdG90eXBlLCBcImZpbHRlclZpZXdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJDogdGhpcy5maWx0ZXJFZGl0b3JWaWV3LFxuICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLmZpbHRlckVkaXRvclZpZXcubW9kZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFByb2plY3RTeW1ib2xzVmlldy5wcm90b3R5cGUuc2V0TmF2QmFySXRlbXMgPSBmdW5jdGlvbiAodHNJdGVtcykge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnNldE1heEl0ZW1zLmNhbGwodGhpcywgNDApO1xuICAgICAgICB2YXIgaXRlbXMgPSB0c0l0ZW1zO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnNldEl0ZW1zLmNhbGwodGhpcywgaXRlbXMpO1xuICAgIH07XG4gICAgUHJvamVjdFN5bWJvbHNWaWV3LnByb3RvdHlwZS52aWV3Rm9ySXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBcIlxcbiAgICAgICAgICAgIDxsaT5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGlnaGxpZ2h0XFxcIj5cIiArIGl0ZW0ubmFtZSArIFwiPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInB1bGwtcmlnaHRcXFwiIHN0eWxlPVxcXCJmb250LXdlaWdodDogYm9sZDsgY29sb3I6XCIgKyBhdG9tVXRpbHMua2luZFRvQ29sb3IoaXRlbS5raW5kKSArIFwiXFxcIj5cIiArIGl0ZW0ua2luZCArIFwiPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyXFxcIj5cIiArIGl0ZW0uZmlsZU5hbWUgKyBcIiA6IFwiICsgKGl0ZW0ucG9zaXRpb24ubGluZSArIDEpICsgXCI8L2Rpdj5cXG4gICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgXCI7XG4gICAgfTtcbiAgICBQcm9qZWN0U3ltYm9sc1ZpZXcucHJvdG90eXBlLmNvbmZpcm1lZCA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIGF0b20ud29ya3NwYWNlLm9wZW4oaXRlbS5maWxlUGF0aCwge1xuICAgICAgICAgICAgaW5pdGlhbExpbmU6IGl0ZW0ucG9zaXRpb24ubGluZSxcbiAgICAgICAgICAgIGluaXRpYWxDb2x1bW46IGl0ZW0ucG9zaXRpb24uY29sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuICAgIFByb2plY3RTeW1ib2xzVmlldy5wcm90b3R5cGUuZ2V0RmlsdGVyS2V5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ25hbWUnOyB9O1xuICAgIFByb2plY3RTeW1ib2xzVmlldy5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9yZUZvY3VzZWRFbGVtZW50KCk7XG4gICAgICAgIGlmICghdGhpcy5wYW5lbClcbiAgICAgICAgICAgIHRoaXMucGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHsgaXRlbTogdGhpcyB9KTtcbiAgICAgICAgdGhpcy5wYW5lbC5zaG93KCk7XG4gICAgICAgIHRoaXMuZm9jdXNGaWx0ZXJFZGl0b3IoKTtcbiAgICB9O1xuICAgIFByb2plY3RTeW1ib2xzVmlldy5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYW5lbC5oaWRlKCk7XG4gICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgfTtcbiAgICBQcm9qZWN0U3ltYm9sc1ZpZXcucHJvdG90eXBlLmNhbmNlbGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJvamVjdFN5bWJvbHNWaWV3O1xufSkoc3AuU2VsZWN0TGlzdFZpZXcpO1xuZXhwb3J0cy5Qcm9qZWN0U3ltYm9sc1ZpZXcgPSBQcm9qZWN0U3ltYm9sc1ZpZXc7XG4iXX0=