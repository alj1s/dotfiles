'use babel';
/* @flow */

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _require = require('atom');

var Range = _require.Range;

describe('FlowLinter::processDiagnostics', function () {

  var FlowLinter = require('../lib/FlowLinter');

  it('should propertly transform a simple diagnostic', function () {
    var diags = [{
      message: [{
        path: 'myPath',
        descr: 'message',
        line: 1,
        endline: 2,
        start: 3,
        end: 4,
        code: 0
      }]
    }];

    var expectedOutput = {
      text: 'message',
      type: 'Error',
      filePath: 'myPath',
      range: new Range([0, 2], [1, 4])
    };

    var message = FlowLinter.processDiagnostics(diags, 'myPath')[0];
    expect(message).toEqual(expectedOutput);
  });

  it('should filter diagnostics not in the target file', function () {
    var diags = [{
      message: [{
        path: 'notMyPath',
        descr: 'message',
        line: 1,
        endline: 2,
        start: 3,
        end: 4,
        code: 0
      }]
    }];

    var message = FlowLinter.processDiagnostics(diags, 'myPath')[0];
    expect(message).toBeUndefined();
  });

  it('should merge diagnostic messages spanning files', function () {
    var diags = [{
      message: [{
        path: 'myPath',
        descr: 'message',
        line: 1,
        endline: 2,
        start: 3,
        end: 4,
        code: 0
      }, {
        path: 'notMyPath',
        descr: 'more message',
        line: 5,
        endline: 6,
        start: 7,
        end: 8,
        code: 0
      }]
    }];

    var expectedOutput = {
      type: 'Error',
      text: 'message more message',
      filePath: 'myPath',
      range: new Range([0, 2], [1, 4])
    };

    var message = FlowLinter.processDiagnostics(diags, 'myPath')[0];
    expect(message).toEqual(expectedOutput);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLWZsb3cvc3BlYy9GbG93TGludGVyLXNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7OztlQVdFLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0lBQXhCLEtBQUssWUFBTCxLQUFLOztBQUVWLFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNOztBQUUvQyxNQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7QUFFOUMsSUFBRSxDQUFDLGdEQUFnRCxFQUFFLFlBQU07QUFDekQsUUFBSSxLQUFLLEdBQUcsQ0FDVjtBQUNFLGFBQU8sRUFBRSxDQUNQO0FBQ0UsWUFBSSxFQUFFLFFBQVE7QUFDZCxhQUFLLEVBQUUsU0FBUztBQUNoQixZQUFJLEVBQUUsQ0FBQztBQUNQLGVBQU8sRUFBRSxDQUFDO0FBQ1YsYUFBSyxFQUFFLENBQUM7QUFDUixXQUFHLEVBQUUsQ0FBQztBQUNOLFlBQUksRUFBRSxDQUFDO09BQ1IsQ0FDRjtLQUNGLENBQ0YsQ0FBQzs7QUFFRixRQUFJLGNBQWMsR0FBRztBQUNuQixVQUFJLEVBQUUsU0FBUztBQUNmLFVBQUksRUFBRSxPQUFPO0FBQ2IsY0FBUSxFQUFFLFFBQVE7QUFDbEIsV0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2pDLENBQUM7O0FBRUYsUUFBSSxPQUFPLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxVQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0dBQ3pDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsa0RBQWtELEVBQUUsWUFBTTtBQUMzRCxRQUFJLEtBQUssR0FBRyxDQUNWO0FBQ0UsYUFBTyxFQUFFLENBQ1A7QUFDRSxZQUFJLEVBQUUsV0FBVztBQUNqQixhQUFLLEVBQUUsU0FBUztBQUNoQixZQUFJLEVBQUUsQ0FBQztBQUNQLGVBQU8sRUFBRSxDQUFDO0FBQ1YsYUFBSyxFQUFFLENBQUM7QUFDUixXQUFHLEVBQUUsQ0FBQztBQUNOLFlBQUksRUFBRSxDQUFDO09BQ1IsQ0FDRjtLQUNGLENBQ0YsQ0FBQzs7QUFFRixRQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLFVBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztHQUNqQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQU07QUFDMUQsUUFBSSxLQUFLLEdBQUcsQ0FDVjtBQUNFLGFBQU8sRUFBRSxDQUNQO0FBQ0UsWUFBSSxFQUFFLFFBQVE7QUFDZCxhQUFLLEVBQUUsU0FBUztBQUNoQixZQUFJLEVBQUUsQ0FBQztBQUNQLGVBQU8sRUFBRSxDQUFDO0FBQ1YsYUFBSyxFQUFFLENBQUM7QUFDUixXQUFHLEVBQUUsQ0FBQztBQUNOLFlBQUksRUFBRSxDQUFDO09BQ1IsRUFDRDtBQUNFLFlBQUksRUFBRSxXQUFXO0FBQ2pCLGFBQUssRUFBRSxjQUFjO0FBQ3JCLFlBQUksRUFBRSxDQUFDO0FBQ1AsZUFBTyxFQUFFLENBQUM7QUFDVixhQUFLLEVBQUUsQ0FBQztBQUNSLFdBQUcsRUFBRSxDQUFDO0FBQ04sWUFBSSxFQUFFLENBQUM7T0FDUixDQUNGO0tBQ0YsQ0FDRixDQUFDOztBQUVGLFFBQUksY0FBYyxHQUFHO0FBQ25CLFVBQUksRUFBRSxPQUFPO0FBQ2IsVUFBSSxFQUFFLHNCQUFzQjtBQUM1QixjQUFRLEVBQUUsUUFBUTtBQUNsQixXQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDakMsQ0FBQzs7QUFFRixRQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLFVBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7R0FDekMsQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9udWNsaWRlLWZsb3cvc3BlYy9GbG93TGludGVyLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIge1JhbmdlfSA9IHJlcXVpcmUoJ2F0b20nKTtcblxuZGVzY3JpYmUoJ0Zsb3dMaW50ZXI6OnByb2Nlc3NEaWFnbm9zdGljcycsICgpID0+IHtcblxuICB2YXIgRmxvd0xpbnRlciA9IHJlcXVpcmUoJy4uL2xpYi9GbG93TGludGVyJyk7XG5cbiAgaXQoJ3Nob3VsZCBwcm9wZXJ0bHkgdHJhbnNmb3JtIGEgc2ltcGxlIGRpYWdub3N0aWMnLCAoKSA9PiB7XG4gICAgdmFyIGRpYWdzID0gW1xuICAgICAge1xuICAgICAgICBtZXNzYWdlOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGF0aDogJ215UGF0aCcsXG4gICAgICAgICAgICBkZXNjcjogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgIGVuZGxpbmU6IDIsXG4gICAgICAgICAgICBzdGFydDogMyxcbiAgICAgICAgICAgIGVuZDogNCxcbiAgICAgICAgICAgIGNvZGU6IDAsXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXTtcblxuICAgIHZhciBleHBlY3RlZE91dHB1dCA9IHtcbiAgICAgIHRleHQ6ICdtZXNzYWdlJyxcbiAgICAgIHR5cGU6ICdFcnJvcicsXG4gICAgICBmaWxlUGF0aDogJ215UGF0aCcsXG4gICAgICByYW5nZTogbmV3IFJhbmdlKFswLCAyXSwgWzEsIDRdKSxcbiAgICB9O1xuXG4gICAgdmFyIG1lc3NhZ2UgPSBGbG93TGludGVyLnByb2Nlc3NEaWFnbm9zdGljcyhkaWFncywgJ215UGF0aCcpWzBdO1xuICAgIGV4cGVjdChtZXNzYWdlKS50b0VxdWFsKGV4cGVjdGVkT3V0cHV0KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmaWx0ZXIgZGlhZ25vc3RpY3Mgbm90IGluIHRoZSB0YXJnZXQgZmlsZScsICgpID0+IHtcbiAgICB2YXIgZGlhZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIG1lc3NhZ2U6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXRoOiAnbm90TXlQYXRoJyxcbiAgICAgICAgICAgIGRlc2NyOiAnbWVzc2FnZScsXG4gICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgZW5kbGluZTogMixcbiAgICAgICAgICAgIHN0YXJ0OiAzLFxuICAgICAgICAgICAgZW5kOiA0LFxuICAgICAgICAgICAgY29kZTogMCxcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgdmFyIG1lc3NhZ2UgPSBGbG93TGludGVyLnByb2Nlc3NEaWFnbm9zdGljcyhkaWFncywgJ215UGF0aCcpWzBdO1xuICAgIGV4cGVjdChtZXNzYWdlKS50b0JlVW5kZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbWVyZ2UgZGlhZ25vc3RpYyBtZXNzYWdlcyBzcGFubmluZyBmaWxlcycsICgpID0+IHtcbiAgICB2YXIgZGlhZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIG1lc3NhZ2U6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwYXRoOiAnbXlQYXRoJyxcbiAgICAgICAgICAgIGRlc2NyOiAnbWVzc2FnZScsXG4gICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgZW5kbGluZTogMixcbiAgICAgICAgICAgIHN0YXJ0OiAzLFxuICAgICAgICAgICAgZW5kOiA0LFxuICAgICAgICAgICAgY29kZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcGF0aDogJ25vdE15UGF0aCcsXG4gICAgICAgICAgICBkZXNjcjogJ21vcmUgbWVzc2FnZScsXG4gICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgZW5kbGluZTogNixcbiAgICAgICAgICAgIHN0YXJ0OiA3LFxuICAgICAgICAgICAgZW5kOiA4LFxuICAgICAgICAgICAgY29kZTogMCxcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgdmFyIGV4cGVjdGVkT3V0cHV0ID0ge1xuICAgICAgdHlwZTogJ0Vycm9yJyxcbiAgICAgIHRleHQ6ICdtZXNzYWdlIG1vcmUgbWVzc2FnZScsXG4gICAgICBmaWxlUGF0aDogJ215UGF0aCcsXG4gICAgICByYW5nZTogbmV3IFJhbmdlKFswLCAyXSwgWzEsIDRdKSxcbiAgICB9O1xuXG4gICAgdmFyIG1lc3NhZ2UgPSBGbG93TGludGVyLnByb2Nlc3NEaWFnbm9zdGljcyhkaWFncywgJ215UGF0aCcpWzBdO1xuICAgIGV4cGVjdChtZXNzYWdlKS50b0VxdWFsKGV4cGVjdGVkT3V0cHV0KTtcbiAgfSk7XG5cbn0pO1xuIl19