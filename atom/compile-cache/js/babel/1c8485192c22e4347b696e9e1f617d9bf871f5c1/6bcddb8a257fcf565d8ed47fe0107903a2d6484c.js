var ast = require("../astUtils");
var os_1 = require("os");
function getIdentifierAndClassNames(error) {
    var errorText = error.messageText;
    if (typeof errorText !== "string") {
        console.error("I have no idea what this is:", errorText);
        return undefined;
    }
    ;
    var match = errorText.match(/Property \'(\w+)\' does not exist on type \'(\w+)\'./);
    if (!match) return;
    var identifierName = match[1],
        className = match[2];
    return { identifierName: identifierName, className: className };
}
function getLastNameAfterDot(text) {
    return text.substr(text.lastIndexOf(".") + 1);
}
function getTypeStringForNode(node, typeChecker) {
    var type = typeChecker.getTypeAtLocation(node);
    return ts.displayPartsToString(ts.typeToDisplayParts(typeChecker, type)).replace(/\s+/g, " ");
}
var AddClassMethod = (function () {
    function AddClassMethod() {
        this.key = AddClassMethod.name;
    }
    AddClassMethod.prototype.canProvideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == ts.Diagnostics.Property_0_does_not_exist_on_type_1.code;
        })[0];
        if (!relevantError) return;
        if (info.positionNode.kind !== 66) return;
        var match = getIdentifierAndClassNames(relevantError);
        if (!match) return;
        var identifierName = match.identifierName,
            className = match.className;
        return { display: "Add method \"" + identifierName + "\" to current class " + className };
    };
    AddClassMethod.prototype.provideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == ts.Diagnostics.Property_0_does_not_exist_on_type_1.code;
        })[0];
        var identifier = info.positionNode;
        var identifierName = identifier.text;
        var className = getIdentifierAndClassNames(relevantError).className;
        var typeString = "any";
        var parentOfParent = identifier.parent.parent;
        if (parentOfParent.kind == 178 && parentOfParent.operatorToken.getText().trim() == "=") {
            var binaryExpression = parentOfParent;
            typeString = getTypeStringForNode(binaryExpression.right, info.typeChecker);
        } else if (parentOfParent.kind == 165) {
            var nativeTypes = ["string", "number", "boolean", "object", "null", "undefined", "RegExp"];
            var abc = "abcdefghijklmnopqrstuvwxyz";
            var argsAlphabet = abc.split("");
            var argsAlphabetPosition = 0;
            var argName = "";
            var argCount = 0;
            var callExp = parentOfParent;
            var typeStringParts = ["("];
            var args = [];
            callExp.arguments.forEach(function (arg) {
                var argType = getTypeStringForNode(arg, info.typeChecker);
                if (nativeTypes.indexOf(argType) != -1 || argType.indexOf("{") != -1 || argType.indexOf("=>") != -1 || argType.indexOf("[]") != -1) {
                    var type = info.typeChecker.getTypeAtLocation(arg);
                    var typeName = "type";
                    if (type && type.symbol && type.symbol.name) {
                        typeName = type.symbol.name.replace(/[\[\]]/g, "");
                    }
                    ;
                    var hasAnonymous = typeName.indexOf("__") == 0;
                    var isAnonymousTypedArgument = hasAnonymous && typeName.substring(2) == "type";
                    var isAnonymousMethod = hasAnonymous && typeName.substring(2) == "function";
                    var isAnonymousObject = hasAnonymous && typeName.substring(2) == "object";
                    if (argType.indexOf("=>") != -1 && !isAnonymousTypedArgument && !isAnonymousMethod && !isAnonymousObject) {
                        if (typeName == "Array") typeName = "array";
                        argName = "" + typeName + argCount++;
                    } else if (argType.indexOf("[]") != -1) {
                        argName = "array" + argCount++;
                    } else {
                        if (isAnonymousMethod) {
                            typeName = "function";
                            argName = "" + typeName + argCount++;
                        } else if (isAnonymousObject) {
                            typeName = "object";
                            argName = "" + typeName + argCount++;
                        } else {
                            argName = argsAlphabet[argsAlphabetPosition];
                            argsAlphabet[argsAlphabetPosition] += argsAlphabet[argsAlphabetPosition].substring(1);
                            argsAlphabetPosition++;
                            argsAlphabetPosition %= abc.length;
                        }
                    }
                } else {
                    argName = argType.replace("typeof ", "");
                    if (argType.indexOf("typeof ") == -1) {
                        var firstLower = argName[0].toLowerCase();
                        if (argName.length == 1) {
                            argName = firstLower;
                        } else {
                            argName = firstLower + argName.substring(1);
                        }
                    }
                    argName += argCount.toString();
                    argCount++;
                }
                if (argType.indexOf("null") != -1 || argType.indexOf("undefined") != -1) {
                    argType = argType.replace(/null|undefined/g, "any");
                }
                args.push(argName + ": " + argType);
            });
            typeStringParts.push(args.join(", "));
            typeStringParts.push("): any { }");
            typeString = typeStringParts.join("");
        }
        var memberTarget = ast.getNodeByKindAndName(info.program, 211, className);
        if (!memberTarget) {
            memberTarget = ast.getNodeByKindAndName(info.program, 212, className);
        }
        if (!memberTarget) {
            return [];
        }
        var targetDeclaration = memberTarget;
        var firstBrace = targetDeclaration.getChildren().filter(function (x) {
            return x.kind == 14;
        })[0];
        var indentLength = info.service.getIndentationAtPosition(memberTarget.getSourceFile().fileName, firstBrace.end, info.project.projectFile.project.formatCodeOptions);
        var indent = Array(indentLength + info.project.projectFile.project.formatCodeOptions.IndentSize + 1).join(" ");
        var refactoring = {
            span: {
                start: firstBrace.end,
                length: 0
            },
            newText: "" + os_1.EOL + indent + "public " + identifierName + typeString,
            filePath: targetDeclaration.getSourceFile().fileName
        };
        return [refactoring];
    };
    return AddClassMethod;
})();
exports.AddClassMethod = AddClassMethod;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL2FkZENsYXNzTWV0aG9kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsU0FBUywwQkFBMEIsQ0FBQyxLQUFLLEVBQUU7QUFDdkMsUUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUNsQyxRQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtBQUMvQixlQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3pELGVBQU8sU0FBUyxDQUFDO0tBQ3BCO0FBQ0QsS0FBQztBQUNELFFBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztBQUNwRixRQUFJLENBQUMsS0FBSyxFQUNOLE9BQU87QUFDWCxRQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRCxXQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUM7Q0FDbkU7QUFDRCxTQUFTLG1CQUFtQixDQUFDLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUNqRDtBQUNELFNBQVMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtBQUM3QyxRQUFJLElBQUksR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsV0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDakc7QUFDRCxJQUFJLGNBQWMsR0FBRyxDQUFDLFlBQVk7QUFDOUIsYUFBUyxjQUFjLEdBQUc7QUFDdEIsWUFBSSxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDO0tBQ2xDO0FBQ0Qsa0JBQWMsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQ3JELFlBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQUUsbUJBQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQztTQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5SSxZQUFJLENBQUMsYUFBYSxFQUNkLE9BQU87QUFDWCxZQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFDN0IsT0FBTztBQUNYLFlBQUksS0FBSyxHQUFHLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELFlBQUksQ0FBQyxLQUFLLEVBQ04sT0FBTztBQUNYLFlBQUksY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjO1lBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7QUFDdkUsZUFBTyxFQUFFLE9BQU8sRUFBRSxlQUFlLEdBQUcsY0FBYyxHQUFHLHNCQUFzQixHQUFHLFNBQVMsRUFBRSxDQUFDO0tBQzdGLENBQUM7QUFDRixrQkFBYyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUU7QUFDbEQsWUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFBRSxtQkFBTyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsbUNBQW1DLENBQUMsSUFBSSxDQUFDO1NBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlJLFlBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDbkMsWUFBSSxjQUFjLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztBQUNyQyxZQUFJLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDcEUsWUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFlBQUksY0FBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQzlDLFlBQUksY0FBYyxDQUFDLElBQUksSUFBSSxHQUFHLElBQ3ZCLGNBQWMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFO0FBQ3pELGdCQUFJLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztBQUN0QyxzQkFBVSxHQUFHLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDL0UsTUFDSSxJQUFJLGNBQWMsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFO0FBQ2pDLGdCQUFJLFdBQVcsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzNGLGdCQUFJLEdBQUcsR0FBRyw0QkFBNEIsQ0FBQztBQUN2QyxnQkFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQyxnQkFBSSxvQkFBb0IsR0FBRyxDQUFDLENBQUM7QUFDN0IsZ0JBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNqQixnQkFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLGdCQUFJLE9BQU8sR0FBRyxjQUFjLENBQUM7QUFDN0IsZ0JBQUksZUFBZSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUIsZ0JBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNkLG1CQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRTtBQUNyQyxvQkFBSSxPQUFPLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxRCxvQkFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUMvQixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUMxQixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQ2hDLHdCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELHdCQUFJLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDdEIsd0JBQUksSUFBSSxJQUNKLElBQUksQ0FBQyxNQUFNLElBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7QUFDbEIsZ0NBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO3FCQUN0RDtBQUNELHFCQUFDO0FBQ0Qsd0JBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9DLHdCQUFJLHdCQUF3QixHQUFHLFlBQVksSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztBQUMvRSx3QkFBSSxpQkFBaUIsR0FBRyxZQUFZLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUM7QUFDNUUsd0JBQUksaUJBQWlCLEdBQUcsWUFBWSxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDO0FBQzFFLHdCQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQzNCLENBQUMsd0JBQXdCLElBQ3pCLENBQUMsaUJBQWlCLElBQ2xCLENBQUMsaUJBQWlCLEVBQUU7QUFDcEIsNEJBQUksUUFBUSxJQUFJLE9BQU8sRUFDbkIsUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUN2QiwrQkFBTyxHQUFHLEVBQUUsR0FBRyxRQUFRLEdBQUcsUUFBUSxFQUFFLENBQUM7cUJBQ3hDLE1BQ0ksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO0FBQ2xDLCtCQUFPLEdBQUcsT0FBTyxHQUFHLFFBQVEsRUFBRSxDQUFDO3FCQUNsQyxNQUNJO0FBQ0QsNEJBQUksaUJBQWlCLEVBQUU7QUFDbkIsb0NBQVEsR0FBRyxVQUFVLENBQUM7QUFDdEIsbUNBQU8sR0FBRyxFQUFFLEdBQUcsUUFBUSxHQUFHLFFBQVEsRUFBRSxDQUFDO3lCQUN4QyxNQUNJLElBQUksaUJBQWlCLEVBQUU7QUFDeEIsb0NBQVEsR0FBRyxRQUFRLENBQUM7QUFDcEIsbUNBQU8sR0FBRyxFQUFFLEdBQUcsUUFBUSxHQUFHLFFBQVEsRUFBRSxDQUFDO3lCQUN4QyxNQUNJO0FBQ0QsbUNBQU8sR0FBRyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM3Qyx3Q0FBWSxDQUFDLG9CQUFvQixDQUFDLElBQUksWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RGLGdEQUFvQixFQUFFLENBQUM7QUFDdkIsZ0RBQW9CLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQzt5QkFDdEM7cUJBQ0o7aUJBQ0osTUFDSTtBQUNELDJCQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDekMsd0JBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtBQUNsQyw0QkFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzFDLDRCQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO0FBQ3JCLG1DQUFPLEdBQUcsVUFBVSxDQUFDO3lCQUN4QixNQUNJO0FBQ0QsbUNBQU8sR0FBRyxVQUFVLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt5QkFDL0M7cUJBQ0o7QUFDRCwyQkFBTyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMvQiw0QkFBUSxFQUFFLENBQUM7aUJBQ2Q7QUFDRCxvQkFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDckUsMkJBQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUN2RDtBQUNELG9CQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUM7YUFDdkMsQ0FBQyxDQUFDO0FBQ0gsMkJBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLDJCQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ25DLHNCQUFVLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN6QztBQUNELFlBQUksWUFBWSxHQUFHLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMxRSxZQUFJLENBQUMsWUFBWSxFQUFFO0FBQ2Ysd0JBQVksR0FBRyxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDekU7QUFDRCxZQUFJLENBQUMsWUFBWSxFQUFFO0FBQ2YsbUJBQU8sRUFBRSxDQUFDO1NBQ2I7QUFDRCxZQUFJLGlCQUFpQixHQUFHLFlBQVksQ0FBQztBQUNyQyxZQUFJLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFBRSxtQkFBTyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztTQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRyxZQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNwSyxZQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9HLFlBQUksV0FBVyxHQUFHO0FBQ2QsZ0JBQUksRUFBRTtBQUNGLHFCQUFLLEVBQUUsVUFBVSxDQUFDLEdBQUc7QUFDckIsc0JBQU0sRUFBRSxDQUFDO2FBQ1o7QUFDRCxtQkFBTyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxTQUFTLEdBQUcsY0FBYyxHQUFHLFVBQVU7QUFDekUsb0JBQVEsRUFBRSxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRO1NBQ3ZELENBQUM7QUFDRixlQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDeEIsQ0FBQztBQUNGLFdBQU8sY0FBYyxDQUFDO0NBQ3pCLENBQUEsRUFBRyxDQUFDO0FBQ0wsT0FBTyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vbGFuZy9maXhteXRzL3F1aWNrRml4ZXMvYWRkQ2xhc3NNZXRob2QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXN0ID0gcmVxdWlyZShcIi4uL2FzdFV0aWxzXCIpO1xudmFyIG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG5mdW5jdGlvbiBnZXRJZGVudGlmaWVyQW5kQ2xhc3NOYW1lcyhlcnJvcikge1xuICAgIHZhciBlcnJvclRleHQgPSBlcnJvci5tZXNzYWdlVGV4dDtcbiAgICBpZiAodHlwZW9mIGVycm9yVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignSSBoYXZlIG5vIGlkZWEgd2hhdCB0aGlzIGlzOicsIGVycm9yVGV4dCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIDtcbiAgICB2YXIgbWF0Y2ggPSBlcnJvclRleHQubWF0Y2goL1Byb3BlcnR5IFxcJyhcXHcrKVxcJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlIFxcJyhcXHcrKVxcJy4vKTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGlkZW50aWZpZXJOYW1lID0gbWF0Y2hbMV0sIGNsYXNzTmFtZSA9IG1hdGNoWzJdO1xuICAgIHJldHVybiB7IGlkZW50aWZpZXJOYW1lOiBpZGVudGlmaWVyTmFtZSwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfTtcbn1cbmZ1bmN0aW9uIGdldExhc3ROYW1lQWZ0ZXJEb3QodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnN1YnN0cih0ZXh0Lmxhc3RJbmRleE9mKCcuJykgKyAxKTtcbn1cbmZ1bmN0aW9uIGdldFR5cGVTdHJpbmdGb3JOb2RlKG5vZGUsIHR5cGVDaGVja2VyKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihub2RlKTtcbiAgICByZXR1cm4gdHMuZGlzcGxheVBhcnRzVG9TdHJpbmcodHMudHlwZVRvRGlzcGxheVBhcnRzKHR5cGVDaGVja2VyLCB0eXBlKSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xufVxudmFyIEFkZENsYXNzTWV0aG9kID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBZGRDbGFzc01ldGhvZCgpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBBZGRDbGFzc01ldGhvZC5uYW1lO1xuICAgIH1cbiAgICBBZGRDbGFzc01ldGhvZC5wcm90b3R5cGUuY2FuUHJvdmlkZUZpeCA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIHZhciByZWxldmFudEVycm9yID0gaW5mby5wb3NpdGlvbkVycm9ycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguY29kZSA9PSB0cy5EaWFnbm9zdGljcy5Qcm9wZXJ0eV8wX2RvZXNfbm90X2V4aXN0X29uX3R5cGVfMS5jb2RlOyB9KVswXTtcbiAgICAgICAgaWYgKCFyZWxldmFudEVycm9yKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoaW5mby5wb3NpdGlvbk5vZGUua2luZCAhPT0gNjYpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBtYXRjaCA9IGdldElkZW50aWZpZXJBbmRDbGFzc05hbWVzKHJlbGV2YW50RXJyb3IpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaWRlbnRpZmllck5hbWUgPSBtYXRjaC5pZGVudGlmaWVyTmFtZSwgY2xhc3NOYW1lID0gbWF0Y2guY2xhc3NOYW1lO1xuICAgICAgICByZXR1cm4geyBkaXNwbGF5OiBcIkFkZCBtZXRob2QgXFxcIlwiICsgaWRlbnRpZmllck5hbWUgKyBcIlxcXCIgdG8gY3VycmVudCBjbGFzcyBcIiArIGNsYXNzTmFtZSB9O1xuICAgIH07XG4gICAgQWRkQ2xhc3NNZXRob2QucHJvdG90eXBlLnByb3ZpZGVGaXggPSBmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICB2YXIgcmVsZXZhbnRFcnJvciA9IGluZm8ucG9zaXRpb25FcnJvcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmNvZGUgPT0gdHMuRGlhZ25vc3RpY3MuUHJvcGVydHlfMF9kb2VzX25vdF9leGlzdF9vbl90eXBlXzEuY29kZTsgfSlbMF07XG4gICAgICAgIHZhciBpZGVudGlmaWVyID0gaW5mby5wb3NpdGlvbk5vZGU7XG4gICAgICAgIHZhciBpZGVudGlmaWVyTmFtZSA9IGlkZW50aWZpZXIudGV4dDtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGdldElkZW50aWZpZXJBbmRDbGFzc05hbWVzKHJlbGV2YW50RXJyb3IpLmNsYXNzTmFtZTtcbiAgICAgICAgdmFyIHR5cGVTdHJpbmcgPSAnYW55JztcbiAgICAgICAgdmFyIHBhcmVudE9mUGFyZW50ID0gaWRlbnRpZmllci5wYXJlbnQucGFyZW50O1xuICAgICAgICBpZiAocGFyZW50T2ZQYXJlbnQua2luZCA9PSAxNzhcbiAgICAgICAgICAgICYmIHBhcmVudE9mUGFyZW50Lm9wZXJhdG9yVG9rZW4uZ2V0VGV4dCgpLnRyaW0oKSA9PSAnPScpIHtcbiAgICAgICAgICAgIHZhciBiaW5hcnlFeHByZXNzaW9uID0gcGFyZW50T2ZQYXJlbnQ7XG4gICAgICAgICAgICB0eXBlU3RyaW5nID0gZ2V0VHlwZVN0cmluZ0Zvck5vZGUoYmluYXJ5RXhwcmVzc2lvbi5yaWdodCwgaW5mby50eXBlQ2hlY2tlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50T2ZQYXJlbnQua2luZCA9PSAxNjUpIHtcbiAgICAgICAgICAgIHZhciBuYXRpdmVUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJywgJ29iamVjdCcsICdudWxsJywgJ3VuZGVmaW5lZCcsICdSZWdFeHAnXTtcbiAgICAgICAgICAgIHZhciBhYmMgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuICAgICAgICAgICAgdmFyIGFyZ3NBbHBoYWJldCA9IGFiYy5zcGxpdCgnJyk7XG4gICAgICAgICAgICB2YXIgYXJnc0FscGhhYmV0UG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgdmFyIGFyZ05hbWUgPSAnJztcbiAgICAgICAgICAgIHZhciBhcmdDb3VudCA9IDA7XG4gICAgICAgICAgICB2YXIgY2FsbEV4cCA9IHBhcmVudE9mUGFyZW50O1xuICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmdQYXJ0cyA9IFsnKCddO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGNhbGxFeHAuYXJndW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgIHZhciBhcmdUeXBlID0gZ2V0VHlwZVN0cmluZ0Zvck5vZGUoYXJnLCBpbmZvLnR5cGVDaGVja2VyKTtcbiAgICAgICAgICAgICAgICBpZiAobmF0aXZlVHlwZXMuaW5kZXhPZihhcmdUeXBlKSAhPSAtMVxuICAgICAgICAgICAgICAgICAgICB8fCBhcmdUeXBlLmluZGV4T2YoJ3snKSAhPSAtMVxuICAgICAgICAgICAgICAgICAgICB8fCBhcmdUeXBlLmluZGV4T2YoJz0+JykgIT0gLTFcbiAgICAgICAgICAgICAgICAgICAgfHwgYXJnVHlwZS5pbmRleE9mKCdbXScpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gaW5mby50eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihhcmcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZU5hbWUgPSBcInR5cGVcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUuc3ltYm9sICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLnN5bWJvbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZSA9IHR5cGUuc3ltYm9sLm5hbWUucmVwbGFjZSgvW1xcW1xcXV0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0Fub255bW91cyA9IHR5cGVOYW1lLmluZGV4T2YoJ19fJykgPT0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQW5vbnltb3VzVHlwZWRBcmd1bWVudCA9IGhhc0Fub255bW91cyAmJiB0eXBlTmFtZS5zdWJzdHJpbmcoMikgPT0gXCJ0eXBlXCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0Fub255bW91c01ldGhvZCA9IGhhc0Fub255bW91cyAmJiB0eXBlTmFtZS5zdWJzdHJpbmcoMikgPT0gXCJmdW5jdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNBbm9ueW1vdXNPYmplY3QgPSBoYXNBbm9ueW1vdXMgJiYgdHlwZU5hbWUuc3Vic3RyaW5nKDIpID09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdUeXBlLmluZGV4T2YoJz0+JykgIT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFpc0Fub255bW91c1R5cGVkQXJndW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFpc0Fub255bW91c01ldGhvZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWlzQW5vbnltb3VzT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZU5hbWUgPT0gJ0FycmF5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZSA9ICdhcnJheSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lID0gXCJcIiArIHR5cGVOYW1lICsgYXJnQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmdUeXBlLmluZGV4T2YoJ1tdJykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWUgPSBcImFycmF5XCIgKyBhcmdDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQW5vbnltb3VzTWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWUgPSBcImZ1bmN0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZSA9IFwiXCIgKyB0eXBlTmFtZSArIGFyZ0NvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Fub255bW91c09iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lID0gXCJvYmplY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lID0gXCJcIiArIHR5cGVOYW1lICsgYXJnQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWUgPSBhcmdzQWxwaGFiZXRbYXJnc0FscGhhYmV0UG9zaXRpb25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NBbHBoYWJldFthcmdzQWxwaGFiZXRQb3NpdGlvbl0gKz0gYXJnc0FscGhhYmV0W2FyZ3NBbHBoYWJldFBvc2l0aW9uXS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnc0FscGhhYmV0UG9zaXRpb24rKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzQWxwaGFiZXRQb3NpdGlvbiAlPSBhYmMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdOYW1lID0gYXJnVHlwZS5yZXBsYWNlKCd0eXBlb2YgJywgJycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZS5pbmRleE9mKCd0eXBlb2YgJykgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdExvd2VyID0gYXJnTmFtZVswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ05hbWUubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lID0gZmlyc3RMb3dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWUgPSBmaXJzdExvd2VyICsgYXJnTmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnTmFtZSArPSBhcmdDb3VudC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBhcmdDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXJnVHlwZS5pbmRleE9mKCdudWxsJykgIT0gLTEgfHwgYXJnVHlwZS5pbmRleE9mKCd1bmRlZmluZWQnKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBhcmdUeXBlID0gYXJnVHlwZS5yZXBsYWNlKC9udWxsfHVuZGVmaW5lZC9nLCAnYW55Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmdOYW1lICsgXCI6IFwiICsgYXJnVHlwZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHR5cGVTdHJpbmdQYXJ0cy5wdXNoKGFyZ3Muam9pbignLCAnKSk7XG4gICAgICAgICAgICB0eXBlU3RyaW5nUGFydHMucHVzaChcIik6IGFueSB7IH1cIik7XG4gICAgICAgICAgICB0eXBlU3RyaW5nID0gdHlwZVN0cmluZ1BhcnRzLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZW1iZXJUYXJnZXQgPSBhc3QuZ2V0Tm9kZUJ5S2luZEFuZE5hbWUoaW5mby5wcm9ncmFtLCAyMTEsIGNsYXNzTmFtZSk7XG4gICAgICAgIGlmICghbWVtYmVyVGFyZ2V0KSB7XG4gICAgICAgICAgICBtZW1iZXJUYXJnZXQgPSBhc3QuZ2V0Tm9kZUJ5S2luZEFuZE5hbWUoaW5mby5wcm9ncmFtLCAyMTIsIGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZW1iZXJUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0RGVjbGFyYXRpb24gPSBtZW1iZXJUYXJnZXQ7XG4gICAgICAgIHZhciBmaXJzdEJyYWNlID0gdGFyZ2V0RGVjbGFyYXRpb24uZ2V0Q2hpbGRyZW4oKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgua2luZCA9PSAxNDsgfSlbMF07XG4gICAgICAgIHZhciBpbmRlbnRMZW5ndGggPSBpbmZvLnNlcnZpY2UuZ2V0SW5kZW50YXRpb25BdFBvc2l0aW9uKG1lbWJlclRhcmdldC5nZXRTb3VyY2VGaWxlKCkuZmlsZU5hbWUsIGZpcnN0QnJhY2UuZW5kLCBpbmZvLnByb2plY3QucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucyk7XG4gICAgICAgIHZhciBpbmRlbnQgPSBBcnJheShpbmRlbnRMZW5ndGggKyBpbmZvLnByb2plY3QucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucy5JbmRlbnRTaXplICsgMSkuam9pbignICcpO1xuICAgICAgICB2YXIgcmVmYWN0b3JpbmcgPSB7XG4gICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGZpcnN0QnJhY2UuZW5kLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5ld1RleHQ6IFwiXCIgKyBvc18xLkVPTCArIGluZGVudCArIFwicHVibGljIFwiICsgaWRlbnRpZmllck5hbWUgKyB0eXBlU3RyaW5nLFxuICAgICAgICAgICAgZmlsZVBhdGg6IHRhcmdldERlY2xhcmF0aW9uLmdldFNvdXJjZUZpbGUoKS5maWxlTmFtZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gW3JlZmFjdG9yaW5nXTtcbiAgICB9O1xuICAgIHJldHVybiBBZGRDbGFzc01ldGhvZDtcbn0pKCk7XG5leHBvcnRzLkFkZENsYXNzTWV0aG9kID0gQWRkQ2xhc3NNZXRob2Q7XG4iXX0=