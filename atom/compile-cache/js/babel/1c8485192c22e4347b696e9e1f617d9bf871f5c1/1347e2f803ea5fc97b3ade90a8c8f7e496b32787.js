var allTransformers = [];
function add(transformer) {
    transformer.regex = new RegExp("transform:" + transformer.name + "{[.\\s]*}transform:" + transformer.name, "g");
    allTransformers.push(transformer);
}
exports.add = add;
function getNames() {
    return allTransformers.map(function (at) {
        return at.name;
    });
}
exports.getNames = getNames;
function getRegexes() {
    return allTransformers.map(function (at) {
        return at.regex;
    });
}
exports.getRegexes = getRegexes;
var transformFinderRegex = /transform:(.*){/g;
var transformEndFinderRegexGenerator = function transformEndFinderRegexGenerator(name) {
    return new RegExp("}transform:" + name);
};
function getInitialTransformation(code) {
    var transforms = [];
    var processedSrcUpto = 0;
    var srcCode = code;
    var destCode = "";
    var destDelta = 0;
    while (true) {
        var remainingCode = code.substr(processedSrcUpto);
        var matches = transformFinderRegex.exec(remainingCode);
        if (!matches || !matches.length || matches.length < 2) return { transforms: transforms };
        var nextTransformName = matches.slice[1];
    }
    return { transforms: transforms };
}
exports.getInitialTransformation = getInitialTransformation;
function transform(name, code) {
    var transformer = allTransformers.filter(function (at) {
        return at.name == name;
    })[0];
    if (!transformer) {
        console.error("No transformer registered with name: ", name);
        return { code: "" };
    }
    return transformer.transform(code);
}
exports.transform = transform;
var expand = require("glob-expand");
var files = expand({ filter: "isFile", cwd: __dirname }, ["./implementations/*.js"]);
files = files.map(function (f) {
    return require(f);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvdHJhbnNmb3JtZXJzL3RyYW5zZm9ybWVyUmVnaXN0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLFNBQVMsR0FBRyxDQUFDLFdBQVcsRUFBRTtBQUN0QixlQUFXLENBQUMsS0FBSyxHQUFJLElBQUksTUFBTSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsSUFBSSxHQUFHLHFCQUFxQixHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEFBQUMsQ0FBQztBQUNsSCxtQkFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNyQztBQUNELE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2xCLFNBQVMsUUFBUSxHQUFHO0FBQ2hCLFdBQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUFFLGVBQU8sRUFBRSxDQUFDLElBQUksQ0FBQztLQUFFLENBQUMsQ0FBQztDQUNqRTtBQUNELE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQzVCLFNBQVMsVUFBVSxHQUFHO0FBQ2xCLFdBQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUFFLGVBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztLQUFFLENBQUMsQ0FBQztDQUNsRTtBQUNELE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQ2hDLElBQUksb0JBQW9CLEdBQUcsa0JBQWtCLENBQUM7QUFDOUMsSUFBSSxnQ0FBZ0MsR0FBRyxTQUFuQyxnQ0FBZ0MsQ0FBYSxJQUFJLEVBQUU7QUFBRSxXQUFPLElBQUksTUFBTSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQztDQUFFLENBQUM7QUFDcEcsU0FBUyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsUUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFFBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLFFBQUksT0FBTyxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbEIsUUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFdBQU8sSUFBSSxFQUFFO0FBQ1QsWUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ2xELFlBQUksT0FBTyxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2RCxZQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQztBQUN0QyxZQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUM7QUFDRCxXQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFDO0NBQ3JDO0FBQ0QsT0FBTyxDQUFDLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDO0FBQzVELFNBQVMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDM0IsUUFBSSxXQUFXLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUFFLGVBQU8sRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7S0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkYsUUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNkLGVBQU8sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0QsZUFBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN2QjtBQUNELFdBQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN0QztBQUNELE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzlCLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUNyRCx3QkFBd0IsQ0FDM0IsQ0FBQyxDQUFDO0FBQ0gsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFBRSxXQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUFFLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9sYW5nL3RyYW5zZm9ybWVycy90cmFuc2Zvcm1lclJlZ2lzdHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFsbFRyYW5zZm9ybWVycyA9IFtdO1xuZnVuY3Rpb24gYWRkKHRyYW5zZm9ybWVyKSB7XG4gICAgdHJhbnNmb3JtZXIucmVnZXggPSAobmV3IFJlZ0V4cChcInRyYW5zZm9ybTpcIiArIHRyYW5zZm9ybWVyLm5hbWUgKyBcIntbLlxcXFxzXSp9dHJhbnNmb3JtOlwiICsgdHJhbnNmb3JtZXIubmFtZSwgJ2cnKSk7XG4gICAgYWxsVHJhbnNmb3JtZXJzLnB1c2godHJhbnNmb3JtZXIpO1xufVxuZXhwb3J0cy5hZGQgPSBhZGQ7XG5mdW5jdGlvbiBnZXROYW1lcygpIHtcbiAgICByZXR1cm4gYWxsVHJhbnNmb3JtZXJzLm1hcChmdW5jdGlvbiAoYXQpIHsgcmV0dXJuIGF0Lm5hbWU7IH0pO1xufVxuZXhwb3J0cy5nZXROYW1lcyA9IGdldE5hbWVzO1xuZnVuY3Rpb24gZ2V0UmVnZXhlcygpIHtcbiAgICByZXR1cm4gYWxsVHJhbnNmb3JtZXJzLm1hcChmdW5jdGlvbiAoYXQpIHsgcmV0dXJuIGF0LnJlZ2V4OyB9KTtcbn1cbmV4cG9ydHMuZ2V0UmVnZXhlcyA9IGdldFJlZ2V4ZXM7XG52YXIgdHJhbnNmb3JtRmluZGVyUmVnZXggPSAvdHJhbnNmb3JtOiguKil7L2c7XG52YXIgdHJhbnNmb3JtRW5kRmluZGVyUmVnZXhHZW5lcmF0b3IgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbmV3IFJlZ0V4cChcIn10cmFuc2Zvcm06XCIgKyBuYW1lKTsgfTtcbmZ1bmN0aW9uIGdldEluaXRpYWxUcmFuc2Zvcm1hdGlvbihjb2RlKSB7XG4gICAgdmFyIHRyYW5zZm9ybXMgPSBbXTtcbiAgICB2YXIgcHJvY2Vzc2VkU3JjVXB0byA9IDA7XG4gICAgdmFyIHNyY0NvZGUgPSBjb2RlO1xuICAgIHZhciBkZXN0Q29kZSA9ICcnO1xuICAgIHZhciBkZXN0RGVsdGEgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZW1haW5pbmdDb2RlID0gY29kZS5zdWJzdHIocHJvY2Vzc2VkU3JjVXB0byk7XG4gICAgICAgIHZhciBtYXRjaGVzID0gdHJhbnNmb3JtRmluZGVyUmVnZXguZXhlYyhyZW1haW5pbmdDb2RlKTtcbiAgICAgICAgaWYgKCFtYXRjaGVzIHx8ICFtYXRjaGVzLmxlbmd0aCB8fCBtYXRjaGVzLmxlbmd0aCA8IDIpXG4gICAgICAgICAgICByZXR1cm4geyB0cmFuc2Zvcm1zOiB0cmFuc2Zvcm1zIH07XG4gICAgICAgIHZhciBuZXh0VHJhbnNmb3JtTmFtZSA9IG1hdGNoZXMuc2xpY2VbMV07XG4gICAgfVxuICAgIHJldHVybiB7IHRyYW5zZm9ybXM6IHRyYW5zZm9ybXMgfTtcbn1cbmV4cG9ydHMuZ2V0SW5pdGlhbFRyYW5zZm9ybWF0aW9uID0gZ2V0SW5pdGlhbFRyYW5zZm9ybWF0aW9uO1xuZnVuY3Rpb24gdHJhbnNmb3JtKG5hbWUsIGNvZGUpIHtcbiAgICB2YXIgdHJhbnNmb3JtZXIgPSBhbGxUcmFuc2Zvcm1lcnMuZmlsdGVyKGZ1bmN0aW9uIChhdCkgeyByZXR1cm4gYXQubmFtZSA9PSBuYW1lOyB9KVswXTtcbiAgICBpZiAoIXRyYW5zZm9ybWVyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIHRyYW5zZm9ybWVyIHJlZ2lzdGVyZWQgd2l0aCBuYW1lOiAnLCBuYW1lKTtcbiAgICAgICAgcmV0dXJuIHsgY29kZTogJycgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyLnRyYW5zZm9ybShjb2RlKTtcbn1cbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xudmFyIGV4cGFuZCA9IHJlcXVpcmUoJ2dsb2ItZXhwYW5kJyk7XG52YXIgZmlsZXMgPSBleHBhbmQoeyBmaWx0ZXI6ICdpc0ZpbGUnLCBjd2Q6IF9fZGlybmFtZSB9LCBbXG4gICAgXCIuL2ltcGxlbWVudGF0aW9ucy8qLmpzXCJcbl0pO1xuZmlsZXMgPSBmaWxlcy5tYXAoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHJlcXVpcmUoZik7IH0pO1xuIl19