var os_1 = require("os");
var displayPartsToString = ts.displayPartsToString,
    typeToDisplayParts = ts.typeToDisplayParts;
var getPathCompletions_1 = require("../../modules/getPathCompletions");
function getIdentifierAndFileNames(error, project) {
    var errorText = error.messageText;
    if (typeof errorText !== "string") {
        return undefined;
    }
    ;
    var match = errorText.match(/Cannot find name \'(\w+)\'./);
    if (!match) return;
    var identifierName = match[1];
    var files = getPathCompletions_1.getPathCompletions({
        project: project,
        filePath: error.file.fileName,
        prefix: identifierName,
        includeExternalModules: false
    }).files;
    var file = files.length > 0 ? files[0].relativePath : undefined;
    var basename = files.length > 0 ? files[0].name : undefined;
    return { identifierName: identifierName, file: file, basename: basename };
}
var AddImportStatement = (function () {
    function AddImportStatement() {
        this.key = AddImportStatement.name;
    }
    AddImportStatement.prototype.canProvideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == 2304;
        })[0];
        if (!relevantError) return;
        if (info.positionNode.kind !== 66) return;
        var matches = getIdentifierAndFileNames(relevantError, info.project);
        if (!matches) return;
        var identifierName = matches.identifierName,
            file = matches.file;
        return file ? { display: "import " + identifierName + " = require(\"" + file + "\")" } : undefined;
    };
    AddImportStatement.prototype.provideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == 2304;
        })[0];
        var identifier = info.positionNode;
        var identifierName = identifier.text;
        var fileNameforFix = getIdentifierAndFileNames(relevantError, info.project);
        var refactorings = [{
            span: {
                start: 0,
                length: 0
            },
            newText: "import " + identifierName + " = require(\"" + fileNameforFix.file + "\");" + os_1.EOL,
            filePath: info.sourceFile.fileName
        }];
        return refactorings;
    };
    return AddImportStatement;
})();
exports.AddImportStatement = AddImportStatement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL2FkZEltcG9ydFN0YXRlbWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsSUFBSSxvQkFBb0IsR0FBRyxFQUFFLENBQUMsb0JBQW9CO0lBQUUsa0JBQWtCLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDO0FBQy9GLElBQUksb0JBQW9CLEdBQUcsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDdkUsU0FBUyx5QkFBeUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0FBQy9DLFFBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDbEMsUUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7QUFDL0IsZUFBTyxTQUFTLENBQUM7S0FDcEI7QUFDRCxLQUFDO0FBQ0QsUUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQzNELFFBQUksQ0FBQyxLQUFLLEVBQ04sT0FBTztBQUNYLFFBQUksY0FBYyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QixRQUFJLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQztBQUNoRCxlQUFPLEVBQUUsT0FBTztBQUNoQixnQkFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUM3QixjQUFNLEVBQUUsY0FBYztBQUN0Qiw4QkFBc0IsRUFBRSxLQUFLO0tBQ2hDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDVCxRQUFJLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUNoRSxRQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztBQUM1RCxXQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQztDQUM3RTtBQUNELElBQUksa0JBQWtCLEdBQUcsQ0FBQyxZQUFZO0FBQ2xDLGFBQVMsa0JBQWtCLEdBQUc7QUFDMUIsWUFBSSxDQUFDLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7S0FDdEM7QUFDRCxzQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQ3pELFlBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQUUsbUJBQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7U0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0YsWUFBSSxDQUFDLGFBQWEsRUFDZCxPQUFPO0FBQ1gsWUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQzdCLE9BQU87QUFDWCxZQUFJLE9BQU8sR0FBRyx5QkFBeUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JFLFlBQUksQ0FBQyxPQUFPLEVBQ1IsT0FBTztBQUNYLFlBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxjQUFjO1lBQUUsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDakUsZUFBTyxJQUFJLEdBQUcsRUFBRSxPQUFPLEVBQUUsU0FBUyxHQUFHLGNBQWMsR0FBRyxlQUFlLEdBQUcsSUFBSSxHQUFHLEtBQUssRUFBRSxHQUFHLFNBQVMsQ0FBQztLQUN0RyxDQUFDO0FBQ0Ysc0JBQWtCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLElBQUksRUFBRTtBQUN0RCxZQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUFFLG1CQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO1NBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNGLFlBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7QUFDbkMsWUFBSSxjQUFjLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztBQUNyQyxZQUFJLGNBQWMsR0FBRyx5QkFBeUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVFLFlBQUksWUFBWSxHQUFHLENBQUM7QUFDWixnQkFBSSxFQUFFO0FBQ0YscUJBQUssRUFBRSxDQUFDO0FBQ1Isc0JBQU0sRUFBRSxDQUFDO2FBQ1o7QUFDRCxtQkFBTyxFQUFFLFNBQVMsR0FBRyxjQUFjLEdBQUcsZUFBZSxHQUFHLGNBQWMsQ0FBQyxJQUFJLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHO0FBQy9GLG9CQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRO1NBQ3JDLENBQUMsQ0FBQztBQUNQLGVBQU8sWUFBWSxDQUFDO0tBQ3ZCLENBQUM7QUFDRixXQUFPLGtCQUFrQixDQUFDO0NBQzdCLENBQUEsRUFBRyxDQUFDO0FBQ0wsT0FBTyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL2FkZEltcG9ydFN0YXRlbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBvc18xID0gcmVxdWlyZShcIm9zXCIpO1xudmFyIGRpc3BsYXlQYXJ0c1RvU3RyaW5nID0gdHMuZGlzcGxheVBhcnRzVG9TdHJpbmcsIHR5cGVUb0Rpc3BsYXlQYXJ0cyA9IHRzLnR5cGVUb0Rpc3BsYXlQYXJ0cztcbnZhciBnZXRQYXRoQ29tcGxldGlvbnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9tb2R1bGVzL2dldFBhdGhDb21wbGV0aW9uc1wiKTtcbmZ1bmN0aW9uIGdldElkZW50aWZpZXJBbmRGaWxlTmFtZXMoZXJyb3IsIHByb2plY3QpIHtcbiAgICB2YXIgZXJyb3JUZXh0ID0gZXJyb3IubWVzc2FnZVRleHQ7XG4gICAgaWYgKHR5cGVvZiBlcnJvclRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIDtcbiAgICB2YXIgbWF0Y2ggPSBlcnJvclRleHQubWF0Y2goL0Nhbm5vdCBmaW5kIG5hbWUgXFwnKFxcdyspXFwnLi8pO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgaWRlbnRpZmllck5hbWUgPSBtYXRjaFsxXTtcbiAgICB2YXIgZmlsZXMgPSBnZXRQYXRoQ29tcGxldGlvbnNfMS5nZXRQYXRoQ29tcGxldGlvbnMoe1xuICAgICAgICBwcm9qZWN0OiBwcm9qZWN0LFxuICAgICAgICBmaWxlUGF0aDogZXJyb3IuZmlsZS5maWxlTmFtZSxcbiAgICAgICAgcHJlZml4OiBpZGVudGlmaWVyTmFtZSxcbiAgICAgICAgaW5jbHVkZUV4dGVybmFsTW9kdWxlczogZmFsc2VcbiAgICB9KS5maWxlcztcbiAgICB2YXIgZmlsZSA9IGZpbGVzLmxlbmd0aCA+IDAgPyBmaWxlc1swXS5yZWxhdGl2ZVBhdGggOiB1bmRlZmluZWQ7XG4gICAgdmFyIGJhc2VuYW1lID0gZmlsZXMubGVuZ3RoID4gMCA/IGZpbGVzWzBdLm5hbWUgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgaWRlbnRpZmllck5hbWU6IGlkZW50aWZpZXJOYW1lLCBmaWxlOiBmaWxlLCBiYXNlbmFtZTogYmFzZW5hbWUgfTtcbn1cbnZhciBBZGRJbXBvcnRTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFkZEltcG9ydFN0YXRlbWVudCgpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBBZGRJbXBvcnRTdGF0ZW1lbnQubmFtZTtcbiAgICB9XG4gICAgQWRkSW1wb3J0U3RhdGVtZW50LnByb3RvdHlwZS5jYW5Qcm92aWRlRml4ID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgdmFyIHJlbGV2YW50RXJyb3IgPSBpbmZvLnBvc2l0aW9uRXJyb3JzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5jb2RlID09IDIzMDQ7IH0pWzBdO1xuICAgICAgICBpZiAoIXJlbGV2YW50RXJyb3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpbmZvLnBvc2l0aW9uTm9kZS5raW5kICE9PSA2NilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSBnZXRJZGVudGlmaWVyQW5kRmlsZU5hbWVzKHJlbGV2YW50RXJyb3IsIGluZm8ucHJvamVjdCk7XG4gICAgICAgIGlmICghbWF0Y2hlcylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGlkZW50aWZpZXJOYW1lID0gbWF0Y2hlcy5pZGVudGlmaWVyTmFtZSwgZmlsZSA9IG1hdGNoZXMuZmlsZTtcbiAgICAgICAgcmV0dXJuIGZpbGUgPyB7IGRpc3BsYXk6IFwiaW1wb3J0IFwiICsgaWRlbnRpZmllck5hbWUgKyBcIiA9IHJlcXVpcmUoXFxcIlwiICsgZmlsZSArIFwiXFxcIilcIiB9IDogdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQWRkSW1wb3J0U3RhdGVtZW50LnByb3RvdHlwZS5wcm92aWRlRml4ID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgdmFyIHJlbGV2YW50RXJyb3IgPSBpbmZvLnBvc2l0aW9uRXJyb3JzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5jb2RlID09IDIzMDQ7IH0pWzBdO1xuICAgICAgICB2YXIgaWRlbnRpZmllciA9IGluZm8ucG9zaXRpb25Ob2RlO1xuICAgICAgICB2YXIgaWRlbnRpZmllck5hbWUgPSBpZGVudGlmaWVyLnRleHQ7XG4gICAgICAgIHZhciBmaWxlTmFtZWZvckZpeCA9IGdldElkZW50aWZpZXJBbmRGaWxlTmFtZXMocmVsZXZhbnRFcnJvciwgaW5mby5wcm9qZWN0KTtcbiAgICAgICAgdmFyIHJlZmFjdG9yaW5ncyA9IFt7XG4gICAgICAgICAgICAgICAgc3Bhbjoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZXdUZXh0OiBcImltcG9ydCBcIiArIGlkZW50aWZpZXJOYW1lICsgXCIgPSByZXF1aXJlKFxcXCJcIiArIGZpbGVOYW1lZm9yRml4LmZpbGUgKyBcIlxcXCIpO1wiICsgb3NfMS5FT0wsXG4gICAgICAgICAgICAgICAgZmlsZVBhdGg6IGluZm8uc291cmNlRmlsZS5maWxlTmFtZVxuICAgICAgICAgICAgfV07XG4gICAgICAgIHJldHVybiByZWZhY3RvcmluZ3M7XG4gICAgfTtcbiAgICByZXR1cm4gQWRkSW1wb3J0U3RhdGVtZW50O1xufSkoKTtcbmV4cG9ydHMuQWRkSW1wb3J0U3RhdGVtZW50ID0gQWRkSW1wb3J0U3RhdGVtZW50O1xuIl19