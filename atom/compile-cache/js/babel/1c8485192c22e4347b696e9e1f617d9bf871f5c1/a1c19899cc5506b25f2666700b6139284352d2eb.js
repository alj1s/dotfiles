var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var view = require('./view');
var $ = view.$;
var AwesomePanelView = (function (_super) {
    __extends(AwesomePanelView, _super);
    function AwesomePanelView() {
        _super.apply(this, arguments);
    }
    AwesomePanelView.content = function () {
        var _this = this;
        return this.div({ 'class': 'awesome' }, function () {
            return _this.div({ 'class': 'dude', outlet: 'something' });
        });
    };
    AwesomePanelView.prototype.init = function () {
        this.something.html('<div>tada</div>');
    };
    return AwesomePanelView;
})(view.View);
exports.AwesomePanelView = AwesomePanelView;
function attach() {
    exports.panelView = new AwesomePanelView({});
    exports.panel = atom.workspace.addModalPanel({ item: exports.panelView, priority: 1000, visible: false });
}
exports.attach = attach;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvYXdlc29tZVBhbmVsVmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBRyxBQUFDLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFLLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN4RCxTQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxhQUFTLEVBQUUsR0FBRztBQUFFLFlBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0tBQUU7QUFDdkMsS0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUEsQUFBQyxDQUFDO0NBQ3hGLENBQUM7QUFDRixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNmLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxVQUFVLE1BQU0sRUFBRTtBQUN0QyxhQUFTLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEMsYUFBUyxnQkFBZ0IsR0FBRztBQUN4QixjQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNqQztBQUNELG9CQUFnQixDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQ25DLFlBQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUNqQixlQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFPLFNBQVMsRUFBRSxFQUFFLFlBQVk7QUFBRSxtQkFBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBTyxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FBRSxDQUFDLENBQUM7S0FDcEgsQ0FBQztBQUNGLG9CQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWTtBQUMxQyxZQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBQzFDLENBQUM7QUFDRixXQUFPLGdCQUFnQixDQUFDO0NBQzNCLENBQUEsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7QUFDNUMsU0FBUyxNQUFNLEdBQUc7QUFDZCxXQUFPLENBQUMsU0FBUyxHQUFHLElBQUksZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0MsV0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Q0FDN0c7QUFDRCxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyIsImZpbGUiOiIvVXNlcnMvYW5kcmV3am9uZXMvLmF0b20vcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L2Rpc3QvbWFpbi9hdG9tL3ZpZXdzL2F3ZXNvbWVQYW5lbFZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciB2aWV3ID0gcmVxdWlyZSgnLi92aWV3Jyk7XG52YXIgJCA9IHZpZXcuJDtcbnZhciBBd2Vzb21lUGFuZWxWaWV3ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXdlc29tZVBhbmVsVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBd2Vzb21lUGFuZWxWaWV3KCkge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgQXdlc29tZVBhbmVsVmlldy5jb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5kaXYoeyBjbGFzczogJ2F3ZXNvbWUnIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmRpdih7IGNsYXNzOiAnZHVkZScsIG91dGxldDogJ3NvbWV0aGluZycgfSk7IH0pO1xuICAgIH07XG4gICAgQXdlc29tZVBhbmVsVmlldy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zb21ldGhpbmcuaHRtbCgnPGRpdj50YWRhPC9kaXY+Jyk7XG4gICAgfTtcbiAgICByZXR1cm4gQXdlc29tZVBhbmVsVmlldztcbn0pKHZpZXcuVmlldyk7XG5leHBvcnRzLkF3ZXNvbWVQYW5lbFZpZXcgPSBBd2Vzb21lUGFuZWxWaWV3O1xuZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGV4cG9ydHMucGFuZWxWaWV3ID0gbmV3IEF3ZXNvbWVQYW5lbFZpZXcoe30pO1xuICAgIGV4cG9ydHMucGFuZWwgPSBhdG9tLndvcmtzcGFjZS5hZGRNb2RhbFBhbmVsKHsgaXRlbTogZXhwb3J0cy5wYW5lbFZpZXcsIHByaW9yaXR5OiAxMDAwLCB2aXNpYmxlOiBmYWxzZSB9KTtcbn1cbmV4cG9ydHMuYXR0YWNoID0gYXR0YWNoO1xuIl19