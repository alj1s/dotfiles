var addClassMember_1 = require("./quickFixes/addClassMember");
var addClassMethod_1 = require("./quickFixes/addClassMethod");
var addImportStatement_1 = require("./quickFixes/addImportStatement");
var equalsToEquals_1 = require("./quickFixes/equalsToEquals");
var extractVariable_1 = require("./quickFixes/extractVariable");
var wrapInProperty_1 = require("./quickFixes/wrapInProperty");
var quotesToQuotes_1 = require("./quickFixes/quotesToQuotes");
var quoteToTemplate_1 = require("./quickFixes/quoteToTemplate");
var stringConcatToTemplate_1 = require("./quickFixes/stringConcatToTemplate");
var typeAssertPropertyAccessToAny_1 = require("./quickFixes/typeAssertPropertyAccessToAny");
var typeAssertPropertyAccessToType_1 = require("./quickFixes/typeAssertPropertyAccessToType");
var implementInterface_1 = require("./quickFixes/implementInterface");
var singleLineCommentToJsdoc_1 = require("./quickFixes/singleLineCommentToJsdoc");
exports.allQuickFixes = [new addClassMethod_1.AddClassMethod(), new addClassMember_1.AddClassMember(), new addImportStatement_1.AddImportStatement(), new wrapInProperty_1.WrapInProperty(), new equalsToEquals_1.EqualsToEquals(), new extractVariable_1.ExtractVariable(), new stringConcatToTemplate_1.StringConcatToTemplate(), new quotesToQuotes_1.QuotesToQuotes(), new quoteToTemplate_1.QuoteToTemplate(), new typeAssertPropertyAccessToAny_1.TypeAssertPropertyAccessToAny(), new typeAssertPropertyAccessToType_1.TypeAssertPropertyAccessToType(), new implementInterface_1.ImplementInterface(), new singleLineCommentToJsdoc_1.SingleLineCommentToJsdoc()];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeFJlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFDOUQsSUFBSSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUM5RCxJQUFJLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3RFLElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFDOUQsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUNoRSxJQUFJLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQzlELElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFDOUQsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUNoRSxJQUFJLHdCQUF3QixHQUFHLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBQzlFLElBQUksK0JBQStCLEdBQUcsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDNUYsSUFBSSxnQ0FBZ0MsR0FBRyxPQUFPLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUM5RixJQUFJLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3RFLElBQUksMEJBQTBCLEdBQUcsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDbEYsT0FBTyxDQUFDLGFBQWEsR0FBRyxDQUNwQixJQUFJLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxFQUNyQyxJQUFJLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxFQUNyQyxJQUFJLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLEVBQzdDLElBQUksZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEVBQ3JDLElBQUksZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEVBQ3JDLElBQUksaUJBQWlCLENBQUMsZUFBZSxFQUFFLEVBQ3ZDLElBQUksd0JBQXdCLENBQUMsc0JBQXNCLEVBQUUsRUFDckQsSUFBSSxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsRUFDckMsSUFBSSxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsRUFDdkMsSUFBSSwrQkFBK0IsQ0FBQyw2QkFBNkIsRUFBRSxFQUNuRSxJQUFJLGdDQUFnQyxDQUFDLDhCQUE4QixFQUFFLEVBQ3JFLElBQUksb0JBQW9CLENBQUMsa0JBQWtCLEVBQUUsRUFDN0MsSUFBSSwwQkFBMEIsQ0FBQyx3QkFBd0IsRUFBRSxDQUM1RCxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeFJlZ2lzdHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFkZENsYXNzTWVtYmVyXzEgPSByZXF1aXJlKFwiLi9xdWlja0ZpeGVzL2FkZENsYXNzTWVtYmVyXCIpO1xudmFyIGFkZENsYXNzTWV0aG9kXzEgPSByZXF1aXJlKFwiLi9xdWlja0ZpeGVzL2FkZENsYXNzTWV0aG9kXCIpO1xudmFyIGFkZEltcG9ydFN0YXRlbWVudF8xID0gcmVxdWlyZShcIi4vcXVpY2tGaXhlcy9hZGRJbXBvcnRTdGF0ZW1lbnRcIik7XG52YXIgZXF1YWxzVG9FcXVhbHNfMSA9IHJlcXVpcmUoXCIuL3F1aWNrRml4ZXMvZXF1YWxzVG9FcXVhbHNcIik7XG52YXIgZXh0cmFjdFZhcmlhYmxlXzEgPSByZXF1aXJlKFwiLi9xdWlja0ZpeGVzL2V4dHJhY3RWYXJpYWJsZVwiKTtcbnZhciB3cmFwSW5Qcm9wZXJ0eV8xID0gcmVxdWlyZShcIi4vcXVpY2tGaXhlcy93cmFwSW5Qcm9wZXJ0eVwiKTtcbnZhciBxdW90ZXNUb1F1b3Rlc18xID0gcmVxdWlyZShcIi4vcXVpY2tGaXhlcy9xdW90ZXNUb1F1b3Rlc1wiKTtcbnZhciBxdW90ZVRvVGVtcGxhdGVfMSA9IHJlcXVpcmUoXCIuL3F1aWNrRml4ZXMvcXVvdGVUb1RlbXBsYXRlXCIpO1xudmFyIHN0cmluZ0NvbmNhdFRvVGVtcGxhdGVfMSA9IHJlcXVpcmUoXCIuL3F1aWNrRml4ZXMvc3RyaW5nQ29uY2F0VG9UZW1wbGF0ZVwiKTtcbnZhciB0eXBlQXNzZXJ0UHJvcGVydHlBY2Nlc3NUb0FueV8xID0gcmVxdWlyZShcIi4vcXVpY2tGaXhlcy90eXBlQXNzZXJ0UHJvcGVydHlBY2Nlc3NUb0FueVwiKTtcbnZhciB0eXBlQXNzZXJ0UHJvcGVydHlBY2Nlc3NUb1R5cGVfMSA9IHJlcXVpcmUoXCIuL3F1aWNrRml4ZXMvdHlwZUFzc2VydFByb3BlcnR5QWNjZXNzVG9UeXBlXCIpO1xudmFyIGltcGxlbWVudEludGVyZmFjZV8xID0gcmVxdWlyZShcIi4vcXVpY2tGaXhlcy9pbXBsZW1lbnRJbnRlcmZhY2VcIik7XG52YXIgc2luZ2xlTGluZUNvbW1lbnRUb0pzZG9jXzEgPSByZXF1aXJlKFwiLi9xdWlja0ZpeGVzL3NpbmdsZUxpbmVDb21tZW50VG9Kc2RvY1wiKTtcbmV4cG9ydHMuYWxsUXVpY2tGaXhlcyA9IFtcbiAgICBuZXcgYWRkQ2xhc3NNZXRob2RfMS5BZGRDbGFzc01ldGhvZCgpLFxuICAgIG5ldyBhZGRDbGFzc01lbWJlcl8xLkFkZENsYXNzTWVtYmVyKCksXG4gICAgbmV3IGFkZEltcG9ydFN0YXRlbWVudF8xLkFkZEltcG9ydFN0YXRlbWVudCgpLFxuICAgIG5ldyB3cmFwSW5Qcm9wZXJ0eV8xLldyYXBJblByb3BlcnR5KCksXG4gICAgbmV3IGVxdWFsc1RvRXF1YWxzXzEuRXF1YWxzVG9FcXVhbHMoKSxcbiAgICBuZXcgZXh0cmFjdFZhcmlhYmxlXzEuRXh0cmFjdFZhcmlhYmxlKCksXG4gICAgbmV3IHN0cmluZ0NvbmNhdFRvVGVtcGxhdGVfMS5TdHJpbmdDb25jYXRUb1RlbXBsYXRlKCksXG4gICAgbmV3IHF1b3Rlc1RvUXVvdGVzXzEuUXVvdGVzVG9RdW90ZXMoKSxcbiAgICBuZXcgcXVvdGVUb1RlbXBsYXRlXzEuUXVvdGVUb1RlbXBsYXRlKCksXG4gICAgbmV3IHR5cGVBc3NlcnRQcm9wZXJ0eUFjY2Vzc1RvQW55XzEuVHlwZUFzc2VydFByb3BlcnR5QWNjZXNzVG9BbnkoKSxcbiAgICBuZXcgdHlwZUFzc2VydFByb3BlcnR5QWNjZXNzVG9UeXBlXzEuVHlwZUFzc2VydFByb3BlcnR5QWNjZXNzVG9UeXBlKCksXG4gICAgbmV3IGltcGxlbWVudEludGVyZmFjZV8xLkltcGxlbWVudEludGVyZmFjZSgpLFxuICAgIG5ldyBzaW5nbGVMaW5lQ29tbWVudFRvSnNkb2NfMS5TaW5nbGVMaW5lQ29tbWVudFRvSnNkb2MoKVxuXTtcbiJdfQ==