var atomUtils = require("./atomUtils");
var parent = require("../../worker/parent");
var mainPanelView_1 = require("./views/mainPanelView");
var fileStatusCache_1 = require("./fileStatusCache");
function handle(event) {
    var textUpdated = parent.updateText({ filePath: event.filePath, text: event.editor.getText() });
    textUpdated.then(function () {
        atomUtils.triggerLinter();
        parent.errorsForFile({ filePath: event.filePath }).then(function (resp) {
            return mainPanelView_1.errorView.setErrors(event.filePath, resp.errors);
        });
    });
    mainPanelView_1.show();
    parent.getProjectFileDetails({ filePath: event.filePath }).then(function (fileDetails) {
        if (!fileDetails.project.compileOnSave) return;
        if (fileDetails.project.compilerOptions.out) return;
        textUpdated.then(function () {
            return parent.emitFile({ filePath: event.filePath });
        }).then(function (res) {
            var status = fileStatusCache_1.getFileStatus(event.filePath);
            status.modified = false;
            status.emitDiffers = res.emitError;
            mainPanelView_1.panelView.updateFileStatus(event.filePath);
            mainPanelView_1.errorView.showEmittedMessage(res);
        });
    });
}
exports.handle = handle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vb25TYXZlSGFuZGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDNUMsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDdkQsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNyRCxTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQUU7QUFDbkIsUUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRyxlQUFXLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDekIsaUJBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUMxQixjQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUM3QyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUU7QUFBRSxtQkFBTyxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUFFLENBQUMsQ0FBQztLQUMzRyxDQUFDLENBQUM7QUFDSCxtQkFBZSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3ZCLFVBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxXQUFXLEVBQUU7QUFDbkYsWUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUNsQyxPQUFPO0FBQ1gsWUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQ3ZDLE9BQU87QUFDWCxtQkFBVyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQUUsbUJBQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUFFLENBQUMsQ0FDbEYsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQ3JCLGdCQUFJLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdELGtCQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztBQUN4QixrQkFBTSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO0FBQ25DLDJCQUFlLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzRCwyQkFBZSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNyRCxDQUFDLENBQUM7S0FDTixDQUFDLENBQUM7Q0FDTjtBQUNELE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vb25TYXZlSGFuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhdG9tVXRpbHMgPSByZXF1aXJlKFwiLi9hdG9tVXRpbHNcIik7XG52YXIgcGFyZW50ID0gcmVxdWlyZSgnLi4vLi4vd29ya2VyL3BhcmVudCcpO1xudmFyIG1haW5QYW5lbFZpZXdfMSA9IHJlcXVpcmUoXCIuL3ZpZXdzL21haW5QYW5lbFZpZXdcIik7XG52YXIgZmlsZVN0YXR1c0NhY2hlXzEgPSByZXF1aXJlKFwiLi9maWxlU3RhdHVzQ2FjaGVcIik7XG5mdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICB2YXIgdGV4dFVwZGF0ZWQgPSBwYXJlbnQudXBkYXRlVGV4dCh7IGZpbGVQYXRoOiBldmVudC5maWxlUGF0aCwgdGV4dDogZXZlbnQuZWRpdG9yLmdldFRleHQoKSB9KTtcbiAgICB0ZXh0VXBkYXRlZC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXRvbVV0aWxzLnRyaWdnZXJMaW50ZXIoKTtcbiAgICAgICAgcGFyZW50LmVycm9yc0ZvckZpbGUoeyBmaWxlUGF0aDogZXZlbnQuZmlsZVBhdGggfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwKSB7IHJldHVybiBtYWluUGFuZWxWaWV3XzEuZXJyb3JWaWV3LnNldEVycm9ycyhldmVudC5maWxlUGF0aCwgcmVzcC5lcnJvcnMpOyB9KTtcbiAgICB9KTtcbiAgICBtYWluUGFuZWxWaWV3XzEuc2hvdygpO1xuICAgIHBhcmVudC5nZXRQcm9qZWN0RmlsZURldGFpbHMoeyBmaWxlUGF0aDogZXZlbnQuZmlsZVBhdGggfSkudGhlbihmdW5jdGlvbiAoZmlsZURldGFpbHMpIHtcbiAgICAgICAgaWYgKCFmaWxlRGV0YWlscy5wcm9qZWN0LmNvbXBpbGVPblNhdmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChmaWxlRGV0YWlscy5wcm9qZWN0LmNvbXBpbGVyT3B0aW9ucy5vdXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRleHRVcGRhdGVkLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyZW50LmVtaXRGaWxlKHsgZmlsZVBhdGg6IGV2ZW50LmZpbGVQYXRoIH0pOyB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgdmFyIHN0YXR1cyA9IGZpbGVTdGF0dXNDYWNoZV8xLmdldEZpbGVTdGF0dXMoZXZlbnQuZmlsZVBhdGgpO1xuICAgICAgICAgICAgc3RhdHVzLm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgICAgICBzdGF0dXMuZW1pdERpZmZlcnMgPSByZXMuZW1pdEVycm9yO1xuICAgICAgICAgICAgbWFpblBhbmVsVmlld18xLnBhbmVsVmlldy51cGRhdGVGaWxlU3RhdHVzKGV2ZW50LmZpbGVQYXRoKTtcbiAgICAgICAgICAgIG1haW5QYW5lbFZpZXdfMS5lcnJvclZpZXcuc2hvd0VtaXR0ZWRNZXNzYWdlKHJlcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5oYW5kbGUgPSBoYW5kbGU7XG4iXX0=