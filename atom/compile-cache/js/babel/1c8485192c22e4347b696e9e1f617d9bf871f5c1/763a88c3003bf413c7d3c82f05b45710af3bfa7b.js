var QuoteToTemplate = (function () {
    function QuoteToTemplate() {
        this.key = QuoteToTemplate.name;
    }
    QuoteToTemplate.prototype.canProvideFix = function (info) {
        if (info.positionNode.kind === 8) {
            return { display: 'Convert to Template String' };
        }
    };
    QuoteToTemplate.prototype.provideFix = function (info) {
        var text = info.positionNode.getText();
        var quoteCharacter = text.trim()[0];
        var nextQuoteCharacter = '`';
        var quoteRegex = new RegExp(quoteCharacter, 'g');
        var escapedQuoteRegex = new RegExp('\\\\' + quoteCharacter, 'g');
        var nextQuoteRegex = new RegExp(nextQuoteCharacter, 'g');
        var newText = text.replace(nextQuoteRegex, '\\' + nextQuoteCharacter).replace(escapedQuoteRegex, quoteCharacter);
        newText = nextQuoteCharacter + newText.substr(1, newText.length - 2) + nextQuoteCharacter;
        var refactoring = {
            span: {
                start: info.positionNode.getStart(),
                length: info.positionNode.end - info.positionNode.getStart()
            },
            newText: newText,
            filePath: info.filePath
        };
        return [refactoring];
    };
    return QuoteToTemplate;
})();
exports.QuoteToTemplate = QuoteToTemplate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL3F1b3RlVG9UZW1wbGF0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLGVBQWUsR0FBRyxDQUFDLFlBQVk7QUFDL0IsYUFBUyxlQUFlLEdBQUc7QUFDdkIsWUFBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDO0tBQ25DO0FBQ0QsbUJBQWUsQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQ3RELFlBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO0FBQzlCLG1CQUFPLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLENBQUM7U0FDcEQ7S0FDSixDQUFDO0FBQ0YsbUJBQWUsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQ25ELFlBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDdkMsWUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLFlBQUksa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLFlBQUksVUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqRCxZQUFJLGlCQUFpQixHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDakUsWUFBSSxjQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDekQsWUFBSSxPQUFPLEdBQUcsSUFBSSxDQUNiLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxHQUFHLGtCQUFrQixDQUFDLENBQ2xELE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNoRCxlQUFPLEdBQUcsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztBQUMxRixZQUFJLFdBQVcsR0FBRztBQUNkLGdCQUFJLEVBQUU7QUFDRixxQkFBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO0FBQ25DLHNCQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7YUFDL0Q7QUFDRCxtQkFBTyxFQUFFLE9BQU87QUFDaEIsb0JBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUMxQixDQUFDO0FBQ0YsZUFBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ3hCLENBQUM7QUFDRixXQUFPLGVBQWUsQ0FBQztDQUMxQixDQUFBLEVBQUcsQ0FBQztBQUNMLE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL3F1b3RlVG9UZW1wbGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBRdW90ZVRvVGVtcGxhdGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1b3RlVG9UZW1wbGF0ZSgpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBRdW90ZVRvVGVtcGxhdGUubmFtZTtcbiAgICB9XG4gICAgUXVvdGVUb1RlbXBsYXRlLnByb3RvdHlwZS5jYW5Qcm92aWRlRml4ID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgaWYgKGluZm8ucG9zaXRpb25Ob2RlLmtpbmQgPT09IDgpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRpc3BsYXk6IFwiQ29udmVydCB0byBUZW1wbGF0ZSBTdHJpbmdcIiB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBRdW90ZVRvVGVtcGxhdGUucHJvdG90eXBlLnByb3ZpZGVGaXggPSBmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICB2YXIgdGV4dCA9IGluZm8ucG9zaXRpb25Ob2RlLmdldFRleHQoKTtcbiAgICAgICAgdmFyIHF1b3RlQ2hhcmFjdGVyID0gdGV4dC50cmltKClbMF07XG4gICAgICAgIHZhciBuZXh0UXVvdGVDaGFyYWN0ZXIgPSAnYCc7XG4gICAgICAgIHZhciBxdW90ZVJlZ2V4ID0gbmV3IFJlZ0V4cChxdW90ZUNoYXJhY3RlciwgJ2cnKTtcbiAgICAgICAgdmFyIGVzY2FwZWRRdW90ZVJlZ2V4ID0gbmV3IFJlZ0V4cChcIlxcXFxcXFxcXCIgKyBxdW90ZUNoYXJhY3RlciwgJ2cnKTtcbiAgICAgICAgdmFyIG5leHRRdW90ZVJlZ2V4ID0gbmV3IFJlZ0V4cChuZXh0UXVvdGVDaGFyYWN0ZXIsICdnJyk7XG4gICAgICAgIHZhciBuZXdUZXh0ID0gdGV4dFxuICAgICAgICAgICAgLnJlcGxhY2UobmV4dFF1b3RlUmVnZXgsIFwiXFxcXFwiICsgbmV4dFF1b3RlQ2hhcmFjdGVyKVxuICAgICAgICAgICAgLnJlcGxhY2UoZXNjYXBlZFF1b3RlUmVnZXgsIHF1b3RlQ2hhcmFjdGVyKTtcbiAgICAgICAgbmV3VGV4dCA9IG5leHRRdW90ZUNoYXJhY3RlciArIG5ld1RleHQuc3Vic3RyKDEsIG5ld1RleHQubGVuZ3RoIC0gMikgKyBuZXh0UXVvdGVDaGFyYWN0ZXI7XG4gICAgICAgIHZhciByZWZhY3RvcmluZyA9IHtcbiAgICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgICAgICBzdGFydDogaW5mby5wb3NpdGlvbk5vZGUuZ2V0U3RhcnQoKSxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGluZm8ucG9zaXRpb25Ob2RlLmVuZCAtIGluZm8ucG9zaXRpb25Ob2RlLmdldFN0YXJ0KClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXdUZXh0OiBuZXdUZXh0LFxuICAgICAgICAgICAgZmlsZVBhdGg6IGluZm8uZmlsZVBhdGhcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFtyZWZhY3RvcmluZ107XG4gICAgfTtcbiAgICByZXR1cm4gUXVvdGVUb1RlbXBsYXRlO1xufSkoKTtcbmV4cG9ydHMuUXVvdGVUb1RlbXBsYXRlID0gUXVvdGVUb1RlbXBsYXRlO1xuIl19