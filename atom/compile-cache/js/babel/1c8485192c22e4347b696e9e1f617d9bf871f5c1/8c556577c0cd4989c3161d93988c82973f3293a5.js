/**
 * A functional form of the SelectListView
 * Only one of these bad boys is allowed on the screen at one time
 */
var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var singleton;
function default_1(options, editor) {
    if (!singleton) singleton = new SimpleOverlaySelectListView(options, editor);else {
        singleton.options = options;
    }
    singleton.setItems();
    singleton.show();
    return singleton;
}
exports['default'] = default_1;
var sp = require('atom-space-pen-views');
var SimpleOverlaySelectListView = (function (_super) {
    __extends(SimpleOverlaySelectListView, _super);
    function SimpleOverlaySelectListView(options, editor) {
        _super.call(this);
        this.options = options;
        this.editor = editor;
        this.$.addClass('atomts-overlay');
        this.filterEditorView.model.placeholderText = 'Filter list';
    }
    Object.defineProperty(SimpleOverlaySelectListView.prototype, '$', {
        get: function get() {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    SimpleOverlaySelectListView.prototype.setItems = function () {
        _super.prototype.setItems.call(this, this.options.items);
    };
    SimpleOverlaySelectListView.prototype.viewForItem = function (item) {
        return '<li>\n            ' + this.options.viewForItem(item) + '\n        </li>';
    };
    SimpleOverlaySelectListView.prototype.confirmed = function (item) {
        this.options.confirmed(item);
        this.hide();
    };
    SimpleOverlaySelectListView.prototype.getFilterKey = function () {
        return this.options.filterKey;
    };
    SimpleOverlaySelectListView.prototype.show = function () {
        var _this = this;
        this.storeFocusedElement();
        this._overlayDecoration = this.editor.decorateMarker(this.editor.getLastCursor().getMarker(), { type: 'overlay', position: 'tail', item: this });
        setTimeout(function () {
            return _this.focusFilterEditor();
        }, 100);
    };
    SimpleOverlaySelectListView.prototype.hide = function () {
        this.restoreFocus();
        if (this._overlayDecoration) this._overlayDecoration.destroy();
    };
    SimpleOverlaySelectListView.prototype.cancelled = function () {
        this.hide();
    };
    return SimpleOverlaySelectListView;
})(sp.SelectListView);
exports.SimpleOverlaySelectListView = SimpleOverlaySelectListView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3Mvc2ltcGxlT3ZlcmxheVNlbGVjdGlvblZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLElBQUksU0FBUyxHQUFHLEFBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3hELFNBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RELGFBQVMsRUFBRSxHQUFHO0FBQUUsWUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7S0FBRTtBQUN2QyxLQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQSxBQUFDLENBQUM7Q0FDeEYsQ0FBQztBQUNGLElBQUksU0FBUyxDQUFDO0FBQ2QsU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUNoQyxRQUFJLENBQUMsU0FBUyxFQUNWLFNBQVMsR0FBRyxJQUFJLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUM1RDtBQUNELGlCQUFTLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztLQUMvQjtBQUNELGFBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyQixhQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakIsV0FBTyxTQUFTLENBQUM7Q0FDcEI7QUFDRCxPQUFPLFdBQVEsR0FBRyxTQUFTLENBQUM7QUFDNUIsSUFBSSxF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QTJCLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vYXRvbS92aWV3cy9zaW1wbGVPdmVybGF5U2VsZWN0aW9uVmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBmdW5jdGlvbmFsIGZvcm0gb2YgdGhlIFNlbGVjdExpc3RWaWV3XG4gKiBPbmx5IG9uZSBvZiB0aGVzZSBiYWQgYm95cyBpcyBhbGxvd2VkIG9uIHRoZSBzY3JlZW4gYXQgb25lIHRpbWVcbiAqL1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgc2luZ2xldG9uO1xuZnVuY3Rpb24gZGVmYXVsdF8xKG9wdGlvbnMsIGVkaXRvcikge1xuICAgIGlmICghc2luZ2xldG9uKVxuICAgICAgICBzaW5nbGV0b24gPSBuZXcgU2ltcGxlT3ZlcmxheVNlbGVjdExpc3RWaWV3KG9wdGlvbnMsIGVkaXRvcik7XG4gICAgZWxzZSB7XG4gICAgICAgIHNpbmdsZXRvbi5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgc2luZ2xldG9uLnNldEl0ZW1zKCk7XG4gICAgc2luZ2xldG9uLnNob3coKTtcbiAgICByZXR1cm4gc2luZ2xldG9uO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdF8xO1xudmFyIHNwID0gcmVxdWlyZSgnYXRvbS1zcGFjZS1wZW4tdmlld3MnKTtcbnZhciBTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2ltcGxlT3ZlcmxheVNlbGVjdExpc3RWaWV3KG9wdGlvbnMsIGVkaXRvcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgICAgIHRoaXMuJC5hZGRDbGFzcygnYXRvbXRzLW92ZXJsYXknKTtcbiAgICAgICAgdGhpcy5maWx0ZXJFZGl0b3JWaWV3Lm1vZGVsLnBsYWNlaG9sZGVyVGV4dCA9ICdGaWx0ZXIgbGlzdCc7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLCBcIiRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLnNldEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnNldEl0ZW1zLmNhbGwodGhpcywgdGhpcy5vcHRpb25zLml0ZW1zKTtcbiAgICB9O1xuICAgIFNpbXBsZU92ZXJsYXlTZWxlY3RMaXN0Vmlldy5wcm90b3R5cGUudmlld0Zvckl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gXCI8bGk+XFxuICAgICAgICAgICAgXCIgKyB0aGlzLm9wdGlvbnMudmlld0Zvckl0ZW0oaXRlbSkgKyBcIlxcbiAgICAgICAgPC9saT5cIjtcbiAgICB9O1xuICAgIFNpbXBsZU92ZXJsYXlTZWxlY3RMaXN0Vmlldy5wcm90b3R5cGUuY29uZmlybWVkID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbmZpcm1lZChpdGVtKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICBTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLmdldEZpbHRlcktleSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5maWx0ZXJLZXk7XG4gICAgfTtcbiAgICBTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcmVGb2N1c2VkRWxlbWVudCgpO1xuICAgICAgICB0aGlzLl9vdmVybGF5RGVjb3JhdGlvbiA9IHRoaXMuZWRpdG9yLmRlY29yYXRlTWFya2VyKHRoaXMuZWRpdG9yLmdldExhc3RDdXJzb3IoKS5nZXRNYXJrZXIoKSwgeyB0eXBlOiBcIm92ZXJsYXlcIiwgcG9zaXRpb246IFwidGFpbFwiLCBpdGVtOiB0aGlzIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmZvY3VzRmlsdGVyRWRpdG9yKCk7IH0sIDEwMCk7XG4gICAgfTtcbiAgICBTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXcucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgIGlmICh0aGlzLl9vdmVybGF5RGVjb3JhdGlvbilcbiAgICAgICAgICAgIHRoaXMuX292ZXJsYXlEZWNvcmF0aW9uLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIFNpbXBsZU92ZXJsYXlTZWxlY3RMaXN0Vmlldy5wcm90b3R5cGUuY2FuY2VsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTaW1wbGVPdmVybGF5U2VsZWN0TGlzdFZpZXc7XG59KShzcC5TZWxlY3RMaXN0Vmlldyk7XG5leHBvcnRzLlNpbXBsZU92ZXJsYXlTZWxlY3RMaXN0VmlldyA9IFNpbXBsZU92ZXJsYXlTZWxlY3RMaXN0VmlldztcbiJdfQ==