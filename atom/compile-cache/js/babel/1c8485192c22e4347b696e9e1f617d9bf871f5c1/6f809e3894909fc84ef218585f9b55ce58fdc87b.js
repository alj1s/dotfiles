exports.errorsInOpenFiles = { members: [] };
exports.buildOutput = { members: [] };
exports.referencesOutput = { members: [] };
exports.activeList = exports.errorsInOpenFiles;
function gotoLine(filePath, line, col, list) {
    var activeFile,
        activeEditor = atom.workspace.getActiveTextEditor();
    if (activeEditor !== undefined && activeEditor !== null) {
        activeFile = activeEditor.getPath();
    }
    if (filePath !== activeFile) {
        atom.workspace.open(filePath, {
            initialLine: line - 1,
            initialColumn: col
        });
    } else {
        atom.workspace.getActiveTextEditor().cursors[0].setBufferPosition([line - 1, col]);
    }
    list.lastPosition = { filePath: filePath, line: line, col: col };
}
exports.gotoLine = gotoLine;
function findCurrentIndexInList() {
    if (!exports.activeList.members.length) {
        atom.notifications.addInfo('AtomTS: no go-to members in active list');
        return -1;
    }
    if (!exports.activeList.lastPosition) return 0;
    var lastPosition = exports.activeList.lastPosition;
    var index = indexOf(exports.activeList.members, function (item) {
        return item.filePath == lastPosition.filePath && item.line == lastPosition.line;
    });
    if (index == -1) {
        return 0;
    }
    return index;
}
function gotoNext() {
    var currentIndex = findCurrentIndexInList();
    if (currentIndex == -1) return;
    var nextIndex = currentIndex + 1;
    if (nextIndex == exports.activeList.members.length) {
        nextIndex = 0;
    }
    var next = exports.activeList.members[nextIndex];
    gotoLine(next.filePath, next.line, next.col, exports.activeList);
}
exports.gotoNext = gotoNext;
function gotoPrevious() {
    var currentIndex = findCurrentIndexInList();
    if (currentIndex == -1) return;
    var previousIndex = currentIndex - 1;
    if (previousIndex == -1) {
        previousIndex = exports.activeList.members.length - 1;
    }
    var previous = exports.activeList.members[previousIndex];
    gotoLine(previous.filePath, previous.line, previous.col, exports.activeList);
}
exports.gotoPrevious = gotoPrevious;
function indexOf(items, filter) {
    for (var i = 0; i < items.length; i++) {
        if (filter(items[i])) {
            return i;
        }
    }
    return -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vZ290b0hpc3RvcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzVDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDdEMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQzNDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQy9DLFNBQVMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtBQUN6QyxRQUFJLFVBQVU7UUFBRSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQ3BFLFFBQUksWUFBWSxLQUFLLFNBQVMsSUFBSSxZQUFZLEtBQUssSUFBSSxFQUFFO0FBQ3JELGtCQUFVLEdBQUcsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3ZDO0FBQ0QsUUFBSSxRQUFRLEtBQUssVUFBVSxFQUFFO0FBQ3pCLFlBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUMxQix1QkFBVyxFQUFFLElBQUksR0FBRyxDQUFDO0FBQ3JCLHlCQUFhLEVBQUUsR0FBRztTQUNyQixDQUFDLENBQUM7S0FDTixNQUNJO0FBQ0QsWUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN0RjtBQUNELFFBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxRQUFRLEVB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cy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vZ290b0hpc3RvcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmVycm9yc0luT3BlbkZpbGVzID0geyBtZW1iZXJzOiBbXSB9O1xuZXhwb3J0cy5idWlsZE91dHB1dCA9IHsgbWVtYmVyczogW10gfTtcbmV4cG9ydHMucmVmZXJlbmNlc091dHB1dCA9IHsgbWVtYmVyczogW10gfTtcbmV4cG9ydHMuYWN0aXZlTGlzdCA9IGV4cG9ydHMuZXJyb3JzSW5PcGVuRmlsZXM7XG5mdW5jdGlvbiBnb3RvTGluZShmaWxlUGF0aCwgbGluZSwgY29sLCBsaXN0KSB7XG4gICAgdmFyIGFjdGl2ZUZpbGUsIGFjdGl2ZUVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcbiAgICBpZiAoYWN0aXZlRWRpdG9yICE9PSB1bmRlZmluZWQgJiYgYWN0aXZlRWRpdG9yICE9PSBudWxsKSB7XG4gICAgICAgIGFjdGl2ZUZpbGUgPSBhY3RpdmVFZGl0b3IuZ2V0UGF0aCgpO1xuICAgIH1cbiAgICBpZiAoZmlsZVBhdGggIT09IGFjdGl2ZUZpbGUpIHtcbiAgICAgICAgYXRvbS53b3Jrc3BhY2Uub3BlbihmaWxlUGF0aCwge1xuICAgICAgICAgICAgaW5pdGlhbExpbmU6IGxpbmUgLSAxLFxuICAgICAgICAgICAgaW5pdGlhbENvbHVtbjogY29sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpLmN1cnNvcnNbMF0uc2V0QnVmZmVyUG9zaXRpb24oW2xpbmUgLSAxLCBjb2xdKTtcbiAgICB9XG4gICAgbGlzdC5sYXN0UG9zaXRpb24gPSB7IGZpbGVQYXRoOiBmaWxlUGF0aCwgbGluZTogbGluZSwgY29sOiBjb2wgfTtcbn1cbmV4cG9ydHMuZ290b0xpbmUgPSBnb3RvTGluZTtcbmZ1bmN0aW9uIGZpbmRDdXJyZW50SW5kZXhJbkxpc3QoKSB7XG4gICAgaWYgKCFleHBvcnRzLmFjdGl2ZUxpc3QubWVtYmVycy5sZW5ndGgpIHtcbiAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEluZm8oJ0F0b21UUzogbm8gZ28tdG8gbWVtYmVycyBpbiBhY3RpdmUgbGlzdCcpO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmICghZXhwb3J0cy5hY3RpdmVMaXN0Lmxhc3RQb3NpdGlvbilcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgdmFyIGxhc3RQb3NpdGlvbiA9IGV4cG9ydHMuYWN0aXZlTGlzdC5sYXN0UG9zaXRpb247XG4gICAgdmFyIGluZGV4ID0gaW5kZXhPZihleHBvcnRzLmFjdGl2ZUxpc3QubWVtYmVycywgZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uZmlsZVBhdGggPT0gbGFzdFBvc2l0aW9uLmZpbGVQYXRoICYmIGl0ZW0ubGluZSA9PSBsYXN0UG9zaXRpb24ubGluZTsgfSk7XG4gICAgaWYgKGluZGV4ID09IC0xKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59XG5mdW5jdGlvbiBnb3RvTmV4dCgpIHtcbiAgICB2YXIgY3VycmVudEluZGV4ID0gZmluZEN1cnJlbnRJbmRleEluTGlzdCgpO1xuICAgIGlmIChjdXJyZW50SW5kZXggPT0gLTEpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcbiAgICBpZiAobmV4dEluZGV4ID09IGV4cG9ydHMuYWN0aXZlTGlzdC5tZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICBuZXh0SW5kZXggPSAwO1xuICAgIH1cbiAgICB2YXIgbmV4dCA9IGV4cG9ydHMuYWN0aXZlTGlzdC5tZW1iZXJzW25leHRJbmRleF07XG4gICAgZ290b0xpbmUobmV4dC5maWxlUGF0aCwgbmV4dC5saW5lLCBuZXh0LmNvbCwgZXhwb3J0cy5hY3RpdmVMaXN0KTtcbn1cbmV4cG9ydHMuZ290b05leHQgPSBnb3RvTmV4dDtcbmZ1bmN0aW9uIGdvdG9QcmV2aW91cygpIHtcbiAgICB2YXIgY3VycmVudEluZGV4ID0gZmluZEN1cnJlbnRJbmRleEluTGlzdCgpO1xuICAgIGlmIChjdXJyZW50SW5kZXggPT0gLTEpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgcHJldmlvdXNJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7XG4gICAgaWYgKHByZXZpb3VzSW5kZXggPT0gLTEpIHtcbiAgICAgICAgcHJldmlvdXNJbmRleCA9IGV4cG9ydHMuYWN0aXZlTGlzdC5tZW1iZXJzLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIHZhciBwcmV2aW91cyA9IGV4cG9ydHMuYWN0aXZlTGlzdC5tZW1iZXJzW3ByZXZpb3VzSW5kZXhdO1xuICAgIGdvdG9MaW5lKHByZXZpb3VzLmZpbGVQYXRoLCBwcmV2aW91cy5saW5lLCBwcmV2aW91cy5jb2wsIGV4cG9ydHMuYWN0aXZlTGlzdCk7XG59XG5leHBvcnRzLmdvdG9QcmV2aW91cyA9IGdvdG9QcmV2aW91cztcbmZ1bmN0aW9uIGluZGV4T2YoaXRlbXMsIGZpbHRlcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGZpbHRlcihpdGVtc1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbiJdfQ==