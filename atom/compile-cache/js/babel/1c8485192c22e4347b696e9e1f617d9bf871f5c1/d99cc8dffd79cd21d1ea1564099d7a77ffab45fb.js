var ast = require("../astUtils");
var os_1 = require("os");
function getIdentifierAndClassNames(error) {
    var errorText = error.messageText;
    if (typeof errorText !== "string") {
        console.error("I have no idea what this is:", errorText);
        return undefined;
    }
    ;
    var match = errorText.match(/Property \'(\w+)\' does not exist on type \'(\w+)\'./);
    if (!match) return;
    var identifierName = match[1],
        className = match[2];
    return { identifierName: identifierName, className: className };
}
function getLastNameAfterDot(text) {
    return text.substr(text.lastIndexOf(".") + 1);
}
function getTypeStringForNode(node, typeChecker) {
    var type = typeChecker.getTypeAtLocation(node);
    return ts.displayPartsToString(ts.typeToDisplayParts(typeChecker, type)).replace(/\s+/g, " ");
}
var AddClassMember = (function () {
    function AddClassMember() {
        this.key = AddClassMember.name;
    }
    AddClassMember.prototype.canProvideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == ts.Diagnostics.Property_0_does_not_exist_on_type_1.code;
        })[0];
        if (!relevantError) return;
        if (info.positionNode.kind !== 66) return;
        var match = getIdentifierAndClassNames(relevantError);
        if (!match) return;
        var identifierName = match.identifierName,
            className = match.className;
        return { display: "Add " + identifierName + " to " + className };
    };
    AddClassMember.prototype.provideFix = function (info) {
        var relevantError = info.positionErrors.filter(function (x) {
            return x.code == ts.Diagnostics.Property_0_does_not_exist_on_type_1.code;
        })[0];
        var identifier = info.positionNode;
        var identifierName = identifier.text;
        var className = getIdentifierAndClassNames(relevantError).className;
        var typeString = "any";
        var parentOfParent = identifier.parent.parent;
        if (parentOfParent.kind == 178 && parentOfParent.operatorToken.getText().trim() == "=") {
            var binaryExpression = parentOfParent;
            typeString = getTypeStringForNode(binaryExpression.right, info.typeChecker);
        } else if (parentOfParent.kind == 165) {
            var callExp = parentOfParent;
            var typeStringParts = ["("];
            var args = [];
            callExp.arguments.forEach(function (arg) {
                var argName = getLastNameAfterDot(arg.getText());
                var argType = getTypeStringForNode(arg, info.typeChecker);
                args.push(argName + ": " + argType);
            });
            typeStringParts.push(args.join(", "));
            typeStringParts.push(") => any");
            typeString = typeStringParts.join("");
        }
        var memberTarget = ast.getNodeByKindAndName(info.program, 211, className);
        if (!memberTarget) {
            memberTarget = ast.getNodeByKindAndName(info.program, 212, className);
        }
        if (!memberTarget) {
            return [];
        }
        var targetDeclaration = memberTarget;
        var firstBrace = targetDeclaration.getChildren().filter(function (x) {
            return x.kind == 14;
        })[0];
        var indentLength = info.service.getIndentationAtPosition(memberTarget.getSourceFile().fileName, firstBrace.end, info.project.projectFile.project.formatCodeOptions);
        var indent = Array(indentLength + info.project.projectFile.project.formatCodeOptions.IndentSize + 1).join(" ");
        var refactoring = {
            span: {
                start: firstBrace.end,
                length: 0
            },
            newText: "" + os_1.EOL + indent + identifierName + ": " + typeString + ";",
            filePath: targetDeclaration.getSourceFile().fileName
        };
        return [refactoring];
    };
    return AddClassMember;
})();
exports.AddClassMember = AddClassMember;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2xhbmcvZml4bXl0cy9xdWlja0ZpeGVzL2FkZENsYXNzTWVtYmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsU0FBUywwQkFBMEIsQ0FBQyxLQUFLLEVBQUU7QUFDdkMsUUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUNsQyxRQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtBQUMvQixlQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3pELGVBQU8sU0FBUyxDQUFDO0tBQ3BCO0FBQ0QsS0FBQztBQUNELFFBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztBQUNwRixRQUFJLENBQUMsS0FBSyxFQUNOLE9BQU87QUFDWCxRQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwRCxXQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUM7Q0FDbkU7QUFDRCxTQUFTLG1CQUFtQixDQUFDLElBQUksRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztDQUNqRDtBQUNELFNBQVMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtBQUM3QyxRQUFJLElBQUksR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFD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QUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0csWUFBSSxXQUFXLEdBQUc7QUFDZCxnQkFBSSxFQUFFO0FBQ0YscUJBQUssRUFBRSxVQUFVLENBQUMsR0FBRztBQUNyQixzQkFBTSxFQUFFLENBQUM7YUFDWjtBQUNELG1CQUFPLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxHQUFHLGNBQWMsR0FBRyxJQUFJLEdBQUcsVUFBVSxHQUFHLEdBQUc7QUFDMUUsb0JBQVEsRUFBRSxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRO1NBQ3ZELENBQUM7QUFDRixlQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDeEIsQ0FBQztBQUNGLFdBQU8sY0FBYyxDQUFDO0NBQ3pCLENBQUEsRUFBRyxDQUFDO0FBQ0wsT0FBTyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9kaXN0L21haW4vbGFuZy9maXhteXRzL3F1aWNrRml4ZXMvYWRkQ2xhc3NNZW1iZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXN0ID0gcmVxdWlyZShcIi4uL2FzdFV0aWxzXCIpO1xudmFyIG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG5mdW5jdGlvbiBnZXRJZGVudGlmaWVyQW5kQ2xhc3NOYW1lcyhlcnJvcikge1xuICAgIHZhciBlcnJvclRleHQgPSBlcnJvci5tZXNzYWdlVGV4dDtcbiAgICBpZiAodHlwZW9mIGVycm9yVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignSSBoYXZlIG5vIGlkZWEgd2hhdCB0aGlzIGlzOicsIGVycm9yVGV4dCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIDtcbiAgICB2YXIgbWF0Y2ggPSBlcnJvclRleHQubWF0Y2goL1Byb3BlcnR5IFxcJyhcXHcrKVxcJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlIFxcJyhcXHcrKVxcJy4vKTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGlkZW50aWZpZXJOYW1lID0gbWF0Y2hbMV0sIGNsYXNzTmFtZSA9IG1hdGNoWzJdO1xuICAgIHJldHVybiB7IGlkZW50aWZpZXJOYW1lOiBpZGVudGlmaWVyTmFtZSwgY2xhc3NOYW1lOiBjbGFzc05hbWUgfTtcbn1cbmZ1bmN0aW9uIGdldExhc3ROYW1lQWZ0ZXJEb3QodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnN1YnN0cih0ZXh0Lmxhc3RJbmRleE9mKCcuJykgKyAxKTtcbn1cbmZ1bmN0aW9uIGdldFR5cGVTdHJpbmdGb3JOb2RlKG5vZGUsIHR5cGVDaGVja2VyKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlQ2hlY2tlci5nZXRUeXBlQXRMb2NhdGlvbihub2RlKTtcbiAgICByZXR1cm4gdHMuZGlzcGxheVBhcnRzVG9TdHJpbmcodHMudHlwZVRvRGlzcGxheVBhcnRzKHR5cGVDaGVja2VyLCB0eXBlKSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xufVxudmFyIEFkZENsYXNzTWVtYmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBZGRDbGFzc01lbWJlcigpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBBZGRDbGFzc01lbWJlci5uYW1lO1xuICAgIH1cbiAgICBBZGRDbGFzc01lbWJlci5wcm90b3R5cGUuY2FuUHJvdmlkZUZpeCA9IGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgIHZhciByZWxldmFudEVycm9yID0gaW5mby5wb3NpdGlvbkVycm9ycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguY29kZSA9PSB0cy5EaWFnbm9zdGljcy5Qcm9wZXJ0eV8wX2RvZXNfbm90X2V4aXN0X29uX3R5cGVfMS5jb2RlOyB9KVswXTtcbiAgICAgICAgaWYgKCFyZWxldmFudEVycm9yKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoaW5mby5wb3NpdGlvbk5vZGUua2luZCAhPT0gNjYpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBtYXRjaCA9IGdldElkZW50aWZpZXJBbmRDbGFzc05hbWVzKHJlbGV2YW50RXJyb3IpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgaWRlbnRpZmllck5hbWUgPSBtYXRjaC5pZGVudGlmaWVyTmFtZSwgY2xhc3NOYW1lID0gbWF0Y2guY2xhc3NOYW1lO1xuICAgICAgICByZXR1cm4geyBkaXNwbGF5OiBcIkFkZCBcIiArIGlkZW50aWZpZXJOYW1lICsgXCIgdG8gXCIgKyBjbGFzc05hbWUgfTtcbiAgICB9O1xuICAgIEFkZENsYXNzTWVtYmVyLnByb3RvdHlwZS5wcm92aWRlRml4ID0gZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgdmFyIHJlbGV2YW50RXJyb3IgPSBpbmZvLnBvc2l0aW9uRXJyb3JzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5jb2RlID09IHRzLkRpYWdub3N0aWNzLlByb3BlcnR5XzBfZG9lc19ub3RfZXhpc3Rfb25fdHlwZV8xLmNvZGU7IH0pWzBdO1xuICAgICAgICB2YXIgaWRlbnRpZmllciA9IGluZm8ucG9zaXRpb25Ob2RlO1xuICAgICAgICB2YXIgaWRlbnRpZmllck5hbWUgPSBpZGVudGlmaWVyLnRleHQ7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBnZXRJZGVudGlmaWVyQW5kQ2xhc3NOYW1lcyhyZWxldmFudEVycm9yKS5jbGFzc05hbWU7XG4gICAgICAgIHZhciB0eXBlU3RyaW5nID0gJ2FueSc7XG4gICAgICAgIHZhciBwYXJlbnRPZlBhcmVudCA9IGlkZW50aWZpZXIucGFyZW50LnBhcmVudDtcbiAgICAgICAgaWYgKHBhcmVudE9mUGFyZW50LmtpbmQgPT0gMTc4XG4gICAgICAgICAgICAmJiBwYXJlbnRPZlBhcmVudC5vcGVyYXRvclRva2VuLmdldFRleHQoKS50cmltKCkgPT0gJz0nKSB7XG4gICAgICAgICAgICB2YXIgYmluYXJ5RXhwcmVzc2lvbiA9IHBhcmVudE9mUGFyZW50O1xuICAgICAgICAgICAgdHlwZVN0cmluZyA9IGdldFR5cGVTdHJpbmdGb3JOb2RlKGJpbmFyeUV4cHJlc3Npb24ucmlnaHQsIGluZm8udHlwZUNoZWNrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmVudE9mUGFyZW50LmtpbmQgPT0gMTY1KSB7XG4gICAgICAgICAgICB2YXIgY2FsbEV4cCA9IHBhcmVudE9mUGFyZW50O1xuICAgICAgICAgICAgdmFyIHR5cGVTdHJpbmdQYXJ0cyA9IFsnKCddO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGNhbGxFeHAuYXJndW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgIHZhciBhcmdOYW1lID0gKGdldExhc3ROYW1lQWZ0ZXJEb3QoYXJnLmdldFRleHQoKSkpO1xuICAgICAgICAgICAgICAgIHZhciBhcmdUeXBlID0gZ2V0VHlwZVN0cmluZ0Zvck5vZGUoYXJnLCBpbmZvLnR5cGVDaGVja2VyKTtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnTmFtZSArIFwiOiBcIiArIGFyZ1R5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0eXBlU3RyaW5nUGFydHMucHVzaChhcmdzLmpvaW4oJywgJykpO1xuICAgICAgICAgICAgdHlwZVN0cmluZ1BhcnRzLnB1c2goJykgPT4gYW55Jyk7XG4gICAgICAgICAgICB0eXBlU3RyaW5nID0gdHlwZVN0cmluZ1BhcnRzLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtZW1iZXJUYXJnZXQgPSBhc3QuZ2V0Tm9kZUJ5S2luZEFuZE5hbWUoaW5mby5wcm9ncmFtLCAyMTEsIGNsYXNzTmFtZSk7XG4gICAgICAgIGlmICghbWVtYmVyVGFyZ2V0KSB7XG4gICAgICAgICAgICBtZW1iZXJUYXJnZXQgPSBhc3QuZ2V0Tm9kZUJ5S2luZEFuZE5hbWUoaW5mby5wcm9ncmFtLCAyMTIsIGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZW1iZXJUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFyZ2V0RGVjbGFyYXRpb24gPSBtZW1iZXJUYXJnZXQ7XG4gICAgICAgIHZhciBmaXJzdEJyYWNlID0gdGFyZ2V0RGVjbGFyYXRpb24uZ2V0Q2hpbGRyZW4oKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgua2luZCA9PSAxNDsgfSlbMF07XG4gICAgICAgIHZhciBpbmRlbnRMZW5ndGggPSBpbmZvLnNlcnZpY2UuZ2V0SW5kZW50YXRpb25BdFBvc2l0aW9uKG1lbWJlclRhcmdldC5nZXRTb3VyY2VGaWxlKCkuZmlsZU5hbWUsIGZpcnN0QnJhY2UuZW5kLCBpbmZvLnByb2plY3QucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucyk7XG4gICAgICAgIHZhciBpbmRlbnQgPSBBcnJheShpbmRlbnRMZW5ndGggKyBpbmZvLnByb2plY3QucHJvamVjdEZpbGUucHJvamVjdC5mb3JtYXRDb2RlT3B0aW9ucy5JbmRlbnRTaXplICsgMSkuam9pbignICcpO1xuICAgICAgICB2YXIgcmVmYWN0b3JpbmcgPSB7XG4gICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGZpcnN0QnJhY2UuZW5kLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5ld1RleHQ6IFwiXCIgKyBvc18xLkVPTCArIGluZGVudCArIGlkZW50aWZpZXJOYW1lICsgXCI6IFwiICsgdHlwZVN0cmluZyArIFwiO1wiLFxuICAgICAgICAgICAgZmlsZVBhdGg6IHRhcmdldERlY2xhcmF0aW9uLmdldFNvdXJjZUZpbGUoKS5maWxlTmFtZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gW3JlZmFjdG9yaW5nXTtcbiAgICB9O1xuICAgIHJldHVybiBBZGRDbGFzc01lbWJlcjtcbn0pKCk7XG5leHBvcnRzLkFkZENsYXNzTWVtYmVyID0gQWRkQ2xhc3NNZW1iZXI7XG4iXX0=