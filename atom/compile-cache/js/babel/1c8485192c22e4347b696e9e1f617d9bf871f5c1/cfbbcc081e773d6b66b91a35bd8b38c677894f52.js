var __extends = this && this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var view = require('./view');
var $ = view.$;
var TooltipView = (function (_super) {
    __extends(TooltipView, _super);
    function TooltipView(rect) {
        _super.call(this, rect);
        this.rect = rect;
        $(document.body).append(this.$);
        this.updatePosition();
    }
    TooltipView.content = function () {
        var _this = this;
        return this.div({ 'class': 'atom-typescript-tooltip tooltip' }, function () {
            _this.div({ 'class': 'tooltip-inner', outlet: 'inner' });
        });
    };
    TooltipView.prototype.updateText = function (text) {
        this.inner.html(text);
        this.updatePosition();
        this.$.fadeTo(300, 1);
    };
    TooltipView.prototype.updatePosition = function () {
        var offset = 10;
        var left = this.rect.right;
        var top = this.rect.bottom;
        var right = undefined;
        if (left + this.$[0].offsetWidth >= view.$(document.body).width()) left = view.$(document.body).width() - this.$[0].offsetWidth - offset;
        if (left < 0) {
            this.$.css({ 'white-space': 'pre-wrap' });
            left = offset;
            right = offset;
        }
        if (top + this.$[0].offsetHeight >= $(document.body).height()) {
            top = this.rect.top - this.$[0].offsetHeight;
        }
        this.$.css({ left: left, top: top, right: right });
    };
    return TooltipView;
})(view.View);
exports.TooltipView = TooltipView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvdG9vbHRpcFZpZXcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsQUFBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDeEQsU0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsYUFBUyxFQUFFLEdBQUc7QUFBRSxZQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUFFO0FBQ3ZDLEtBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFBLEFBQUMsQ0FBQztDQUN4RixDQUFDO0FBQ0YsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDZixJQUFJLFdBQVcsR0FBRyxDQUFDLFVBQVUsTUFBTSxFQUFFO0FBQ2pDLGFBQVMsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsYUFBUyxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3ZCLGNBQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hCLFlBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFNBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxZQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDekI7QUFDRCxlQUFXLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDOUIsWUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLGVBQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQU8saUNBQWlDLEVBQUUsRUFBRSxZQUFZO0FBQ3RFLGlCQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBTyxlQUFlLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDMUQsQ0FBQyxDQUFDO0tBQ04sQ0FBQztBQUNGLGVBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFO0FBQy9DLFlBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RCLFlBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN0QixZQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDekIsQ0FBQztBQUNGLGVBQVcsQ0FBQyxTQUFTLENBQUMsY0FBYyxHQUFHLFlBQVk7QUFDL0MsWUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLFlBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQzNCLFlBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQzNCLFlBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUN0QixZQUFJLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFDN0QsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztBQUMxRSxZQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7QUFDVixnQkFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUMxQyxnQkFBSSxHQUFHLE1BQU0sQ0FBQztBQUNkLGlCQUFLLEdBQUcsTUFBTSxDQUFDO1NBQ2xCO0FBQ0QsWUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtBQUMzRCxlQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7U0FDaEQ7QUFDRCxZQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN0RCxDQUFDO0FBQ0YsV0FBTyxXQUFXLENBQUM7Q0FDdEIsQ0FBQSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNkLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvZGlzdC9tYWluL2F0b20vdmlld3MvdG9vbHRpcFZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciB2aWV3ID0gcmVxdWlyZSgnLi92aWV3Jyk7XG52YXIgJCA9IHZpZXcuJDtcbnZhciBUb29sdGlwVmlldyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRvb2x0aXBWaWV3LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRvb2x0aXBWaWV3KHJlY3QpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgcmVjdCk7XG4gICAgICAgIHRoaXMucmVjdCA9IHJlY3Q7XG4gICAgICAgICQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKHRoaXMuJCk7XG4gICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gICAgVG9vbHRpcFZpZXcuY29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2KHsgY2xhc3M6ICdhdG9tLXR5cGVzY3JpcHQtdG9vbHRpcCB0b29sdGlwJyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5kaXYoeyBjbGFzczogJ3Rvb2x0aXAtaW5uZXInLCBvdXRsZXQ6ICdpbm5lcicgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVG9vbHRpcFZpZXcucHJvdG90eXBlLnVwZGF0ZVRleHQgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICB0aGlzLmlubmVyLmh0bWwodGV4dCk7XG4gICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy4kLmZhZGVUbygzMDAsIDEpO1xuICAgIH07XG4gICAgVG9vbHRpcFZpZXcucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMTA7XG4gICAgICAgIHZhciBsZWZ0ID0gdGhpcy5yZWN0LnJpZ2h0O1xuICAgICAgICB2YXIgdG9wID0gdGhpcy5yZWN0LmJvdHRvbTtcbiAgICAgICAgdmFyIHJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAobGVmdCArIHRoaXMuJFswXS5vZmZzZXRXaWR0aCA+PSB2aWV3LiQoZG9jdW1lbnQuYm9keSkud2lkdGgoKSlcbiAgICAgICAgICAgIGxlZnQgPSB2aWV3LiQoZG9jdW1lbnQuYm9keSkud2lkdGgoKSAtIHRoaXMuJFswXS5vZmZzZXRXaWR0aCAtIG9mZnNldDtcbiAgICAgICAgaWYgKGxlZnQgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLiQuY3NzKHsgJ3doaXRlLXNwYWNlJzogJ3ByZS13cmFwJyB9KTtcbiAgICAgICAgICAgIGxlZnQgPSBvZmZzZXQ7XG4gICAgICAgICAgICByaWdodCA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9wICsgdGhpcy4kWzBdLm9mZnNldEhlaWdodCA+PSAkKGRvY3VtZW50LmJvZHkpLmhlaWdodCgpKSB7XG4gICAgICAgICAgICB0b3AgPSB0aGlzLnJlY3QudG9wIC0gdGhpcy4kWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiQuY3NzKHsgbGVmdDogbGVmdCwgdG9wOiB0b3AsIHJpZ2h0OiByaWdodCB9KTtcbiAgICB9O1xuICAgIHJldHVybiBUb29sdGlwVmlldztcbn0pKHZpZXcuVmlldyk7XG5leHBvcnRzLlRvb2x0aXBWaWV3ID0gVG9vbHRpcFZpZXc7XG4iXX0=