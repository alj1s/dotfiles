/// Not useful for user input validation
// But great for simple config validation 
// works only by "n" valid options
exports.types = {
    string: 'string',
    boolean: 'boolean',
    number: 'number'
};
var SimpleValidator = (function () {
    function SimpleValidator(validationInfo) {
        var _this = this;
        this.validationInfo = validationInfo;
        this.potentialLowerCaseMatch = {};
        Object.keys(validationInfo).forEach(function (k) { return _this.potentialLowerCaseMatch[k.toLowerCase()] = k; });
    }
    SimpleValidator.prototype.validate = function (config) {
        var _this = this;
        var keys = Object.keys(config);
        var errors = { invalidValues: [], extraKeys: [], errorMessage: '' };
        keys.forEach(function (k) {
            // Check extra keys
            if (!_this.validationInfo[k]) {
                if (_this.potentialLowerCaseMatch[k]) {
                    errors.extraKeys.push("Key: '" + k + "' is a potential lower case match for '" + _this.potentialLowerCaseMatch[k] + "'. Fix the casing.");
                }
                else {
                    errors.extraKeys.push("Unknown Option: " + k);
                }
            }
            else {
                var validationInfo = _this.validationInfo[k];
                var value = config[k];
                if (validationInfo.validValues && validationInfo.validValues.length) {
                    var validValues = validationInfo.validValues;
                    if (!validValues.some(function (valid) { return valid === value; })) {
                        errors.invalidValues.push("Key: '" + k + "' has an invalid value: " + value);
                    }
                }
                if (validationInfo.type && typeof value !== validationInfo.type) {
                    errors.invalidValues.push("Key: '" + k + "' has an invalid type: " + typeof value);
                }
            }
        });
        var total = errors.invalidValues.concat(errors.extraKeys);
        if (total.length) {
            errors.errorMessage = total.join("\n");
        }
        return errors;
    };
    return SimpleValidator;
})();
exports.SimpleValidator = SimpleValidator;
function createMap(arr) {
    return arr.reduce(function (result, key) {
        result[key] = true;
        return result;
    }, {});
}
exports.createMap = createMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2FuZHJld2pvbmVzLy5hdG9tL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9saWIvbWFpbi90c2NvbmZpZy9zaW1wbGVWYWxpZGF0b3IudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdqb25lcy8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vdHNjb25maWcvc2ltcGxlVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbIlNpbXBsZVZhbGlkYXRvciIsIlNpbXBsZVZhbGlkYXRvci5jb25zdHJ1Y3RvciIsIlNpbXBsZVZhbGlkYXRvci52YWxpZGF0ZSIsImNyZWF0ZU1hcCJdLCJtYXBwaW5ncyI6IkFBQUEsd0NBQXdDO0FBQ3hDLDBDQUEwQztBQUMxQyxrQ0FBa0M7QUFFdkIsYUFBSyxHQUFHO0lBQ2YsTUFBTSxFQUFFLFFBQVE7SUFDaEIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsTUFBTSxFQUFFLFFBQVE7Q0FDbkIsQ0FBQTtBQWVELElBQWEsZUFBZTtJQUd4QkEsU0FIU0EsZUFBZUEsQ0FHTEEsY0FBOEJBO1FBSHJEQyxpQkE0Q0NBO1FBekNzQkEsbUJBQWNBLEdBQWRBLGNBQWNBLENBQWdCQTtRQUM3Q0EsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNsQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBQUEsQ0FBQ0EsSUFBR0EsT0FBQUEsS0FBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxDQUFDQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFqREEsQ0FBaURBLENBQUNBLENBQUNBO0lBQy9GQSxDQUFDQTtJQUVERCxrQ0FBUUEsR0FBUkEsVUFBU0EsTUFBV0E7UUFBcEJFLGlCQW1DQ0E7UUFsQ0dBLElBQUlBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQy9CQSxJ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QVdBO1FBQzlEQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNuQkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7SUFDbEJBLENBQUNBLEVBQThCQSxFQUFFQSxDQUFDQSxDQUFDQTtBQUN2Q0EsQ0FBQ0E7QUFMZSxpQkFBUyxHQUFULFNBS2YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyBOb3QgdXNlZnVsIGZvciB1c2VyIGlucHV0IHZhbGlkYXRpb25cbi8vIEJ1dCBncmVhdCBmb3Igc2ltcGxlIGNvbmZpZyB2YWxpZGF0aW9uIFxuLy8gd29ya3Mgb25seSBieSBcIm5cIiB2YWxpZCBvcHRpb25zXG5cbmV4cG9ydCB2YXIgdHlwZXMgPSB7XG4gICAgc3RyaW5nOiAnc3RyaW5nJyxcbiAgICBib29sZWFuOiAnYm9vbGVhbicsXG4gICAgbnVtYmVyOiAnbnVtYmVyJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25JbmZvIHtcbiAgICBbbmFtZTogc3RyaW5nXToge1xuICAgICAgICB2YWxpZFZhbHVlcz86IHN0cmluZ1tdO1xuICAgICAgICB0eXBlPzogc3RyaW5nO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvcnMge1xuICAgIGludmFsaWRWYWx1ZXM6IHN0cmluZ1tdO1xuICAgIGV4dHJhS2V5czogc3RyaW5nW107XG4gICAgZXJyb3JNZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVWYWxpZGF0b3Ige1xuXG4gICAgcHJpdmF0ZSBwb3RlbnRpYWxMb3dlckNhc2VNYXRjaDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsaWRhdGlvbkluZm86IFZhbGlkYXRpb25JbmZvKSB7XG4gICAgICAgIHRoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2ggPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXModmFsaWRhdGlvbkluZm8pLmZvckVhY2goaz0+IHRoaXMucG90ZW50aWFsTG93ZXJDYXNlTWF0Y2hbay50b0xvd2VyQ2FzZSgpXSA9IGspO1xuICAgIH1cblxuICAgIHZhbGlkYXRlKGNvbmZpZzogYW55KTogRXJyb3JzIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjb25maWcpO1xuICAgICAgICB2YXIgZXJyb3JzID0geyBpbnZhbGlkVmFsdWVzOiBbXSwgZXh0cmFLZXlzOiBbXSwgZXJyb3JNZXNzYWdlOiAnJyB9O1xuICAgICAgICBrZXlzLmZvckVhY2goaz0+IHtcbiAgICAgICAgICAgIC8vIENoZWNrIGV4dHJhIGtleXNcbiAgICAgICAgICAgIGlmICghdGhpcy52YWxpZGF0aW9uSW5mb1trXSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvdGVudGlhbExvd2VyQ2FzZU1hdGNoW2tdKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5leHRyYUtleXMucHVzaChgS2V5OiAnJHtrfScgaXMgYSBwb3RlbnRpYWwgbG93ZXIgY2FzZSBtYXRjaCBmb3IgJyR7dGhpcy5wb3RlbnRpYWxMb3dlckNhc2VNYXRjaFtrXX0nLiBGaXggdGhlIGNhc2luZy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5leHRyYUtleXMucHVzaChgVW5rbm93biBPcHRpb246ICR7a31gKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgIFxuICAgICAgICAgICAgLy8gRG8gdmFsaWRhdGlvblxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25JbmZvID0gdGhpcy52YWxpZGF0aW9uSW5mb1trXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU6IGFueSA9IGNvbmZpZ1trXTtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbkluZm8udmFsaWRWYWx1ZXMgJiYgdmFsaWRhdGlvbkluZm8udmFsaWRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZFZhbHVlcyA9IHZhbGlkYXRpb25JbmZvLnZhbGlkVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkVmFsdWVzLnNvbWUodmFsaWQgPT4gdmFsaWQgPT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmludmFsaWRWYWx1ZXMucHVzaChgS2V5OiAnJHtrfScgaGFzIGFuIGludmFsaWQgdmFsdWU6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25JbmZvLnR5cGUgJiYgdHlwZW9mIHZhbHVlICE9PSB2YWxpZGF0aW9uSW5mby50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5pbnZhbGlkVmFsdWVzLnB1c2goYEtleTogJyR7a30nIGhhcyBhbiBpbnZhbGlkIHR5cGU6ICR7dHlwZW9mIHZhbHVlfWApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdG90YWwgPSBlcnJvcnMuaW52YWxpZFZhbHVlcy5jb25jYXQoZXJyb3JzLmV4dHJhS2V5cyk7XG4gICAgICAgIGlmICh0b3RhbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVycm9ycy5lcnJvck1lc3NhZ2UgPSB0b3RhbC5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1hcChhcnI6IHN0cmluZ1tdKTogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0ge1xuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHQ6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICByZXN1bHRba2V5XSA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgPHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9Pnt9KTtcbn1cbiJdfQ==