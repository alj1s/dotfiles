{"mode":"editor","version":1,"windowDimensions":{"x":46,"y":146,"width":1280,"height":773,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/andrewjones/dev/work/v2"],"buffers":[{"text":"/// <reference path=\"../_references.d.ts\" />\n\nimport angular = require('angular');\n\nexport var Module:ng.IModule = angular.module('v2.carbon.carbon', []);\n\nimport carbonHubConfig = require('./carbon-hub-config');\nimport carbonStateProvider = require('./carbon-state-provider');\n\nModule\n\t.constant(\"carbonHubConfig\", carbonHubConfig)\n\t.provider(\"carbonState\", carbonStateProvider);\n\nimport carbonHubrefDirective = require('../directives/carbon-hubref-directive');\nimport carbonAspref = require('../directives/carbon-aspref-directive');\nimport carbonIconDirective = require('../directives/carbon-icon-directive');\n\nModule\n\t.directive('carbonHubref', carbonHubrefDirective)\n\t.directive('carbonAspref', carbonAspref.carbonAsprefDirective)\n\t.directive('carbonAsprefActive', carbonAspref.carbonAsprefActiveDirective)\n\t.directive('carbonIcon', carbonIconDirective);\n","markerStore":{"nextMarkerId":94,"markersById":{"0":{"range":{"start":{"row":9,"column":6},"end":{"row":9,"column":6}},"properties":{"type":"selection","editorId":252,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":52,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/andrewjones/dev/work/v2/carbon/src/carbon/index.ts","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5ea5d14ec3e87e19a3670b60453854b6b1c7ddd7","deserializer":"TextBuffer","version":2},{"text":"/// <reference path='./_references.d.ts' />\n\nimport angular = require('angular');\nrequire('ui-router');\n\nimport svc = require('services');\nimport cnt = require('container');\nimport controls = require('controls');\n\nimport c = require('./carbon/index');\nimport home = require('./home-hub/index');\nimport wizard = require('./wizard/index');\nimport srch = require('./carbon-search/index');\n\nexport var Module:ng.IModule = angular.module('v2.carbon', [\n\t'ui.router',\n\tsvc.Module.name,\n\tcnt.Module.name,\n\tcontrols.Module.name,\n\tc.Module.name,\n\thome.Module.name,\n\twizard.Module.name,\n\tsrch.Module.name,\n]);\n\nModule.config(['applicationStateProvider', (applicationStateProvider: v2.IContainerStateProvider) => {\n\t\tvar homeStateProvider = ['carbonState', (carbonState: container.IApplicationStateService) => {\n\t\t\t\treturn carbonState.getAspectState('home', 'carbon-home');\n\t\t\t}];\n\n\t\tapplicationStateProvider.setHomeStateProvider(homeStateProvider, 'carbon');\n\n\t}])\n\t.run(['carbonState', (carbonState : container.IApplicationStateProvider) => { }]);\n\n\n// TODO : Adding mocking support\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":256,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/andrewjones/dev/work/v2/carbon/src/index.ts","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"475b6aabfd94b046c37979779ef163927d1a7585","deserializer":"TextBuffer","version":2},{"text":"declare module v2 {\n  interface IQueryResponse<T> {\n  }\n\n  interface IQuerySuccess<T> extends IQueryResponse<T> {\n    value: T;\n    warnings: Array<IValidationWarning>;\n    optimisticLock? : any;\n  }\n\n  interface ICreateResponse<T> {\n\n  }\n\n  interface ICreateSuccess<T> extends ICreateResponse<T>, IMergeResponse<T> {\n    id: T;\n    warnings: Array<IValidationWarning>;\n  }\n\n  interface ICreateFailure extends ICreateResponse<any> {\n    errors: Array<IValidationError>;\n    warnings: Array<IValidationWarning>;\n  }\n\n  interface IUpdateResponse<T> {\n\n  }\n\n  interface IUpdateSuccess<T> extends IUpdateResponse<T>, IMergeResponse<T> {\n    id: T;\n    warnings: Array<IValidationWarning>;\n  }\n\n  interface IUpdateFailure extends IUpdateResponse<any> {\n    errors: Array<IValidationError>;\n    warnings: Array<IValidationWarning>;\n  }\n\n  interface IDeleteResponse<T> {\n\n  }\n\n  interface IDeleteSuccess<T> extends IDeleteResponse<T> {\n    id: T;\n    warnings: Array<IValidationWarning>;\n  }\n\n  interface IDeleteFailure extends IDeleteResponse<any> {\n    errors: Array<IValidationError>;\n    warnings: Array<IValidationWarning>;\n  }\n\n  interface IMergeResponse<T> {\n\n  }\n\n  interface IMergeFailure extends IMergeResponse<any> {\n    errors: Array<IValidationError>;\n    warnings: Array<IValidationWarning>;\n  }\n}\n","markerStore":{"nextMarkerId":82,"markersById":{"0":{"range":{"start":{"row":10,"column":0},"end":{"row":10,"column":0}},"properties":{"type":"selection","editorId":264,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":2,"nextCheckpointId":5,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/andrewjones/dev/work/v2/common/src/responses.d.ts","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7ef85e3554a5c59c03ede56cb493c41393d9c7f1","deserializer":"TextBuffer","version":2},{"text":"/// <reference path=\"../_references.d.ts\" />\n\nvar cnt = require(\"container\");\n\nclass UserService implements prm.users.IUserService {\n  public static $inject = [\"$rootScope\", \"$q\", \"usersRemote\", \"legalEntityService\", \"authenticationService\", \"wizardService\", \"wizardState\", \"dialogService\"];\n\n  constructor(private $rootScope: ng.IRootScopeService,\n      private $q: ng.IQService,\n      private userRemote: rolesandpermissions.IUsersRemote,\n      private legalEntityService: prm.legalEntities.ILegalEntityService,\n      private authenticationService: services.IAuthenticationService,\n      private wizardService: container.IWizardService,\n      private wizardState: container.IWizardState,\n      private dialogService: v2.IDialogService) {\n    console.log(\"userRemote\", userRemote);\n  }\n\n  public fetchUsers(searchTerm: string, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IUserHeader>> {\n    console.log(\"About to call searchUsers on remote\", this.userRemote);\n    return this.userRemote.searchUsers(searchTerm, request);\n  }\n\n  public fetchUserGroupLinks(username: string, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IUserGroupLink>> {\n    console.log(\"About to call fetchUserGroupLinks on remote\", this.userRemote);\n    return this.userRemote.getUserToGroupLinks(username, request);\n  }\n\n  public fetchUserAccessDataRuleLinks(username: string, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IUserDataRuleLink>> {\n    console.log(\"About to call fetchUserAccessDataRuleLinks on remote\", this.userRemote);\n    return this.userRemote.getUserToAccessDataRuleLinks(username, request);\n  }\n\n  public fetchUserFilterDataRuleLinks(username: string, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IUserDataRuleLink>> {\n    console.log(\"About to call fetchUserFilterDataRuleLinks on remote\", this.userRemote);\n    return this.userRemote.getUserToFilterDataRuleLinks(username, request);\n  }\n\n  public fetchUserBusinessGetterLinks(username: string, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IUserBusinessGetterLink>> {\n    console.log(\"About to call fetchUserBusinessGetterLinks on remote\", this.userRemote);\n    return this.userRemote.getUserToBusinessGetterLinks(username, request);\n  }\n\n  public fetchUserDetails(username: string): ng.IPromise<rolesandpermissions.IUser> {\n    console.log(\"About to call fetchUserDetails on remote\", this.userRemote);\n    return this.userRemote.getUserDetails(username);\n  }\n\n  public validateUser(user): ng.IPromise<v2.IValidationResponse<rolesandpermissions.IUser>> {\n    return this.userRemote.validateUser(user);\n  }\n\n  public validateUserForUpdate(user): ng.IPromise<v2.IValidationResponse<rolesandpermissions.IUser>> {\n    return this.userRemote.validateUserForUpdate(user);\n  }\n\n  public createFreshUser(): rolesandpermissions.IUser {\n    return {\n      userHeader: { username: \"\", title: \"\", forename: \"\", surname: \"\" },\n      passwordExpiryDate: new Date(),\n      failedAttempts: 0,\n      enabled: true\n    }\n  }\n\n  public saveUser(user: rolesandpermissions.IUser,\n      groups: Array<rolesandpermissions.IUserGroupLink>,\n      rules: Array<rolesandpermissions.IUserDataRuleLink>,\n      businessGetters: Array<rolesandpermissions.IGroupBusinessGetterLink>) {\n    var userLegalEntityCode: string = this.getUserLegalEntityCodeForCreate(user);\n\n    if (userLegalEntityCode !== null) {\n      user.userHeader.legalEntity = {\n        code: userLegalEntityCode,\n        description: \"\"\n      };\n    } else {\n      user.userHeader.legalEntity = null;\n    }\n\n    if (user['emailAddress']) {\n      user.person = {\n        personType: 'IND',\n        name: user.userHeader.forename + ' ' + user.userHeader.surname,\n        emailAddress: user['emailAddress']\n      };\n    } else {\n      user.person = null;\n    }\n\n    this.userRemote.createUser(user, user['password']).then((result) => {\n      var username: string = user.userHeader.username;\n      var userText: string = user.userHeader.forename + \" \" + user.userHeader.surname + \" (\" + username + \")\";\n      var requests: Array<ng.IPromise<any>> = [];\n\n      if (groups.length > 0) {\n        var groupRequest = this.userRemote.createUserToGroupLink(username, groups.map(link => link.group.groupId));\n        requests.push(groupRequest);\n      }\n\n      if (rules && rules.length > 0) {\n        var ruleRequest = this.userRemote.createUserToDataRuleLink(username, rules);\n        requests.push(ruleRequest);\n      }\n\n      if (businessGetters && businessGetters.length > 0) {\n        var businessGetterRequest = this.userRemote.createUserToBusinessGetterLink(username, businessGetters.map(link => link.businessGetter.businessGetterCode));\n        requests.push(businessGetterRequest);\n      }\n\n      this.$q.all(requests).then((finalResult) => {\n        this.dialogService.showInformation(\"Create Confirmation\", \"The user \" + userText + \" has been created.\");\n      });\n    });\n  }\n\n  public updateUser(user: rolesandpermissions.IUser,\n      groups: Array<rolesandpermissions.IUserGroupLink>,\n      rules: Array<rolesandpermissions.IUserDataRuleLink>,\n      businessGetters: Array<rolesandpermissions.IGroupBusinessGetterLink>) {\n    var username: string = user.userHeader.username;\n    var legalEntityCode = this.authenticationService.getCredentials().legalEntityCode;\n\n    if (typeof legalEntityCode !== 'undefined') {\n      user.userHeader.legalEntity = {\n        code: legalEntityCode,\n        description: \"\"\n      };\n    }\n\n    if (user.person) {\n      if (user['emailAddress']) {\n        user.person.emailAddress = user['emailAddress'];\n      } else {\n        user.person.emailAddress = null;\n      }\n    } else {\n      if (user['emailAddress']) {\n        user.person = {\n          personType: 'IND',\n          name: user.userHeader.forename + ' ' + user.userHeader.surname,\n          emailAddress: user['emailAddress']\n        };\n      } else {\n        user.person = null;\n      }\n    }\n\n    this.userRemote.updateUser(user, user['password']).then((result) => {\n      var userText: string = user.userHeader.forename + \" \" + user.userHeader.surname + \" (\" + username + \")\";\n      var requests: Array<ng.IPromise<any>> = [];\n\n      var groupRequest = this.userRemote.deleteUserToGroupLinks(username, null).then((deleteResult) => {\n        if (groups.length > 0) {\n          return this.userRemote.createUserToGroupLink(username,\n            groups.map(link => link.group.groupId));\n        }\n      });\n      requests.push(groupRequest);\n\n      var ruleRequest = this.userRemote.deleteUserToDataRuleLinks(username, null).then((deleteResult) => {\n        if (rules && rules.length > 0) {\n          return this.userRemote.createUserToDataRuleLink(username, rules);\n        }\n      });\n      requests.push(ruleRequest);\n\n      var businessGetterRequest = this.userRemote.deleteUserToBusinessGetterLinks(username, null).then((deleteResult) => {\n        if (businessGetters && businessGetters.length > 0) {\n          return this.userRemote.createUserToBusinessGetterLink(username,\n            businessGetters.map(link => link.businessGetter.businessGetterCode));\n        }\n      });\n      requests.push(businessGetterRequest);\n\n      this.$q.all(requests).then((finalResult) => {\n        this.dialogService.showInformation(\"Update Confirmation\", \"The user \" + userText + \" has been updated.\");\n      });\n    });\n  }\n\n  public removeUser(user: rolesandpermissions.IUser) {\n    var username: string = user.userHeader.username;\n    var userText: string = user.userHeader.forename + \" \" + user.userHeader.surname + \" (\" + username + \")\";\n\n    this.dialogService.showDialog(\"Confirm Delete?\", \"Are you sure you want to delete user \" + userText + \"?\").then(result => {\n      this.wizardService.close();\n\n      this.userRemote.deleteUser(username).then(response => {\n        this.dialogService.showInformation(\"Delete Confirmation\", \"The user \" + userText + \" has been deleted.\");\n      });\n    });\n  }\n\n  private getUserLegalEntityCodeForCreate(user: rolesandpermissions.IUser): string {\n    var userLegalEntityCode: string;\n\n    var legalEntityCode = this.authenticationService.getCredentials().legalEntityCode;\n\n    if (typeof legalEntityCode === 'undefined') {\n      if (user.userHeader.legalEntity) {\n        userLegalEntityCode = user.userHeader.legalEntity.code;\n      } else {\n        userLegalEntityCode = null;\n      }\n    } else {\n      userLegalEntityCode = legalEntityCode;\n    }\n\n    return userLegalEntityCode;\n  }\n\n  public launchCreateWizard() {\n    this.wizardService.launch('add-user', 'add-details', true)\n  }\n\n  public launchEditWizard(user: rolesandpermissions.IUser, step?: string) {\n    var username = user.userHeader.username;\n    var request = { size: 50, includeTotalElements: true, sort: [], filters: [] };\n    var groups = this.fetchUserGroupLinks(username, request);\n    var accessRules = this.fetchUserAccessDataRuleLinks(username, request);\n    var filterRules = this.fetchUserFilterDataRuleLinks(username, request);\n    var businessGetters = this.fetchUserBusinessGetterLinks(username, request);\n\n    this.$q.all([groups, accessRules, filterRules, businessGetters]).then((results) => {\n      var groupResults = results[0].contents;\n      var allRuleResults = results[1].contents.concat(results[2].contents);\n      var businessGetterResults = results[3].contents;\n\n      this.wizardState.saveData('user', angular.copy(user));\n      this.wizardState.saveData('groups', groupResults);\n      this.wizardState.saveData('rules', allRuleResults);\n      this.wizardState.saveData('business-getters', businessGetterResults);\n\n      this.wizardService.launch('edit-user', step, false);\n    });\n  }\n}\n\nexport = UserService;\n","markerStore":{"nextMarkerId":42,"markersById":{"0":{"range":{"start":{"row":24,"column":41},"end":{"row":24,"column":41}},"properties":{"type":"selection","editorId":268,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"1":{"range":{"start":{"row":24,"column":41},"end":{"row":24,"column":41}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/user-service.ts","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0a5db61746531914167694bdd1332e5634e193dd","deserializer":"TextBuffer","version":2},{"text":"/// <reference path=\"../_references.d.ts\" />\n\nvar cnt = require(\"container\");\n\nclass GroupService implements prm.groups.IGroupService {\n  public static $inject = [\"$rootScope\", \"$q\", \"groupsRemote\", \"legalEntityService\", \"authenticationService\", \"wizardService\", \"wizardState\", \"dialogService\"];\n\n  constructor(private $rootScope: ng.IRootScopeService,\n              private $q: ng.IQService,\n              private groupRemote: rolesandpermissions.IGroupsRemote,\n              private legalEntityService: prm.legalEntities.ILegalEntityService,\n              private authenticationService: services.IAuthenticationService,\n              private wizardService: container.IWizardService,\n              private wizardState: container.IWizardState,\n              private dialogService: v2.IDialogService) {\n    console.log(\"groupRemote\", groupRemote);\n  }\n\n  public fetchGroups(searchTerm: string, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IPermissionUserGroup>> {\n    console.log(\"About to call searchGroups on remote\", this.groupRemote);\n    return this.groupRemote.searchGroups(searchTerm, request);\n  }\n\n  public fetchGroupUserLinks(groupId: number, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IGroupUserLink>> {\n    console.log(\"About to call fetchGroupUserLinks on remote\", this.groupRemote);\n    return this.groupRemote.getGroupToUserLinks(groupId, request);\n  }\n\n  public fetchGroupAccessDataRuleLinks(groupId: number, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IGroupDataRuleLink>> {\n    console.log(\"About to call fetchGroupAccessDataRuleLinks on remote\", this.groupRemote);\n    return this.groupRemote.getGroupToAccessDataRuleLinks(groupId, request);\n  }\n\n  public fetchGroupFilterDataRuleLinks(groupId: number, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IGroupDataRuleLink>> {\n    console.log(\"About to call fetchGroupFilterDataRuleLinks on remote\", this.groupRemote);\n    return this.groupRemote.getGroupToFilterDataRuleLinks(groupId, request);\n  }\n\n  public fetchGroupBusinessGetterLinks(groupId: number, request: v2.IPageRequest): ng.IPromise<v2.IPage<rolesandpermissions.IGroupBusinessGetterLink>> {\n    console.log(\"About to call fetchGroupBusinessGetterLinks on remote\", this.groupRemote);\n    return this.groupRemote.getGroupToBusinessGetterLinks(groupId, request);\n  }\n\n  public fetchGroupDetails(groupId: number): ng.IPromise<rolesandpermissions.IPermissionUserGroup> {\n    console.log(\"About to call fetchGroupDetails on remote\", this.groupRemote);\n    return this.groupRemote.getGroupDetails(groupId);\n  }\n\n  public validateGroup(group: rolesandpermissions.IPermissionUserGroup): ng.IPromise<v2.IValidationResponse<rolesandpermissions.IPermissionUserGroup>> {\n    return this.groupRemote.validateGroup(group);\n  }\n\n  public createFreshGroup(): rolesandpermissions.IPermissionUserGroup {\n    return {\n      groupId: -1,\n      description: \"\"\n    };\n  }\n\n  public createBlankUserGroupLink(username: string, group ?: rolesandpermissions.IPermissionUserGroup): rolesandpermissions.IUserGroupLink {\n    return {\n      username: username,\n      group: group\n    };\n  }\n\n  public saveGroup(group: rolesandpermissions.IPermissionUserGroup,\n    rules: Array<rolesandpermissions.IGroupDataRuleLink>,\n    businessGetters: Array<rolesandpermissions.IGroupBusinessGetterLink>) {\n    var groupLegalEntityCode: string = this.getGroupLegalEntityCodeForCreate(group);\n\n    if (groupLegalEntityCode !== null) {\n      group.legalEntity = {\n        code: groupLegalEntityCode,\n        description: \"\"\n      };\n    } else {\n      group.legalEntity = null;\n    }\n\n    this.groupRemote.createGroup(group).then((result) => {\n      var groupId: number = (<v2.ICreateSuccess<number>>result).id;\n      var description: string = group.description;\n      var requests: Array<ng.IPromise<any>> = [];\n\n   \t\trules.forEach((rule) => {\n        rule.groupId = groupId;\n      });\n\n      if (rules.length > 0) {\n        var rulesRequest = this.groupRemote.createGroupToDataRuleLink(groupId, rules);\n        requests.push(rulesRequest);\n      }\n\n      if (businessGetters.length > 0) {\n        var businessGettersRequest = this.groupRemote.createGroupToBusinessGetterLink(groupId,\n   \t\t\t    businessGetters.map(link => link.businessGetter.businessGetterCode));\n        requests.push(businessGettersRequest);\n      }\n\n      this.$q.all(requests).then((finalResult) => {\n        this.dialogService.showInformation(\"Create Confirmation\", \"The group \\\"\" + description + \"\\\" has been created.\");\n      });\n    });\n  }\n\n  public updateGroup(group: rolesandpermissions.IPermissionUserGroup,\n    rules: Array<rolesandpermissions.IGroupDataRuleLink>,\n    businessGetters: Array<rolesandpermissions.IGroupBusinessGetterLink>) {\n    var groupId: number = group.groupId;\n    var legalEntityCode = this.authenticationService.getCredentials().legalEntityCode;\n\n    if (typeof legalEntityCode !== 'undefined') {\n      group.legalEntity = {\n        code: legalEntityCode,\n        description: \"\"\n      };\n    }\n\n    this.groupRemote.updateGroup(group).then((result) => {\n      var description: string = group.description;\n      var requests: Array<ng.IPromise<any>> = [];\n\n      var ruleRequest = this.groupRemote.deleteGroupToDataRuleLinks(groupId, null).then((deleteResult) => {\n        rules.forEach((rule) => {\n          rule.groupId = groupId;\n        });\n\n        if (rules.length > 0) {\n          return this.groupRemote.createGroupToDataRuleLink(groupId, rules);\n        }\n      });\n      requests.push(ruleRequest);\n\n      var businessGetterRequest = this.groupRemote.deleteGroupToBusinessGetterLinks(groupId, null).then((deleteResult) => {\n        if (businessGetters.length > 0) {\n          return this.groupRemote.createGroupToBusinessGetterLink(groupId,\n            businessGetters.map(link => link.businessGetter.businessGetterCode));\n        }\n      });\n      requests.push(businessGetterRequest);\n\n      this.$q.all(requests).then((finalResult) => {\n        this.dialogService.showInformation(\"Update Confirmation\", \"The group \\\"\" + description + \"\\\" has been updated.\");\n      });\n    });\n  }\n\n  public removeGroup(group: rolesandpermissions.IPermissionUserGroup) {\n    var groupId: number = group.groupId;\n    var description: string = group.description;\n\n    this.dialogService.showDialog(\"Confirm Delete?\", \"Are you sure you want to delete group \\\"\" + description + \"\\\"?\").then(result => {\n      this.wizardService.close();\n\n      this.groupRemote.deleteGroup(groupId).then(response => {\n        this.dialogService.showInformation(\"Delete Confirmation\", \"The group \\\"\" + description + \"\\\" has been deleted.\");\n      });\n    });\n  }\n\n  private getGroupLegalEntityCodeForCreate(group: rolesandpermissions.IPermissionUserGroup): string {\n    var groupLegalEntityCode: string;\n\n    var legalEntityCode = this.authenticationService.getCredentials().legalEntityCode;\n\n    if (typeof legalEntityCode === 'undefined') {\n      if (group.legalEntity) {\n        groupLegalEntityCode = group.legalEntity.code;\n      } else {\n        groupLegalEntityCode = null;\n      }\n    } else {\n      groupLegalEntityCode = legalEntityCode;\n    }\n\n    return groupLegalEntityCode;\n  }\n\n  public launchCreateWizard() {\n    this.wizardService.launch('add-group', 'add-details', true);\n  }\n\n  public launchEditWizard(group: rolesandpermissions.IPermissionUserGroup, step?: string) {\n    var groupId = group.groupId;\n    var request = { size: 50, includeTotalElements: true, sort: [], filters: [] };\n    var accessRules = this.fetchGroupAccessDataRuleLinks(groupId, request);\n    var filterRules = this.fetchGroupFilterDataRuleLinks(groupId, request);\n    var businessGetters = this.fetchGroupBusinessGetterLinks(groupId, request);\n\n    this.$q.all([accessRules, filterRules, businessGetters]).then((results) => {\n      var allRuleResults = results[0].contents.concat(results[1].contents);\n      var businessGetterResults = results[2].contents;\n\n      this.wizardState.saveData('group', angular.copy(group));\n      this.wizardState.saveData('rules', allRuleResults);\n      this.wizardState.saveData('business-getters', businessGetterResults);\n\n      this.wizardService.launch('edit-group', step, false);\n    });\n  }\n}\n\nexport = GroupService;\n","markerStore":{"nextMarkerId":13,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":348,"preserveFolds":true,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"7":{"range":{"start":{"row":48,"column":88},"end":{"row":48,"column":107}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"8":{"range":{"start":{"row":49,"column":28},"end":{"row":49,"column":41}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"9":{"range":{"start":{"row":80,"column":4},"end":{"row":80,"column":39}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"10":{"range":{"start":{"row":81,"column":33},"end":{"row":81,"column":47}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"11":{"range":{"start":{"row":110,"column":70},"end":{"row":110,"column":85}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"12":{"range":{"start":{"row":164,"column":70},"end":{"row":164,"column":85}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b94126ee9775b17191cad546e3ac0c8fc432f4ee","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":252,"softTabs":false,"displayBuffer":{"id":253,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewjones/dev/work/v2/carbon/src/carbon/index.ts","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":256,"softTabs":false,"displayBuffer":{"id":257,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewjones/dev/work/v2/carbon/src/index.ts","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":264,"softTabs":true,"displayBuffer":{"id":265,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewjones/dev/work/v2/common/src/responses.d.ts","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":268,"softTabs":true,"displayBuffer":{"id":269,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/user-service.ts","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":348,"softTabs":true,"displayBuffer":{"id":349,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["atom-typescript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"atom-typescript":{},"linter":{"scope":"File"},"nuclide-file-tree":{"panel":{"isVisible":true},"tree":{"expandedNodeKeys":["/Users/andrewjones/dev/work/v2/container/src/","/Users/andrewjones/dev/work/v2/container/src/state/","/Users/andrewjones/dev/work/v2/zinc/src/enquiry/","/Users/andrewjones/dev/work/v2/container/src/main/","/Users/andrewjones/dev/work/v2/container/src/state/__tests__/","/Users/andrewjones/dev/work/v2/container/e2e/","/Users/andrewjones/dev/work/v2/container/e2e/page-objects/","/Users/andrewjones/dev/work/v2/crm/src/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/publish/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/install/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/link/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/reporters/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/server/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/specs/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/task/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/tslint/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/utils/","/Users/andrewjones/dev/work/v2/gulp-tasks/src/","/Users/andrewjones/dev/work/v2/carbon/src/","/Users/andrewjones/dev/work/v2/common/src/","/Users/andrewjones/dev/work/v2/roles-and-permissions/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/wizard/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/detail/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/wizard/edit/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/wizard/add/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/rules/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/rules/detail/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/detail/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/wizard/","/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/wizard/add/","/Users/andrewjones/dev/work/v2/"],"selectedNodeKeys":["/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts"]}},"nuclide-remote-projects":{"remoteProjectsConfig":[]},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-08-05T14:54:44.736Z","version":"1.0.1","markersVersion":"1.0.4","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"252":{"id":252,"path":"/Users/andrewjones/dev/work/v2/carbon/src/carbon/index.ts","colorMarkers":[]},"256":{"id":256,"path":"/Users/andrewjones/dev/work/v2/carbon/src/index.ts","colorMarkers":[]},"264":{"id":264,"path":"/Users/andrewjones/dev/work/v2/common/src/responses.d.ts","colorMarkers":[]},"268":{"id":268,"path":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/user-service.ts","colorMarkers":[]},"348":{"id":348,"path":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts","colorMarkers":[]}}}},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false,"wholeWord":false},"findHistory":["isZincApp","getApplicationState","getApplicationName","carbon-search","searchTemplate","autoprefix"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/andrewjones/dev/work/v2/carbon/src/carbon/index.ts":1438765433338,"/Users/andrewjones/dev/work/v2/carbon/src/index.ts":1438765468025,"/Users/andrewjones/dev/work/v2/common/src/responses.d.ts":1438771978436,"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/users/user-service.ts":1438784974177,"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts":1438786477649},"keybinding-resolver":{},"metrics":{"sessionLength":7128},"tabs":[{"previewTabURI":"/Users/andrewjones/dev/work/v2/roles-and-permissions/src/groups/group-service.ts"}],"tree-view":{}}}