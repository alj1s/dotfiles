{
  "name": "dependency-injector",
  "author": {
    "name": "Josh Perez",
    "email": "josh@goatslacker.com"
  },
  "version": "0.0.5",
  "description": "Dependency Injection via function arguments",
  "repository": {
    "type": "git",
    "url": "https://github.com/goatslacker/di.git"
  },
  "main": "index.js",
  "dependencies": {
    "get-parameter-names": "*"
  },
  "keywords": [
    "di",
    "dependency",
    "injection",
    "dependency injection",
    "injector"
  ],
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "di\n==\n\nJavaScript dependency injection\n\n\n## Install\n\n    npm install dependency-injector\n\n\n## Usage\n\n    var DI = require('dependency-injector')\n    var di = new DI()\n\n    di.register({ foo: 2 })\n\n    var functionWithDependency = di.inject(function (foo) {\n      return foo\n    })\n\n    functionWithDependency == 2 // true\n\n\n## API\n\n### `register(name, fn)` | `register(dependencies)`\n\nRegisters your dependencies with the current instance of DI.\n\n    register('foo', 2)\n    register({ foo: 2 })\n\n### `getParameterNames(fn)`\n\nUtility function to retrieve parameter names from a function.\n\n    getParameterNames(function (foo, bar, baz) { }) // == ['foo', 'bar', 'baz']\n\n### `inject(fn, additionalDependencies)`\n\nCreates a function that is loaded with the dependencies. You may pass in\nadditional dependencies at this point.\n\n    inject(function (foo + bar) { return foo + bar }, { bar: 3 })\n\n### `clone()`\n\nClones the current set of dependencies into its own object.\n\n    var anotherInstance = clone()\n\n\n## License\n\n[MIT](http://josh.mit-license.org)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/goatslacker/di/issues"
  },
  "homepage": "https://github.com/goatslacker/di",
  "_id": "dependency-injector@0.0.5",
  "_from": "dependency-injector@~0.0.5"
}
