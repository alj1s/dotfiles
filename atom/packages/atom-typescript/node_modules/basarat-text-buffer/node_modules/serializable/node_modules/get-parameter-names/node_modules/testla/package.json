{
  "name": "testla",
  "author": {
    "name": "Josh Perez",
    "email": "josh@goatslacker.com"
  },
  "version": "0.1.3",
  "description": "An opinionated and lightweight testing framework",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/goatslacker/testla.git"
  },
  "bugs": {
    "url": "https://github.com/goatslacker/testla/issues"
  },
  "main": "lib/index.js",
  "bin": {
    "testla": "./bin/testla"
  },
  "dependencies": {
    "alt": "^0.12.0",
    "dependency-injector": "~0.0.5",
    "fantasy-promises": "^0.1.0"
  },
  "bundleDependencies": [
    "asserts.js",
    "fn.js",
    "observer.js"
  ],
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/testla.png)](http://badge.fury.io/js/testla)\n[![Dependency Status](https://david-dm.org/goatslacker/testla.png)](https://david-dm.org/goatslacker/testla)\n\n# testla\n\n> an opinionated and lightweight testing framework for the browser and node.js\n\n## install\n\n```\nnpm install -g testla\n```\n\n\n## reference\n\n```\ntestla [FILE, ...]\n```\n\nRunning individual tests\n\n```\ntestla file1-test.js file2-test.js\n```\n\nRunning all tests in folder\n\n```\ntestla tests/\n```\n\n\n### ideas\n\n* Modules\n* Dependency Injection\n* Browser, framework, and platform independent\n* Intuitive and lightweight syntax\n\n\n### matchers\n\nSimilar to node.js `assert`\n\n```\nfail\nok\nequal\nnotEqual\nstrictEqual\nnotStrictEqual\ndeepEqual\nnotDeepEqual\nthrows\ndoesNotThrow\n```\n\nOther included matchers\n\n```\nisFunction\nisNumber\nisString\nisBoolean\nisArray\nisObject\nisArguments\nisDate\nisRegExp\nisUndefined\nisNull\nisNaN\nisTrue\nisFalse\nisEmpty\n```\n\n\n### custom matchers\n\nIn your `dependencies.js` file export a function which returns an object\nliteral of dependencies. Here you can use `assert.extend()` to create your own\ncustom matchers.\n\n```js\nmodule.exports = function (assert) {\n  assert.extend({\n    myCustomMatcher: function (a, b, message) {\n      assert.equal(a, b, message)\n    }\n  })\n\n  return {\n    myDep: 1,\n    otherDependency: 'hello'\n  }\n}\n```\n\n\n### spies\n\nSpies are useful for hooking into functions and asserting that they have been\ncalled and with the correct parameters.\n\nTo work with spies just include `spy` in your test function's parameters.\n\n```js\nvar obj = { foo: function () { } }\n\n'a spy test': function (spy) {\n  var mySpy = spy.on(obj, 'foo')\n  obj.foo('bar')\n  mySpy.assert('bar')\n}\n```\n\n\n### asynchronous\n\nRelies on promises to provide asynchronous tests. One can `reject` or fail the\ntest or `resolve`/complete the test. Returning the promise is essential to mark\nthe test as asynchronous and inform testla to wait for the test to finish.\n\n```js\n'an async test': function (promise) {\n  setTimeout(function () {\n    promise.resolve(4)\n  }, 500)\n\n  return promise\n}\n```\n\n# License\n\n[MIT LICENSE](http://josh.mit-license.org)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/goatslacker/testla",
  "_id": "testla@0.1.3",
  "_from": "testla@*"
}
